using System;
using System.IO;
using System.Collections.Generic;
using RestSharp;
using KubeNET.Swagger.Client;
using KubeNET.Swagger.Model;

namespace KubeNET.Swagger.Api
{
    
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVApi
    {
        
        /// <summary>
        /// get available resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns></returns>
        void GetAPIResources ();
  
        /// <summary>
        /// get available resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns></returns>
        System.Threading.Tasks.Task GetAPIResourcesAsync ();
        
        /// <summary>
        /// list objects of kind ComponentStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ComponentStatusList</returns>
        V1ComponentStatusList ListNamespacedComponentStatus (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list objects of kind ComponentStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ComponentStatusList</returns>
        System.Threading.Tasks.Task<V1ComponentStatusList> ListNamespacedComponentStatusAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// read the specified ComponentStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the ComponentStatus</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ComponentStatus</returns>
        V1ComponentStatus ReadNamespacedComponentStatus (string name, string pretty);
  
        /// <summary>
        /// read the specified ComponentStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the ComponentStatus</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ComponentStatus</returns>
        System.Threading.Tasks.Task<V1ComponentStatus> ReadNamespacedComponentStatusAsync (string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        V1EndpointsList ListEndpoints (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        System.Threading.Tasks.Task<V1EndpointsList> ListEndpointsAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        V1EventList ListEvent (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        System.Threading.Tasks.Task<V1EventList> ListEventAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        V1LimitRangeList ListLimitRange (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        System.Threading.Tasks.Task<V1LimitRangeList> ListLimitRangeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NamespaceList</returns>
        V1NamespaceList ListNamespacedNamespace (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NamespaceList</returns>
        System.Threading.Tasks.Task<V1NamespaceList> ListNamespacedNamespaceAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace CreateNamespacedNamespace (V1Namespace body, string pretty);
  
        /// <summary>
        /// create a Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> CreateNamespacedNamespaceAsync (V1Namespace body, string pretty);
        
        /// <summary>
        /// create a Binding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        V1Binding CreateNamespacedBinding (V1Binding body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Binding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        System.Threading.Tasks.Task<V1Binding> CreateNamespacedBindingAsync (V1Binding body, string _namespace, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        V1EndpointsList ListNamespacedEndpoints (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        System.Threading.Tasks.Task<V1EndpointsList> ListNamespacedEndpointsAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        V1Endpoints CreateNamespacedEndpoints (V1Endpoints body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        System.Threading.Tasks.Task<V1Endpoints> CreateNamespacedEndpointsAsync (V1Endpoints body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        V1Endpoints ReadNamespacedEndpoints (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        System.Threading.Tasks.Task<V1Endpoints> ReadNamespacedEndpointsAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        V1Endpoints ReplaceNamespacedEndpoints (V1Endpoints body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        System.Threading.Tasks.Task<V1Endpoints> ReplaceNamespacedEndpointsAsync (V1Endpoints body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedEndpoints (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedEndpointsAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        V1Endpoints PatchNamespacedEndpoints (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        System.Threading.Tasks.Task<V1Endpoints> PatchNamespacedEndpointsAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        V1EventList ListNamespacedEvent (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        System.Threading.Tasks.Task<V1EventList> ListNamespacedEventAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        V1Event CreateNamespacedEvent (V1Event body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        System.Threading.Tasks.Task<V1Event> CreateNamespacedEventAsync (V1Event body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        V1Event ReadNamespacedEvent (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        System.Threading.Tasks.Task<V1Event> ReadNamespacedEventAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        V1Event ReplaceNamespacedEvent (V1Event body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        System.Threading.Tasks.Task<V1Event> ReplaceNamespacedEventAsync (V1Event body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedEvent (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedEventAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        V1Event PatchNamespacedEvent (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        System.Threading.Tasks.Task<V1Event> PatchNamespacedEventAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        V1LimitRangeList ListNamespacedLimitRange (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        System.Threading.Tasks.Task<V1LimitRangeList> ListNamespacedLimitRangeAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        V1LimitRange CreateNamespacedLimitRange (V1LimitRange body, string _namespace, string pretty);
  
        /// <summary>
        /// create a LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        System.Threading.Tasks.Task<V1LimitRange> CreateNamespacedLimitRangeAsync (V1LimitRange body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        V1LimitRange ReadNamespacedLimitRange (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        System.Threading.Tasks.Task<V1LimitRange> ReadNamespacedLimitRangeAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        V1LimitRange ReplaceNamespacedLimitRange (V1LimitRange body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        System.Threading.Tasks.Task<V1LimitRange> ReplaceNamespacedLimitRangeAsync (V1LimitRange body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedLimitRange (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedLimitRangeAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        V1LimitRange PatchNamespacedLimitRange (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        System.Threading.Tasks.Task<V1LimitRange> PatchNamespacedLimitRangeAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        V1PersistentVolumeClaimList ListNamespacedPersistentVolumeClaim (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaimList> ListNamespacedPersistentVolumeClaimAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim CreateNamespacedPersistentVolumeClaim (V1PersistentVolumeClaim body, string _namespace, string pretty);
  
        /// <summary>
        /// create a PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> CreateNamespacedPersistentVolumeClaimAsync (V1PersistentVolumeClaim body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim ReadNamespacedPersistentVolumeClaim (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReadNamespacedPersistentVolumeClaimAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaim (V1PersistentVolumeClaim body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimAsync (V1PersistentVolumeClaim body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedPersistentVolumeClaim (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPersistentVolumeClaimAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim PatchNamespacedPersistentVolumeClaim (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> PatchNamespacedPersistentVolumeClaimAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaimStatus (V1PersistentVolumeClaim body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimStatusAsync (V1PersistentVolumeClaim body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        V1PodList ListNamespacedPod (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        System.Threading.Tasks.Task<V1PodList> ListNamespacedPodAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod CreateNamespacedPod (V1Pod body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> CreateNamespacedPodAsync (V1Pod body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod ReadNamespacedPod (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> ReadNamespacedPodAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod ReplaceNamespacedPod (V1Pod body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> ReplaceNamespacedPodAsync (V1Pod body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedPod (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPodAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod PatchNamespacedPod (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> PatchNamespacedPodAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// connect GET requests to attach of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodAttach (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container);
  
        /// <summary>
        /// connect GET requests to attach of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodAttachAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container);
        
        /// <summary>
        /// connect POST requests to attach of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodAttach (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container);
  
        /// <summary>
        /// connect POST requests to attach of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodAttachAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container);
        
        /// <summary>
        /// create binding of a Binding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Binding</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        V1Binding CreateNamespacedBindingBinding (V1Binding body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// create binding of a Binding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Binding</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        System.Threading.Tasks.Task<V1Binding> CreateNamespacedBindingBindingAsync (V1Binding body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// connect GET requests to exec of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodExec (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command);
  
        /// <summary>
        /// connect GET requests to exec of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodExecAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command);
        
        /// <summary>
        /// connect POST requests to exec of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodExec (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command);
  
        /// <summary>
        /// connect POST requests to exec of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodExecAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command);
        
        /// <summary>
        /// read log of the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="container">The container for which to stream logs. Defaults to only container if there is one container in the pod.</param>
        /// <param name="follow">Follow the log stream of the pod. Defaults to false.</param>
        /// <param name="previous">Return previous terminated container logs. Defaults to false.</param>
        /// <param name="sinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="sinceTime">An RFC3339 timestamp from which to show logs. If this value preceeds the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="timestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.</param>
        /// <param name="tailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime</param>
        /// <param name="limitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.</param>
        /// <returns>V1Pod</returns>
        V1Pod ReadNamespacedPodLog (string _namespace, string name, string pretty, string container, bool? follow, bool? previous, string sinceSeconds, string sinceTime, bool? timestamps, string tailLines, string limitBytes);
  
        /// <summary>
        /// read log of the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="container">The container for which to stream logs. Defaults to only container if there is one container in the pod.</param>
        /// <param name="follow">Follow the log stream of the pod. Defaults to false.</param>
        /// <param name="previous">Return previous terminated container logs. Defaults to false.</param>
        /// <param name="sinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="sinceTime">An RFC3339 timestamp from which to show logs. If this value preceeds the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="timestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.</param>
        /// <param name="tailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime</param>
        /// <param name="limitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> ReadNamespacedPodLogAsync (string _namespace, string name, string pretty, string container, bool? follow, bool? previous, string sinceSeconds, string sinceTime, bool? timestamps, string tailLines, string limitBytes);
        
        /// <summary>
        /// connect GET requests to portforward of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodPortforward (string _namespace, string name);
  
        /// <summary>
        /// connect GET requests to portforward of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodPortforwardAsync (string _namespace, string name);
        
        /// <summary>
        /// connect POST requests to portforward of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodPortforward (string _namespace, string name);
  
        /// <summary>
        /// connect POST requests to portforward of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodPortforwardAsync (string _namespace, string name);
        
        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectHeadNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectHeadNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectPutNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPutNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectDeleteNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectDeleteNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectOptionsNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectOptionsNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodProxy_1 (string _namespace, string name, string path);
  
        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodProxy_1Async (string _namespace, string name, string path);
        
        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectHeadNamespacedPodProxy_2 (string _namespace, string name, string path);
  
        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectHeadNamespacedPodProxy_2Async (string _namespace, string name, string path);
        
        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectPutNamespacedPodProxy_3 (string _namespace, string name, string path);
  
        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPutNamespacedPodProxy_3Async (string _namespace, string name, string path);
        
        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodProxy_4 (string _namespace, string name, string path);
  
        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodProxy_4Async (string _namespace, string name, string path);
        
        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectDeleteNamespacedPodProxy_5 (string _namespace, string name, string path);
  
        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectDeleteNamespacedPodProxy_5Async (string _namespace, string name, string path);
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectOptionsNamespacedPodProxy_6 (string _namespace, string name, string path);
  
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectOptionsNamespacedPodProxy_6Async (string _namespace, string name, string path);
        
        /// <summary>
        /// replace status of the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod ReplaceNamespacedPodStatus (V1Pod body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> ReplaceNamespacedPodStatusAsync (V1Pod body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        V1PodTemplateList ListNamespacedPodTemplate (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        System.Threading.Tasks.Task<V1PodTemplateList> ListNamespacedPodTemplateAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        V1PodTemplate CreateNamespacedPodTemplate (V1PodTemplate body, string _namespace, string pretty);
  
        /// <summary>
        /// create a PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        System.Threading.Tasks.Task<V1PodTemplate> CreateNamespacedPodTemplateAsync (V1PodTemplate body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        V1PodTemplate ReadNamespacedPodTemplate (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        System.Threading.Tasks.Task<V1PodTemplate> ReadNamespacedPodTemplateAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        V1PodTemplate ReplaceNamespacedPodTemplate (V1PodTemplate body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        System.Threading.Tasks.Task<V1PodTemplate> ReplaceNamespacedPodTemplateAsync (V1PodTemplate body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedPodTemplate (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPodTemplateAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        V1PodTemplate PatchNamespacedPodTemplate (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        System.Threading.Tasks.Task<V1PodTemplate> PatchNamespacedPodTemplateAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        V1ReplicationControllerList ListNamespacedReplicationController (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        System.Threading.Tasks.Task<V1ReplicationControllerList> ListNamespacedReplicationControllerAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController CreateNamespacedReplicationController (V1ReplicationController body, string _namespace, string pretty);
  
        /// <summary>
        /// create a ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> CreateNamespacedReplicationControllerAsync (V1ReplicationController body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController ReadNamespacedReplicationController (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> ReadNamespacedReplicationControllerAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController ReplaceNamespacedReplicationController (V1ReplicationController body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> ReplaceNamespacedReplicationControllerAsync (V1ReplicationController body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedReplicationController (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedReplicationControllerAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController PatchNamespacedReplicationController (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> PatchNamespacedReplicationControllerAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController ReplaceNamespacedReplicationControllerStatus (V1ReplicationController body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> ReplaceNamespacedReplicationControllerStatusAsync (V1ReplicationController body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        V1ResourceQuotaList ListNamespacedResourceQuota (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        System.Threading.Tasks.Task<V1ResourceQuotaList> ListNamespacedResourceQuotaAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota CreateNamespacedResourceQuota (V1ResourceQuota body, string _namespace, string pretty);
  
        /// <summary>
        /// create a ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> CreateNamespacedResourceQuotaAsync (V1ResourceQuota body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota ReadNamespacedResourceQuota (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> ReadNamespacedResourceQuotaAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota ReplaceNamespacedResourceQuota (V1ResourceQuota body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaAsync (V1ResourceQuota body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedResourceQuota (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedResourceQuotaAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota PatchNamespacedResourceQuota (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> PatchNamespacedResourceQuotaAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota ReplaceNamespacedResourceQuotaStatus (V1ResourceQuota body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaStatusAsync (V1ResourceQuota body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        V1SecretList ListNamespacedSecret (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        System.Threading.Tasks.Task<V1SecretList> ListNamespacedSecretAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        V1Secret CreateNamespacedSecret (V1Secret body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        System.Threading.Tasks.Task<V1Secret> CreateNamespacedSecretAsync (V1Secret body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        V1Secret ReadNamespacedSecret (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        System.Threading.Tasks.Task<V1Secret> ReadNamespacedSecretAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        V1Secret ReplaceNamespacedSecret (V1Secret body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        System.Threading.Tasks.Task<V1Secret> ReplaceNamespacedSecretAsync (V1Secret body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedSecret (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedSecretAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        V1Secret PatchNamespacedSecret (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        System.Threading.Tasks.Task<V1Secret> PatchNamespacedSecretAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        V1ServiceAccountList ListNamespacedServiceAccount (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        System.Threading.Tasks.Task<V1ServiceAccountList> ListNamespacedServiceAccountAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        V1ServiceAccount CreateNamespacedServiceAccount (V1ServiceAccount body, string _namespace, string pretty);
  
        /// <summary>
        /// create a ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        System.Threading.Tasks.Task<V1ServiceAccount> CreateNamespacedServiceAccountAsync (V1ServiceAccount body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        V1ServiceAccount ReadNamespacedServiceAccount (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        System.Threading.Tasks.Task<V1ServiceAccount> ReadNamespacedServiceAccountAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        V1ServiceAccount ReplaceNamespacedServiceAccount (V1ServiceAccount body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        System.Threading.Tasks.Task<V1ServiceAccount> ReplaceNamespacedServiceAccountAsync (V1ServiceAccount body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedServiceAccount (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedServiceAccountAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        V1ServiceAccount PatchNamespacedServiceAccount (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        System.Threading.Tasks.Task<V1ServiceAccount> PatchNamespacedServiceAccountAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        V1ServiceList ListNamespacedService (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        System.Threading.Tasks.Task<V1ServiceList> ListNamespacedServiceAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        V1Service CreateNamespacedService (V1Service body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> CreateNamespacedServiceAsync (V1Service body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        V1Service ReadNamespacedService (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> ReadNamespacedServiceAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        V1Service ReplaceNamespacedService (V1Service body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> ReplaceNamespacedServiceAsync (V1Service body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedService (string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedServiceAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        V1Service PatchNamespacedService (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> PatchNamespacedServiceAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// read the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace ReadNamespacedNamespace (string name, string pretty);
  
        /// <summary>
        /// read the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> ReadNamespacedNamespaceAsync (string name, string pretty);
        
        /// <summary>
        /// replace the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace ReplaceNamespacedNamespace (V1Namespace body, string name, string pretty);
  
        /// <summary>
        /// replace the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> ReplaceNamespacedNamespaceAsync (V1Namespace body, string name, string pretty);
        
        /// <summary>
        /// delete a Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedNamespace (V1DeleteOptions body, string name, string pretty);
  
        /// <summary>
        /// delete a Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedNamespaceAsync (V1DeleteOptions body, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace PatchNamespacedNamespace (UnversionedPatch body, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> PatchNamespacedNamespaceAsync (UnversionedPatch body, string name, string pretty);
        
        /// <summary>
        /// replace finalize of the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace ReplaceNamespacedNamespaceFinalize (V1Namespace body, string name, string pretty);
  
        /// <summary>
        /// replace finalize of the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> ReplaceNamespacedNamespaceFinalizeAsync (V1Namespace body, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace ReplaceNamespacedNamespaceStatus (V1Namespace body, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> ReplaceNamespacedNamespaceStatusAsync (V1Namespace body, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NodeList</returns>
        V1NodeList ListNamespacedNode (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NodeList</returns>
        System.Threading.Tasks.Task<V1NodeList> ListNamespacedNodeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node CreateNamespacedNode (V1Node body, string pretty);
  
        /// <summary>
        /// create a Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> CreateNamespacedNodeAsync (V1Node body, string pretty);
        
        /// <summary>
        /// read the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node ReadNamespacedNode (string name, string pretty);
  
        /// <summary>
        /// read the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> ReadNamespacedNodeAsync (string name, string pretty);
        
        /// <summary>
        /// replace the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node ReplaceNamespacedNode (V1Node body, string name, string pretty);
  
        /// <summary>
        /// replace the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> ReplaceNamespacedNodeAsync (V1Node body, string name, string pretty);
        
        /// <summary>
        /// delete a Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedNode (V1DeleteOptions body, string name, string pretty);
  
        /// <summary>
        /// delete a Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedNodeAsync (V1DeleteOptions body, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node PatchNamespacedNode (UnversionedPatch body, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> PatchNamespacedNodeAsync (UnversionedPatch body, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node ReplaceNamespacedNodeStatus (V1Node body, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> ReplaceNamespacedNodeStatusAsync (V1Node body, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        V1PersistentVolumeClaimList ListPersistentVolumeClaim (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaimList> ListPersistentVolumeClaimAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeList</returns>
        V1PersistentVolumeList ListNamespacedPersistentVolume (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeList</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeList> ListNamespacedPersistentVolumeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// create a PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume CreateNamespacedPersistentVolume (V1PersistentVolume body, string pretty);
  
        /// <summary>
        /// create a PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> CreateNamespacedPersistentVolumeAsync (V1PersistentVolume body, string pretty);
        
        /// <summary>
        /// read the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume ReadNamespacedPersistentVolume (string name, string pretty);
  
        /// <summary>
        /// read the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> ReadNamespacedPersistentVolumeAsync (string name, string pretty);
        
        /// <summary>
        /// replace the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume ReplaceNamespacedPersistentVolume (V1PersistentVolume body, string name, string pretty);
  
        /// <summary>
        /// replace the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> ReplaceNamespacedPersistentVolumeAsync (V1PersistentVolume body, string name, string pretty);
        
        /// <summary>
        /// delete a PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedPersistentVolume (V1DeleteOptions body, string name, string pretty);
  
        /// <summary>
        /// delete a PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPersistentVolumeAsync (V1DeleteOptions body, string name, string pretty);
        
        /// <summary>
        /// partially update the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume PatchNamespacedPersistentVolume (UnversionedPatch body, string name, string pretty);
  
        /// <summary>
        /// partially update the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> PatchNamespacedPersistentVolumeAsync (UnversionedPatch body, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume ReplaceNamespacedPersistentVolumeStatus (V1PersistentVolume body, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> ReplaceNamespacedPersistentVolumeStatusAsync (V1PersistentVolume body, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        V1PodList ListPod (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        System.Threading.Tasks.Task<V1PodList> ListPodAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        V1PodTemplateList ListPodTemplate (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        System.Threading.Tasks.Task<V1PodTemplateList> ListPodTemplateAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy OPTIONS requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy OPTIONS requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedPod_7 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedPod_7Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedPod_8 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedPod_8Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedPod_9 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedPod_9Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedPod_10 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedPod_10Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedPod_11 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedPod_11Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy OPTIONS requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedPod_12 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy OPTIONS requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedPod_12Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy OPTIONS requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy OPTIONS requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedService_13 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedService_13Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedService_14 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedService_14Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedService_15 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedService_15Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedService_16 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedService_16Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedService_17 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedService_17Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy OPTIONS requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedService_18 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy OPTIONS requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedService_18Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedNode (string name);
  
        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedNodeAsync (string name);
        
        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedNode (string name);
  
        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedNodeAsync (string name);
        
        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedNode (string name);
  
        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedNodeAsync (string name);
        
        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedNode (string name);
  
        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedNodeAsync (string name);
        
        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedNode (string name);
  
        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedNodeAsync (string name);
        
        /// <summary>
        /// proxy OPTIONS requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedNode (string name);
  
        /// <summary>
        /// proxy OPTIONS requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedNodeAsync (string name);
        
        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedNode_19 (string name, string path);
  
        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedNode_19Async (string name, string path);
        
        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedNode_20 (string name, string path);
  
        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedNode_20Async (string name, string path);
        
        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedNode_21 (string name, string path);
  
        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedNode_21Async (string name, string path);
        
        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedNode_22 (string name, string path);
  
        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedNode_22Async (string name, string path);
        
        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedNode_23 (string name, string path);
  
        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedNode_23Async (string name, string path);
        
        /// <summary>
        /// proxy OPTIONS requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedNode_24 (string name, string path);
  
        /// <summary>
        /// proxy OPTIONS requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedNode_24Async (string name, string path);
        
        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        V1ReplicationControllerList ListReplicationController (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        System.Threading.Tasks.Task<V1ReplicationControllerList> ListReplicationControllerAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        V1ResourceQuotaList ListResourceQuota (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        System.Threading.Tasks.Task<V1ResourceQuotaList> ListResourceQuotaAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        V1SecretList ListSecret (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        System.Threading.Tasks.Task<V1SecretList> ListSecretAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        V1ServiceAccountList ListServiceAccount (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        System.Threading.Tasks.Task<V1ServiceAccountList> ListServiceAccountAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        V1ServiceList ListService (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        System.Threading.Tasks.Task<V1ServiceList> ListServiceAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchEndpointsList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchEndpointsListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchEventList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchEventListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchLimitRangeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchLimitRangeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedNamespaceList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedNamespaceListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEndpointsList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEndpoints (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEventList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEvent (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedLimitRangeList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedLimitRange (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPersistentVolumeClaimList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPersistentVolumeClaim (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPodList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPod (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPodTemplateList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPodTemplate (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedReplicationControllerList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedReplicationController (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedResourceQuotaList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedResourceQuota (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedSecretList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedSecret (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedServiceAccountList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedServiceAccount (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedServiceList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedService (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedNamespace (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedNamespaceAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedNodeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedNodeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedNode (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedNodeAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchPersistentVolumeClaimList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchPersistentVolumeClaimListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPersistentVolumeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPersistentVolume (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchPodList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchPodListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchPodTemplateList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchPodTemplateListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchReplicationControllerList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchReplicationControllerListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchResourceQuotaList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchResourceQuotaListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchSecretList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchSecretListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchServiceAccountList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchServiceAccountListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchServiceList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchServiceListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds);
        
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VApi : IVApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public VApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="VApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        
        /// <summary>
        /// get available resources 
        /// </summary>
        /// <returns></returns>            
        public void GetAPIResources ()
        {
            
    
            var path_ = "/api/v1";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// get available resources 
        /// </summary>
        /// <returns></returns>
        public async System.Threading.Tasks.Task GetAPIResourcesAsync ()
        {
            
    
            var path_ = "/api/v1";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources: " + response.Content, response.Content);

            
            return;
        }
        
        /// <summary>
        /// list objects of kind ComponentStatus 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ComponentStatusList</returns>            
        public V1ComponentStatusList ListNamespacedComponentStatus (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/componentstatuses";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedComponentStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedComponentStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ComponentStatusList) ApiClient.Deserialize(response, typeof(V1ComponentStatusList));
        }
    
        /// <summary>
        /// list objects of kind ComponentStatus 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ComponentStatusList</returns>
        public async System.Threading.Tasks.Task<V1ComponentStatusList> ListNamespacedComponentStatusAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/componentstatuses";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedComponentStatus: " + response.Content, response.Content);

            return (V1ComponentStatusList) ApiClient.Deserialize(response, typeof(V1ComponentStatusList));
        }
        
        /// <summary>
        /// read the specified ComponentStatus 
        /// </summary>
        /// <param name="name">name of the ComponentStatus</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ComponentStatus</returns>            
        public V1ComponentStatus ReadNamespacedComponentStatus (string name, string pretty)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedComponentStatus");
            
    
            var path_ = "/api/v1/componentstatuses/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedComponentStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedComponentStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ComponentStatus) ApiClient.Deserialize(response, typeof(V1ComponentStatus));
        }
    
        /// <summary>
        /// read the specified ComponentStatus 
        /// </summary>
        /// <param name="name">name of the ComponentStatus</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ComponentStatus</returns>
        public async System.Threading.Tasks.Task<V1ComponentStatus> ReadNamespacedComponentStatusAsync (string name, string pretty)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedComponentStatus");
            
    
            var path_ = "/api/v1/componentstatuses/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedComponentStatus: " + response.Content, response.Content);

            return (V1ComponentStatus) ApiClient.Deserialize(response, typeof(V1ComponentStatus));
        }
        
        /// <summary>
        /// list or watch objects of kind Endpoints 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1EndpointsList</returns>            
        public V1EndpointsList ListEndpoints (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1EndpointsList) ApiClient.Deserialize(response, typeof(V1EndpointsList));
        }
    
        /// <summary>
        /// list or watch objects of kind Endpoints 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        public async System.Threading.Tasks.Task<V1EndpointsList> ListEndpointsAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListEndpoints: " + response.Content, response.Content);

            return (V1EndpointsList) ApiClient.Deserialize(response, typeof(V1EndpointsList));
        }
        
        /// <summary>
        /// list or watch objects of kind Event 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1EventList</returns>            
        public V1EventList ListEvent (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1EventList) ApiClient.Deserialize(response, typeof(V1EventList));
        }
    
        /// <summary>
        /// list or watch objects of kind Event 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        public async System.Threading.Tasks.Task<V1EventList> ListEventAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListEvent: " + response.Content, response.Content);

            return (V1EventList) ApiClient.Deserialize(response, typeof(V1EventList));
        }
        
        /// <summary>
        /// list or watch objects of kind LimitRange 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1LimitRangeList</returns>            
        public V1LimitRangeList ListLimitRange (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRangeList) ApiClient.Deserialize(response, typeof(V1LimitRangeList));
        }
    
        /// <summary>
        /// list or watch objects of kind LimitRange 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        public async System.Threading.Tasks.Task<V1LimitRangeList> ListLimitRangeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListLimitRange: " + response.Content, response.Content);

            return (V1LimitRangeList) ApiClient.Deserialize(response, typeof(V1LimitRangeList));
        }
        
        /// <summary>
        /// list or watch objects of kind Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1NamespaceList</returns>            
        public V1NamespaceList ListNamespacedNamespace (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1NamespaceList) ApiClient.Deserialize(response, typeof(V1NamespaceList));
        }
    
        /// <summary>
        /// list or watch objects of kind Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NamespaceList</returns>
        public async System.Threading.Tasks.Task<V1NamespaceList> ListNamespacedNamespaceAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedNamespace: " + response.Content, response.Content);

            return (V1NamespaceList) ApiClient.Deserialize(response, typeof(V1NamespaceList));
        }
        
        /// <summary>
        /// create a Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace CreateNamespacedNamespace (V1Namespace body, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// create a Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> CreateNamespacedNamespaceAsync (V1Namespace body, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedNamespace: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// create a Binding 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Binding</returns>            
        public V1Binding CreateNamespacedBinding (V1Binding body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedBinding");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedBinding");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/bindings";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBinding: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBinding: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Binding) ApiClient.Deserialize(response, typeof(V1Binding));
        }
    
        /// <summary>
        /// create a Binding 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        public async System.Threading.Tasks.Task<V1Binding> CreateNamespacedBindingAsync (V1Binding body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedBinding");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedBinding");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/bindings";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBinding: " + response.Content, response.Content);

            return (V1Binding) ApiClient.Deserialize(response, typeof(V1Binding));
        }
        
        /// <summary>
        /// list or watch objects of kind Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1EndpointsList</returns>            
        public V1EndpointsList ListNamespacedEndpoints (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1EndpointsList) ApiClient.Deserialize(response, typeof(V1EndpointsList));
        }
    
        /// <summary>
        /// list or watch objects of kind Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        public async System.Threading.Tasks.Task<V1EndpointsList> ListNamespacedEndpointsAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints: " + response.Content, response.Content);

            return (V1EndpointsList) ApiClient.Deserialize(response, typeof(V1EndpointsList));
        }
        
        /// <summary>
        /// create a Endpoints 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Endpoints</returns>            
        public V1Endpoints CreateNamespacedEndpoints (V1Endpoints body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedEndpoints");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
    
        /// <summary>
        /// create a Endpoints 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        public async System.Threading.Tasks.Task<V1Endpoints> CreateNamespacedEndpointsAsync (V1Endpoints body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedEndpoints");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEndpoints: " + response.Content, response.Content);

            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
        
        /// <summary>
        /// read the specified Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Endpoints</returns>            
        public V1Endpoints ReadNamespacedEndpoints (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
    
        /// <summary>
        /// read the specified Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        public async System.Threading.Tasks.Task<V1Endpoints> ReadNamespacedEndpointsAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEndpoints: " + response.Content, response.Content);

            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
        
        /// <summary>
        /// replace the specified Endpoints 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Endpoints</returns>            
        public V1Endpoints ReplaceNamespacedEndpoints (V1Endpoints body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedEndpoints");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
    
        /// <summary>
        /// replace the specified Endpoints 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        public async System.Threading.Tasks.Task<V1Endpoints> ReplaceNamespacedEndpointsAsync (V1Endpoints body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedEndpoints");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEndpoints: " + response.Content, response.Content);

            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
        
        /// <summary>
        /// delete a Endpoints 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedEndpoints (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedEndpoints");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Endpoints 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedEndpointsAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedEndpoints");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEndpoints: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Endpoints 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Endpoints</returns>            
        public V1Endpoints PatchNamespacedEndpoints (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedEndpoints");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
    
        /// <summary>
        /// partially update the specified Endpoints 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        public async System.Threading.Tasks.Task<V1Endpoints> PatchNamespacedEndpointsAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedEndpoints");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEndpoints: " + response.Content, response.Content);

            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
        
        /// <summary>
        /// list or watch objects of kind Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1EventList</returns>            
        public V1EventList ListNamespacedEvent (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1EventList) ApiClient.Deserialize(response, typeof(V1EventList));
        }
    
        /// <summary>
        /// list or watch objects of kind Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        public async System.Threading.Tasks.Task<V1EventList> ListNamespacedEventAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent: " + response.Content, response.Content);

            return (V1EventList) ApiClient.Deserialize(response, typeof(V1EventList));
        }
        
        /// <summary>
        /// create a Event 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Event</returns>            
        public V1Event CreateNamespacedEvent (V1Event body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedEvent");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
    
        /// <summary>
        /// create a Event 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        public async System.Threading.Tasks.Task<V1Event> CreateNamespacedEventAsync (V1Event body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedEvent");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEvent: " + response.Content, response.Content);

            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
        
        /// <summary>
        /// read the specified Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Event</returns>            
        public V1Event ReadNamespacedEvent (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
    
        /// <summary>
        /// read the specified Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        public async System.Threading.Tasks.Task<V1Event> ReadNamespacedEventAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEvent: " + response.Content, response.Content);

            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
        
        /// <summary>
        /// replace the specified Event 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Event</returns>            
        public V1Event ReplaceNamespacedEvent (V1Event body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedEvent");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
    
        /// <summary>
        /// replace the specified Event 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        public async System.Threading.Tasks.Task<V1Event> ReplaceNamespacedEventAsync (V1Event body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedEvent");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEvent: " + response.Content, response.Content);

            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
        
        /// <summary>
        /// delete a Event 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedEvent (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedEvent");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Event 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedEventAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedEvent");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEvent: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Event 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Event</returns>            
        public V1Event PatchNamespacedEvent (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedEvent");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
    
        /// <summary>
        /// partially update the specified Event 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        public async System.Threading.Tasks.Task<V1Event> PatchNamespacedEventAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedEvent");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEvent: " + response.Content, response.Content);

            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
        
        /// <summary>
        /// list or watch objects of kind LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1LimitRangeList</returns>            
        public V1LimitRangeList ListNamespacedLimitRange (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRangeList) ApiClient.Deserialize(response, typeof(V1LimitRangeList));
        }
    
        /// <summary>
        /// list or watch objects of kind LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        public async System.Threading.Tasks.Task<V1LimitRangeList> ListNamespacedLimitRangeAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRangeList) ApiClient.Deserialize(response, typeof(V1LimitRangeList));
        }
        
        /// <summary>
        /// create a LimitRange 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1LimitRange</returns>            
        public V1LimitRange CreateNamespacedLimitRange (V1LimitRange body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedLimitRange");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
    
        /// <summary>
        /// create a LimitRange 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        public async System.Threading.Tasks.Task<V1LimitRange> CreateNamespacedLimitRangeAsync (V1LimitRange body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedLimitRange");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
        
        /// <summary>
        /// read the specified LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1LimitRange</returns>            
        public V1LimitRange ReadNamespacedLimitRange (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
    
        /// <summary>
        /// read the specified LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        public async System.Threading.Tasks.Task<V1LimitRange> ReadNamespacedLimitRangeAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
        
        /// <summary>
        /// replace the specified LimitRange 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1LimitRange</returns>            
        public V1LimitRange ReplaceNamespacedLimitRange (V1LimitRange body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedLimitRange");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
    
        /// <summary>
        /// replace the specified LimitRange 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        public async System.Threading.Tasks.Task<V1LimitRange> ReplaceNamespacedLimitRangeAsync (V1LimitRange body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedLimitRange");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
        
        /// <summary>
        /// delete a LimitRange 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedLimitRange (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedLimitRange");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a LimitRange 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedLimitRangeAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedLimitRange");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedLimitRange: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified LimitRange 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1LimitRange</returns>            
        public V1LimitRange PatchNamespacedLimitRange (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedLimitRange");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
    
        /// <summary>
        /// partially update the specified LimitRange 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        public async System.Threading.Tasks.Task<V1LimitRange> PatchNamespacedLimitRangeAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedLimitRange");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
        
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PersistentVolumeClaimList</returns>            
        public V1PersistentVolumeClaimList ListNamespacedPersistentVolumeClaim (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaimList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaimList));
        }
    
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaimList> ListNamespacedPersistentVolumeClaimAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaimList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaimList));
        }
        
        /// <summary>
        /// create a PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim CreateNamespacedPersistentVolumeClaim (V1PersistentVolumeClaim body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPersistentVolumeClaim");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// create a PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> CreateNamespacedPersistentVolumeClaimAsync (V1PersistentVolumeClaim body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPersistentVolumeClaim");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// read the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim ReadNamespacedPersistentVolumeClaim (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// read the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReadNamespacedPersistentVolumeClaimAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// replace the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaim (V1PersistentVolumeClaim body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeClaim");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// replace the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimAsync (V1PersistentVolumeClaim body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeClaim");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// delete a PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedPersistentVolumeClaim (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPersistentVolumeClaim");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPersistentVolumeClaimAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPersistentVolumeClaim");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim PatchNamespacedPersistentVolumeClaim (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPersistentVolumeClaim");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// partially update the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> PatchNamespacedPersistentVolumeClaimAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPersistentVolumeClaim");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// replace status of the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaimStatus (V1PersistentVolumeClaim body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaimStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaimStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// replace status of the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimStatusAsync (V1PersistentVolumeClaim body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaimStatus: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// list or watch objects of kind Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PodList</returns>            
        public V1PodList ListNamespacedPod (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodList) ApiClient.Deserialize(response, typeof(V1PodList));
        }
    
        /// <summary>
        /// list or watch objects of kind Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        public async System.Threading.Tasks.Task<V1PodList> ListNamespacedPodAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod: " + response.Content, response.Content);

            return (V1PodList) ApiClient.Deserialize(response, typeof(V1PodList));
        }
        
        /// <summary>
        /// create a Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod CreateNamespacedPod (V1Pod body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPod");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// create a Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> CreateNamespacedPodAsync (V1Pod body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPod");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPod: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// read the specified Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod ReadNamespacedPod (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// read the specified Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> ReadNamespacedPodAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPod: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// replace the specified Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod ReplaceNamespacedPod (V1Pod body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPod");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// replace the specified Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> ReplaceNamespacedPodAsync (V1Pod body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPod");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPod: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// delete a Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedPod (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPod");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPodAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPod");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPod: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod PatchNamespacedPod (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPod");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// partially update the specified Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> PatchNamespacedPodAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPod");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPod: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// connect GET requests to attach of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param> 
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param> 
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param> 
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param> 
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodAttach (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodAttach");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodAttach");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/attach";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodAttach: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodAttach: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to attach of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodAttachAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodAttach");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodAttach");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/attach";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodAttach: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to attach of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param> 
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param> 
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param> 
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param> 
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodAttach (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodAttach");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodAttach");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/attach";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodAttach: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodAttach: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to attach of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodAttachAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodAttach");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodAttach");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/attach";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodAttach: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// create binding of a Binding 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Binding</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Binding</returns>            
        public V1Binding CreateNamespacedBindingBinding (V1Binding body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedBindingBinding");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedBindingBinding");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling CreateNamespacedBindingBinding");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/binding";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBindingBinding: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBindingBinding: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Binding) ApiClient.Deserialize(response, typeof(V1Binding));
        }
    
        /// <summary>
        /// create binding of a Binding 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Binding</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        public async System.Threading.Tasks.Task<V1Binding> CreateNamespacedBindingBindingAsync (V1Binding body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedBindingBinding");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedBindingBinding");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling CreateNamespacedBindingBinding");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/binding";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBindingBinding: " + response.Content, response.Content);

            return (V1Binding) ApiClient.Deserialize(response, typeof(V1Binding));
        }
        
        /// <summary>
        /// connect GET requests to exec of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param> 
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param> 
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param> 
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param> 
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param> 
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodExec (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodExec");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodExec");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/exec";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (command != null) queryParams.Add("command", ApiClient.ParameterToString(command)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodExec: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodExec: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to exec of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodExecAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodExec");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodExec");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/exec";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (command != null) queryParams.Add("command", ApiClient.ParameterToString(command)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodExec: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to exec of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param> 
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param> 
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param> 
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param> 
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param> 
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodExec (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodExec");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodExec");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/exec";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (command != null) queryParams.Add("command", ApiClient.ParameterToString(command)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodExec: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodExec: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to exec of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodExecAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodExec");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodExec");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/exec";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (command != null) queryParams.Add("command", ApiClient.ParameterToString(command)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodExec: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// read log of the specified Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="container">The container for which to stream logs. Defaults to only container if there is one container in the pod.</param> 
        /// <param name="follow">Follow the log stream of the pod. Defaults to false.</param> 
        /// <param name="previous">Return previous terminated container logs. Defaults to false.</param> 
        /// <param name="sinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param> 
        /// <param name="sinceTime">An RFC3339 timestamp from which to show logs. If this value preceeds the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param> 
        /// <param name="timestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.</param> 
        /// <param name="tailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime</param> 
        /// <param name="limitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod ReadNamespacedPodLog (string _namespace, string name, string pretty, string container, bool? follow, bool? previous, string sinceSeconds, string sinceTime, bool? timestamps, string tailLines, string limitBytes)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPodLog");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPodLog");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/log";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (follow != null) queryParams.Add("follow", ApiClient.ParameterToString(follow)); // query parameter
            if (previous != null) queryParams.Add("previous", ApiClient.ParameterToString(previous)); // query parameter
            if (sinceSeconds != null) queryParams.Add("sinceSeconds", ApiClient.ParameterToString(sinceSeconds)); // query parameter
            if (sinceTime != null) queryParams.Add("sinceTime", ApiClient.ParameterToString(sinceTime)); // query parameter
            if (timestamps != null) queryParams.Add("timestamps", ApiClient.ParameterToString(timestamps)); // query parameter
            if (tailLines != null) queryParams.Add("tailLines", ApiClient.ParameterToString(tailLines)); // query parameter
            if (limitBytes != null) queryParams.Add("limitBytes", ApiClient.ParameterToString(limitBytes)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodLog: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodLog: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// read log of the specified Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="container">The container for which to stream logs. Defaults to only container if there is one container in the pod.</param>
        /// <param name="follow">Follow the log stream of the pod. Defaults to false.</param>
        /// <param name="previous">Return previous terminated container logs. Defaults to false.</param>
        /// <param name="sinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="sinceTime">An RFC3339 timestamp from which to show logs. If this value preceeds the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="timestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.</param>
        /// <param name="tailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime</param>
        /// <param name="limitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> ReadNamespacedPodLogAsync (string _namespace, string name, string pretty, string container, bool? follow, bool? previous, string sinceSeconds, string sinceTime, bool? timestamps, string tailLines, string limitBytes)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPodLog");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPodLog");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/log";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (follow != null) queryParams.Add("follow", ApiClient.ParameterToString(follow)); // query parameter
            if (previous != null) queryParams.Add("previous", ApiClient.ParameterToString(previous)); // query parameter
            if (sinceSeconds != null) queryParams.Add("sinceSeconds", ApiClient.ParameterToString(sinceSeconds)); // query parameter
            if (sinceTime != null) queryParams.Add("sinceTime", ApiClient.ParameterToString(sinceTime)); // query parameter
            if (timestamps != null) queryParams.Add("timestamps", ApiClient.ParameterToString(timestamps)); // query parameter
            if (tailLines != null) queryParams.Add("tailLines", ApiClient.ParameterToString(tailLines)); // query parameter
            if (limitBytes != null) queryParams.Add("limitBytes", ApiClient.ParameterToString(limitBytes)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodLog: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// connect GET requests to portforward of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodPortforward (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodPortforward");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodPortforward");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/portforward";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodPortforward: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodPortforward: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to portforward of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodPortforwardAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodPortforward");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodPortforward");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/portforward";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodPortforward: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to portforward of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodPortforward (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodPortforward");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodPortforward");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/portforward";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodPortforward: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodPortforward: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to portforward of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodPortforwardAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodPortforward");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodPortforward");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/portforward";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodPortforward: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect GET requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect HEAD requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectHeadNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect HEAD requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectHeadNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect PUT requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPutNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect PUT requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPutNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect DELETE requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectDeleteNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect DELETE requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectDeleteNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectOptionsNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectOptionsNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect GET requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodProxy_1 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodProxy_1");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodProxy_1");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy_1: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy_1: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodProxy_1Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodProxy_1");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodProxy_1");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy_1: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect HEAD requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectHeadNamespacedPodProxy_2 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedPodProxy_2");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedPodProxy_2");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy_2: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy_2: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect HEAD requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectHeadNamespacedPodProxy_2Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedPodProxy_2");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedPodProxy_2");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy_2: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect PUT requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPutNamespacedPodProxy_3 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedPodProxy_3");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedPodProxy_3");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy_3: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy_3: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect PUT requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPutNamespacedPodProxy_3Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedPodProxy_3");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedPodProxy_3");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy_3: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodProxy_4 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodProxy_4");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodProxy_4");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy_4: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy_4: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodProxy_4Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodProxy_4");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodProxy_4");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy_4: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect DELETE requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectDeleteNamespacedPodProxy_5 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedPodProxy_5");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedPodProxy_5");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy_5: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy_5: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect DELETE requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectDeleteNamespacedPodProxy_5Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedPodProxy_5");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedPodProxy_5");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy_5: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectOptionsNamespacedPodProxy_6 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedPodProxy_6");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedPodProxy_6");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy_6: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy_6: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectOptionsNamespacedPodProxy_6Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedPodProxy_6");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedPodProxy_6");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy_6: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// replace status of the specified Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod ReplaceNamespacedPodStatus (V1Pod body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPodStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPodStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPodStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// replace status of the specified Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> ReplaceNamespacedPodStatusAsync (V1Pod body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPodStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPodStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPodStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodStatus: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// list or watch objects of kind PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PodTemplateList</returns>            
        public V1PodTemplateList ListNamespacedPodTemplate (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplateList) ApiClient.Deserialize(response, typeof(V1PodTemplateList));
        }
    
        /// <summary>
        /// list or watch objects of kind PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        public async System.Threading.Tasks.Task<V1PodTemplateList> ListNamespacedPodTemplateAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplateList) ApiClient.Deserialize(response, typeof(V1PodTemplateList));
        }
        
        /// <summary>
        /// create a PodTemplate 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PodTemplate</returns>            
        public V1PodTemplate CreateNamespacedPodTemplate (V1PodTemplate body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPodTemplate");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
    
        /// <summary>
        /// create a PodTemplate 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        public async System.Threading.Tasks.Task<V1PodTemplate> CreateNamespacedPodTemplateAsync (V1PodTemplate body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPodTemplate");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
        
        /// <summary>
        /// read the specified PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PodTemplate</returns>            
        public V1PodTemplate ReadNamespacedPodTemplate (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
    
        /// <summary>
        /// read the specified PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        public async System.Threading.Tasks.Task<V1PodTemplate> ReadNamespacedPodTemplateAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
        
        /// <summary>
        /// replace the specified PodTemplate 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PodTemplate</returns>            
        public V1PodTemplate ReplaceNamespacedPodTemplate (V1PodTemplate body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPodTemplate");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
    
        /// <summary>
        /// replace the specified PodTemplate 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        public async System.Threading.Tasks.Task<V1PodTemplate> ReplaceNamespacedPodTemplateAsync (V1PodTemplate body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPodTemplate");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
        
        /// <summary>
        /// delete a PodTemplate 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedPodTemplate (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPodTemplate");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a PodTemplate 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPodTemplateAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPodTemplate");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPodTemplate: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified PodTemplate 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PodTemplate</returns>            
        public V1PodTemplate PatchNamespacedPodTemplate (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPodTemplate");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
    
        /// <summary>
        /// partially update the specified PodTemplate 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        public async System.Threading.Tasks.Task<V1PodTemplate> PatchNamespacedPodTemplateAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPodTemplate");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
        
        /// <summary>
        /// list or watch objects of kind ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ReplicationControllerList</returns>            
        public V1ReplicationControllerList ListNamespacedReplicationController (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationControllerList) ApiClient.Deserialize(response, typeof(V1ReplicationControllerList));
        }
    
        /// <summary>
        /// list or watch objects of kind ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        public async System.Threading.Tasks.Task<V1ReplicationControllerList> ListNamespacedReplicationControllerAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationControllerList) ApiClient.Deserialize(response, typeof(V1ReplicationControllerList));
        }
        
        /// <summary>
        /// create a ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController CreateNamespacedReplicationController (V1ReplicationController body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedReplicationController");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// create a ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> CreateNamespacedReplicationControllerAsync (V1ReplicationController body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedReplicationController");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// read the specified ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController ReadNamespacedReplicationController (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// read the specified ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> ReadNamespacedReplicationControllerAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// replace the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController ReplaceNamespacedReplicationController (V1ReplicationController body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedReplicationController");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// replace the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> ReplaceNamespacedReplicationControllerAsync (V1ReplicationController body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedReplicationController");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// delete a ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedReplicationController (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedReplicationController");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedReplicationControllerAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedReplicationController");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedReplicationController: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController PatchNamespacedReplicationController (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedReplicationController");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// partially update the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> PatchNamespacedReplicationControllerAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedReplicationController");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// replace status of the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController ReplaceNamespacedReplicationControllerStatus (V1ReplicationController body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedReplicationControllerStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedReplicationControllerStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedReplicationControllerStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationControllerStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationControllerStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// replace status of the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> ReplaceNamespacedReplicationControllerStatusAsync (V1ReplicationController body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedReplicationControllerStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedReplicationControllerStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedReplicationControllerStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationControllerStatus: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// list or watch objects of kind ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ResourceQuotaList</returns>            
        public V1ResourceQuotaList ListNamespacedResourceQuota (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuotaList) ApiClient.Deserialize(response, typeof(V1ResourceQuotaList));
        }
    
        /// <summary>
        /// list or watch objects of kind ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuotaList> ListNamespacedResourceQuotaAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuotaList) ApiClient.Deserialize(response, typeof(V1ResourceQuotaList));
        }
        
        /// <summary>
        /// create a ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota CreateNamespacedResourceQuota (V1ResourceQuota body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedResourceQuota");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// create a ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> CreateNamespacedResourceQuotaAsync (V1ResourceQuota body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedResourceQuota");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// read the specified ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota ReadNamespacedResourceQuota (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// read the specified ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> ReadNamespacedResourceQuotaAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// replace the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota ReplaceNamespacedResourceQuota (V1ResourceQuota body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedResourceQuota");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// replace the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaAsync (V1ResourceQuota body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedResourceQuota");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// delete a ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedResourceQuota (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedResourceQuota");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedResourceQuotaAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedResourceQuota");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedResourceQuota: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota PatchNamespacedResourceQuota (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedResourceQuota");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// partially update the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> PatchNamespacedResourceQuotaAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedResourceQuota");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// replace status of the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota ReplaceNamespacedResourceQuotaStatus (V1ResourceQuota body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedResourceQuotaStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedResourceQuotaStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedResourceQuotaStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuotaStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuotaStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// replace status of the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaStatusAsync (V1ResourceQuota body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedResourceQuotaStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedResourceQuotaStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedResourceQuotaStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuotaStatus: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// list or watch objects of kind Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1SecretList</returns>            
        public V1SecretList ListNamespacedSecret (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1SecretList) ApiClient.Deserialize(response, typeof(V1SecretList));
        }
    
        /// <summary>
        /// list or watch objects of kind Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        public async System.Threading.Tasks.Task<V1SecretList> ListNamespacedSecretAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret: " + response.Content, response.Content);

            return (V1SecretList) ApiClient.Deserialize(response, typeof(V1SecretList));
        }
        
        /// <summary>
        /// create a Secret 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Secret</returns>            
        public V1Secret CreateNamespacedSecret (V1Secret body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedSecret");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
    
        /// <summary>
        /// create a Secret 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        public async System.Threading.Tasks.Task<V1Secret> CreateNamespacedSecretAsync (V1Secret body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedSecret");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedSecret: " + response.Content, response.Content);

            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
        
        /// <summary>
        /// read the specified Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Secret</returns>            
        public V1Secret ReadNamespacedSecret (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
    
        /// <summary>
        /// read the specified Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        public async System.Threading.Tasks.Task<V1Secret> ReadNamespacedSecretAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedSecret: " + response.Content, response.Content);

            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
        
        /// <summary>
        /// replace the specified Secret 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Secret</returns>            
        public V1Secret ReplaceNamespacedSecret (V1Secret body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedSecret");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
    
        /// <summary>
        /// replace the specified Secret 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        public async System.Threading.Tasks.Task<V1Secret> ReplaceNamespacedSecretAsync (V1Secret body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedSecret");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedSecret: " + response.Content, response.Content);

            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
        
        /// <summary>
        /// delete a Secret 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedSecret (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedSecret");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Secret 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedSecretAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedSecret");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedSecret: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Secret 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Secret</returns>            
        public V1Secret PatchNamespacedSecret (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedSecret");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
    
        /// <summary>
        /// partially update the specified Secret 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        public async System.Threading.Tasks.Task<V1Secret> PatchNamespacedSecretAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedSecret");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedSecret: " + response.Content, response.Content);

            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
        
        /// <summary>
        /// list or watch objects of kind ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ServiceAccountList</returns>            
        public V1ServiceAccountList ListNamespacedServiceAccount (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccountList) ApiClient.Deserialize(response, typeof(V1ServiceAccountList));
        }
    
        /// <summary>
        /// list or watch objects of kind ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccountList> ListNamespacedServiceAccountAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccountList) ApiClient.Deserialize(response, typeof(V1ServiceAccountList));
        }
        
        /// <summary>
        /// create a ServiceAccount 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ServiceAccount</returns>            
        public V1ServiceAccount CreateNamespacedServiceAccount (V1ServiceAccount body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedServiceAccount");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
    
        /// <summary>
        /// create a ServiceAccount 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccount> CreateNamespacedServiceAccountAsync (V1ServiceAccount body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedServiceAccount");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
        
        /// <summary>
        /// read the specified ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ServiceAccount</returns>            
        public V1ServiceAccount ReadNamespacedServiceAccount (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
    
        /// <summary>
        /// read the specified ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccount> ReadNamespacedServiceAccountAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
        
        /// <summary>
        /// replace the specified ServiceAccount 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ServiceAccount</returns>            
        public V1ServiceAccount ReplaceNamespacedServiceAccount (V1ServiceAccount body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedServiceAccount");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
    
        /// <summary>
        /// replace the specified ServiceAccount 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccount> ReplaceNamespacedServiceAccountAsync (V1ServiceAccount body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedServiceAccount");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
        
        /// <summary>
        /// delete a ServiceAccount 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedServiceAccount (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedServiceAccount");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a ServiceAccount 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedServiceAccountAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedServiceAccount");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedServiceAccount: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified ServiceAccount 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ServiceAccount</returns>            
        public V1ServiceAccount PatchNamespacedServiceAccount (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedServiceAccount");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
    
        /// <summary>
        /// partially update the specified ServiceAccount 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccount> PatchNamespacedServiceAccountAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedServiceAccount");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
        
        /// <summary>
        /// list or watch objects of kind Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ServiceList</returns>            
        public V1ServiceList ListNamespacedService (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceList) ApiClient.Deserialize(response, typeof(V1ServiceList));
        }
    
        /// <summary>
        /// list or watch objects of kind Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        public async System.Threading.Tasks.Task<V1ServiceList> ListNamespacedServiceAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService: " + response.Content, response.Content);

            return (V1ServiceList) ApiClient.Deserialize(response, typeof(V1ServiceList));
        }
        
        /// <summary>
        /// create a Service 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Service</returns>            
        public V1Service CreateNamespacedService (V1Service body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedService");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// create a Service 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> CreateNamespacedServiceAsync (V1Service body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedService");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedService: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// read the specified Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Service</returns>            
        public V1Service ReadNamespacedService (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// read the specified Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> ReadNamespacedServiceAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedService: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// replace the specified Service 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Service</returns>            
        public V1Service ReplaceNamespacedService (V1Service body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedService");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// replace the specified Service 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> ReplaceNamespacedServiceAsync (V1Service body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedService");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedService: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// delete a Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedService (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedServiceAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedService: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Service 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Service</returns>            
        public V1Service PatchNamespacedService (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedService");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// partially update the specified Service 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> PatchNamespacedServiceAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedService");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedService: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// read the specified Namespace 
        /// </summary>
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace ReadNamespacedNamespace (string name, string pretty)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// read the specified Namespace 
        /// </summary>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> ReadNamespacedNamespaceAsync (string name, string pretty)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedNamespace: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// replace the specified Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace ReplaceNamespacedNamespace (V1Namespace body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNamespace");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// replace the specified Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> ReplaceNamespacedNamespaceAsync (V1Namespace body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNamespace");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespace: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// delete a Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedNamespace (V1DeleteOptions body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedNamespace");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedNamespaceAsync (V1DeleteOptions body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedNamespace");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedNamespace: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace PatchNamespacedNamespace (UnversionedPatch body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedNamespace");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// partially update the specified Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> PatchNamespacedNamespaceAsync (UnversionedPatch body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedNamespace");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedNamespace: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// replace finalize of the specified Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace ReplaceNamespacedNamespaceFinalize (V1Namespace body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNamespaceFinalize");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNamespaceFinalize");
            
    
            var path_ = "/api/v1/namespaces/{name}/finalize";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespaceFinalize: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespaceFinalize: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// replace finalize of the specified Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> ReplaceNamespacedNamespaceFinalizeAsync (V1Namespace body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNamespaceFinalize");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNamespaceFinalize");
            
    
            var path_ = "/api/v1/namespaces/{name}/finalize";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespaceFinalize: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// replace status of the specified Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace ReplaceNamespacedNamespaceStatus (V1Namespace body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNamespaceStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNamespaceStatus");
            
    
            var path_ = "/api/v1/namespaces/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespaceStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespaceStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// replace status of the specified Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> ReplaceNamespacedNamespaceStatusAsync (V1Namespace body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNamespaceStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNamespaceStatus");
            
    
            var path_ = "/api/v1/namespaces/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNamespaceStatus: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// list or watch objects of kind Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1NodeList</returns>            
        public V1NodeList ListNamespacedNode (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1NodeList) ApiClient.Deserialize(response, typeof(V1NodeList));
        }
    
        /// <summary>
        /// list or watch objects of kind Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NodeList</returns>
        public async System.Threading.Tasks.Task<V1NodeList> ListNamespacedNodeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedNode: " + response.Content, response.Content);

            return (V1NodeList) ApiClient.Deserialize(response, typeof(V1NodeList));
        }
        
        /// <summary>
        /// create a Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node CreateNamespacedNode (V1Node body, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedNode");
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// create a Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> CreateNamespacedNodeAsync (V1Node body, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedNode");
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedNode: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// read the specified Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node ReadNamespacedNode (string name, string pretty)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// read the specified Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> ReadNamespacedNodeAsync (string name, string pretty)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedNode: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// replace the specified Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node ReplaceNamespacedNode (V1Node body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNode");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// replace the specified Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> ReplaceNamespacedNodeAsync (V1Node body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNode");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNode: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// delete a Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedNode (V1DeleteOptions body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedNode");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedNodeAsync (V1DeleteOptions body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedNode");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedNode: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node PatchNamespacedNode (UnversionedPatch body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedNode");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// partially update the specified Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> PatchNamespacedNodeAsync (UnversionedPatch body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedNode");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedNode: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// replace status of the specified Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node ReplaceNamespacedNodeStatus (V1Node body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNodeStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNodeStatus");
            
    
            var path_ = "/api/v1/nodes/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNodeStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNodeStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// replace status of the specified Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> ReplaceNamespacedNodeStatusAsync (V1Node body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedNodeStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedNodeStatus");
            
    
            var path_ = "/api/v1/nodes/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedNodeStatus: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PersistentVolumeClaimList</returns>            
        public V1PersistentVolumeClaimList ListPersistentVolumeClaim (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaimList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaimList));
        }
    
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaimList> ListPersistentVolumeClaimAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaimList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaimList));
        }
        
        /// <summary>
        /// list or watch objects of kind PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PersistentVolumeList</returns>            
        public V1PersistentVolumeList ListNamespacedPersistentVolume (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeList));
        }
    
        /// <summary>
        /// list or watch objects of kind PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeList</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeList> ListNamespacedPersistentVolumeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolumeList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeList));
        }
        
        /// <summary>
        /// create a PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume CreateNamespacedPersistentVolume (V1PersistentVolume body, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// create a PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> CreateNamespacedPersistentVolumeAsync (V1PersistentVolume body, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// read the specified PersistentVolume 
        /// </summary>
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume ReadNamespacedPersistentVolume (string name, string pretty)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// read the specified PersistentVolume 
        /// </summary>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> ReadNamespacedPersistentVolumeAsync (string name, string pretty)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// replace the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume ReplaceNamespacedPersistentVolume (V1PersistentVolume body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolume");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// replace the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> ReplaceNamespacedPersistentVolumeAsync (V1PersistentVolume body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolume");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// delete a PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedPersistentVolume (V1DeleteOptions body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPersistentVolume");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPersistentVolumeAsync (V1DeleteOptions body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPersistentVolume");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolume: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume PatchNamespacedPersistentVolume (UnversionedPatch body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPersistentVolume");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// partially update the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> PatchNamespacedPersistentVolumeAsync (UnversionedPatch body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPersistentVolume");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// replace status of the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume ReplaceNamespacedPersistentVolumeStatus (V1PersistentVolume body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeStatus");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// replace status of the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> ReplaceNamespacedPersistentVolumeStatusAsync (V1PersistentVolume body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeStatus");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeStatus: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// list or watch objects of kind Pod 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PodList</returns>            
        public V1PodList ListPod (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodList) ApiClient.Deserialize(response, typeof(V1PodList));
        }
    
        /// <summary>
        /// list or watch objects of kind Pod 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        public async System.Threading.Tasks.Task<V1PodList> ListPodAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPod: " + response.Content, response.Content);

            return (V1PodList) ApiClient.Deserialize(response, typeof(V1PodList));
        }
        
        /// <summary>
        /// list or watch objects of kind PodTemplate 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PodTemplateList</returns>            
        public V1PodTemplateList ListPodTemplate (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplateList) ApiClient.Deserialize(response, typeof(V1PodTemplateList));
        }
    
        /// <summary>
        /// list or watch objects of kind PodTemplate 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        public async System.Threading.Tasks.Task<V1PodTemplateList> ListPodTemplateAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplateList) ApiClient.Deserialize(response, typeof(V1PodTemplateList));
        }
        
        /// <summary>
        /// proxy GET requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedPod_7 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedPod_7");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedPod_7");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedPod_7");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod_7: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod_7: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedPod_7Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedPod_7");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedPod_7");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedPod_7");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod_7: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedPod_8 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedPod_8");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedPod_8");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedPod_8");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod_8: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod_8: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedPod_8Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedPod_8");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedPod_8");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedPod_8");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod_8: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedPod_9 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedPod_9");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedPod_9");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedPod_9");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod_9: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod_9: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedPod_9Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedPod_9");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedPod_9");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedPod_9");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod_9: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedPod_10 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedPod_10");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedPod_10");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedPod_10");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod_10: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod_10: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedPod_10Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedPod_10");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedPod_10");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedPod_10");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod_10: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedPod_11 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedPod_11");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedPod_11");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedPod_11");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod_11: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod_11: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedPod_11Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedPod_11");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedPod_11");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedPod_11");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod_11: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedPod_12 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedPod_12");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedPod_12");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedPod_12");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod_12: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod_12: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedPod_12Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedPod_12");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedPod_12");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedPod_12");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod_12: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedService_13 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedService_13");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedService_13");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedService_13");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService_13: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService_13: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedService_13Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedService_13");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedService_13");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedService_13");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService_13: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedService_14 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedService_14");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedService_14");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedService_14");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService_14: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService_14: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedService_14Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedService_14");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedService_14");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedService_14");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService_14: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedService_15 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedService_15");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedService_15");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedService_15");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService_15: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService_15: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedService_15Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedService_15");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedService_15");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedService_15");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService_15: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedService_16 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedService_16");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedService_16");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedService_16");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService_16: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService_16: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedService_16Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedService_16");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedService_16");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedService_16");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService_16: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedService_17 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedService_17");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedService_17");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedService_17");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService_17: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService_17: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedService_17Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedService_17");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedService_17");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedService_17");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService_17: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedService_18 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedService_18");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedService_18");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedService_18");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService_18: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService_18: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedService_18Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedService_18");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedService_18");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedService_18");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService_18: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedNode_19 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedNode_19");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedNode_19");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedNode_19: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedNode_19: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedNode_19Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedNode_19");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedNode_19");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedNode_19: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedNode_20 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedNode_20");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedNode_20");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedNode_20: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedNode_20: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedNode_20Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedNode_20");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedNode_20");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedNode_20: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedNode_21 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedNode_21");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedNode_21");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedNode_21: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedNode_21: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedNode_21Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedNode_21");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedNode_21");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedNode_21: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedNode_22 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedNode_22");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedNode_22");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedNode_22: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedNode_22: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedNode_22Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedNode_22");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedNode_22");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedNode_22: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedNode_23 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedNode_23");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedNode_23");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedNode_23: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedNode_23: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedNode_23Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedNode_23");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedNode_23");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedNode_23: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedNode_24 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedNode_24");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedNode_24");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedNode_24: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedNode_24: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedNode_24Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedNode_24");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedNode_24");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path:*}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedNode_24: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// list or watch objects of kind ReplicationController 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ReplicationControllerList</returns>            
        public V1ReplicationControllerList ListReplicationController (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationControllerList) ApiClient.Deserialize(response, typeof(V1ReplicationControllerList));
        }
    
        /// <summary>
        /// list or watch objects of kind ReplicationController 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        public async System.Threading.Tasks.Task<V1ReplicationControllerList> ListReplicationControllerAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListReplicationController: " + response.Content, response.Content);

            return (V1ReplicationControllerList) ApiClient.Deserialize(response, typeof(V1ReplicationControllerList));
        }
        
        /// <summary>
        /// list or watch objects of kind ResourceQuota 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ResourceQuotaList</returns>            
        public V1ResourceQuotaList ListResourceQuota (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuotaList) ApiClient.Deserialize(response, typeof(V1ResourceQuotaList));
        }
    
        /// <summary>
        /// list or watch objects of kind ResourceQuota 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuotaList> ListResourceQuotaAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuotaList) ApiClient.Deserialize(response, typeof(V1ResourceQuotaList));
        }
        
        /// <summary>
        /// list or watch objects of kind Secret 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1SecretList</returns>            
        public V1SecretList ListSecret (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1SecretList) ApiClient.Deserialize(response, typeof(V1SecretList));
        }
    
        /// <summary>
        /// list or watch objects of kind Secret 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        public async System.Threading.Tasks.Task<V1SecretList> ListSecretAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListSecret: " + response.Content, response.Content);

            return (V1SecretList) ApiClient.Deserialize(response, typeof(V1SecretList));
        }
        
        /// <summary>
        /// list or watch objects of kind ServiceAccount 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ServiceAccountList</returns>            
        public V1ServiceAccountList ListServiceAccount (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccountList) ApiClient.Deserialize(response, typeof(V1ServiceAccountList));
        }
    
        /// <summary>
        /// list or watch objects of kind ServiceAccount 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccountList> ListServiceAccountAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccountList) ApiClient.Deserialize(response, typeof(V1ServiceAccountList));
        }
        
        /// <summary>
        /// list or watch objects of kind Service 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ServiceList</returns>            
        public V1ServiceList ListService (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceList) ApiClient.Deserialize(response, typeof(V1ServiceList));
        }
    
        /// <summary>
        /// list or watch objects of kind Service 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        public async System.Threading.Tasks.Task<V1ServiceList> ListServiceAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListService: " + response.Content, response.Content);

            return (V1ServiceList) ApiClient.Deserialize(response, typeof(V1ServiceList));
        }
        
        /// <summary>
        /// watch individual changes to a list of Endpoints 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchEndpointsList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchEndpointsList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchEndpointsList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Endpoints 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchEndpointsListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchEndpointsList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Event 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchEventList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchEventList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchEventList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Event 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchEventListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchEventList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of LimitRange 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchLimitRangeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchLimitRangeList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchLimitRangeList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of LimitRange 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchLimitRangeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchLimitRangeList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedNamespaceList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNamespaceList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNamespaceList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedNamespaceListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNamespaceList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEndpointsList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEndpointsList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEndpointsList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEndpoints (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedEndpoints");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedEndpoints");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpoints: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEventList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEventList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEventList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEvent (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedEvent");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedEvent");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEvent: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedLimitRangeList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedLimitRangeList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedLimitRangeList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedLimitRange (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedLimitRange");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedLimitRange");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRange: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPersistentVolumeClaimList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPersistentVolumeClaimList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPersistentVolumeClaimList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPersistentVolumeClaim (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPodList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPod (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPod");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPod");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPod: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPodTemplateList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodTemplateList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodTemplateList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPodTemplate (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplate: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedReplicationControllerList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedReplicationControllerList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedReplicationControllerList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedReplicationController (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedReplicationController");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedReplicationController");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationController: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedResourceQuotaList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedResourceQuotaList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedResourceQuotaList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedResourceQuota (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuota: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedSecretList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedSecretList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedSecretList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedSecret (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedSecret");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedSecret");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecret: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedServiceAccountList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceAccountList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceAccountList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedServiceAccount (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccount: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedServiceList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedService (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedService");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedService");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedService: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Namespace 
        /// </summary>
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedNamespace (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedNamespace");
            
    
            var path_ = "/api/v1/watch/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Namespace 
        /// </summary>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedNamespaceAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedNamespace");
            
    
            var path_ = "/api/v1/watch/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNamespace: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedNodeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNodeList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNodeList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedNodeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNodeList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedNode (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedNode");
            
    
            var path_ = "/api/v1/watch/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedNodeAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedNode");
            
    
            var path_ = "/api/v1/watch/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedNode: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchPersistentVolumeClaimList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolumeClaimList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolumeClaimList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchPersistentVolumeClaimListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolumeClaimList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPersistentVolumeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind PersistentVolume 
        /// </summary>
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPersistentVolume (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/watch/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind PersistentVolume 
        /// </summary>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPersistentVolume");
            
    
            var path_ = "/api/v1/watch/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolume: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Pod 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchPodList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPodList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPodList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Pod 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchPodListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPodList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PodTemplate 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchPodTemplateList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPodTemplateList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPodTemplateList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PodTemplate 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchPodTemplateListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPodTemplateList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ReplicationController 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchReplicationControllerList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchReplicationControllerList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchReplicationControllerList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ReplicationController 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchReplicationControllerListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchReplicationControllerList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ResourceQuota 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchResourceQuotaList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchResourceQuotaList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchResourceQuotaList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ResourceQuota 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchResourceQuotaListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchResourceQuotaList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Secret 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchSecretList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchSecretList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchSecretList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Secret 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchSecretListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchSecretList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ServiceAccount 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchServiceAccountList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchServiceAccountList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchServiceAccountList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ServiceAccount 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchServiceAccountListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchServiceAccountList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Service 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchServiceList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchServiceList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchServiceList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Service 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchServiceListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, string timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchServiceList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
    }
    
}
