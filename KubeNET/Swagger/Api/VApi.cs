using System;
using System.IO;
using System.Collections.Generic;
using RestSharp;
using KubeNET.Swagger.Client;
using KubeNET.Swagger.Model;

namespace KubeNET.Swagger.Api
{
    
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVApi
    {
        
        /// <summary>
        /// get available resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>UnversionedAPIResourceList</returns>
        UnversionedAPIResourceList GetAPIResources ();
  
        /// <summary>
        /// get available resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>UnversionedAPIResourceList</returns>
        System.Threading.Tasks.Task<UnversionedAPIResourceList> GetAPIResourcesAsync ();
        
        /// <summary>
        /// list objects of kind ComponentStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ComponentStatusList</returns>
        V1ComponentStatusList ListComponentStatus (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list objects of kind ComponentStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ComponentStatusList</returns>
        System.Threading.Tasks.Task<V1ComponentStatusList> ListComponentStatusAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified ComponentStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the ComponentStatus</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ComponentStatus</returns>
        V1ComponentStatus ReadComponentStatus (string name, string pretty);
  
        /// <summary>
        /// read the specified ComponentStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the ComponentStatus</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ComponentStatus</returns>
        System.Threading.Tasks.Task<V1ComponentStatus> ReadComponentStatusAsync (string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ConfigMapList</returns>
        V1ConfigMapList ListNamespacedConfigMap (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ConfigMapList</returns>
        System.Threading.Tasks.Task<V1ConfigMapList> ListNamespacedConfigMapAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        V1EndpointsList ListNamespacedEndpoints (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        System.Threading.Tasks.Task<V1EndpointsList> ListNamespacedEndpointsAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        V1EventList ListNamespacedEvent (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        System.Threading.Tasks.Task<V1EventList> ListNamespacedEventAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        V1LimitRangeList ListNamespacedLimitRange (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        System.Threading.Tasks.Task<V1LimitRangeList> ListNamespacedLimitRangeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NamespaceList</returns>
        V1NamespaceList ListNamespace (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NamespaceList</returns>
        System.Threading.Tasks.Task<V1NamespaceList> ListNamespaceAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace CreateNamespace (V1Namespace body, string pretty);
  
        /// <summary>
        /// create a Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> CreateNamespaceAsync (V1Namespace body, string pretty);
        
        /// <summary>
        /// delete collection of Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespace (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespaceAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Binding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        V1Binding CreateNamespacedBinding (V1Binding body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Binding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        System.Threading.Tasks.Task<V1Binding> CreateNamespacedBindingAsync (V1Binding body, string _namespace, string pretty);
        
        /// <summary>
        /// list or watch objects of kind ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ConfigMapList</returns>
        V1ConfigMapList ListNamespacedConfigMap_1 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ConfigMapList</returns>
        System.Threading.Tasks.Task<V1ConfigMapList> ListNamespacedConfigMap_1Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        V1ConfigMap CreateNamespacedConfigMap (V1ConfigMap body, string _namespace, string pretty);
  
        /// <summary>
        /// create a ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        System.Threading.Tasks.Task<V1ConfigMap> CreateNamespacedConfigMapAsync (V1ConfigMap body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedConfigMap (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedConfigMapAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ConfigMap</returns>
        V1ConfigMap ReadNamespacedConfigMap (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ConfigMap</returns>
        System.Threading.Tasks.Task<V1ConfigMap> ReadNamespacedConfigMapAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        V1ConfigMap ReplaceNamespacedConfigMap (V1ConfigMap body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        System.Threading.Tasks.Task<V1ConfigMap> ReplaceNamespacedConfigMapAsync (V1ConfigMap body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedConfigMap (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedConfigMapAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        V1ConfigMap PatchNamespacedConfigMap (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        System.Threading.Tasks.Task<V1ConfigMap> PatchNamespacedConfigMapAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        V1EndpointsList ListNamespacedEndpoints_2 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        System.Threading.Tasks.Task<V1EndpointsList> ListNamespacedEndpoints_2Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        V1Endpoints CreateNamespacedEndpoints (V1Endpoints body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        System.Threading.Tasks.Task<V1Endpoints> CreateNamespacedEndpointsAsync (V1Endpoints body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedEndpoints (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedEndpointsAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Endpoints</returns>
        V1Endpoints ReadNamespacedEndpoints (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Endpoints</returns>
        System.Threading.Tasks.Task<V1Endpoints> ReadNamespacedEndpointsAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        V1Endpoints ReplaceNamespacedEndpoints (V1Endpoints body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        System.Threading.Tasks.Task<V1Endpoints> ReplaceNamespacedEndpointsAsync (V1Endpoints body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedEndpoints (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedEndpointsAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        V1Endpoints PatchNamespacedEndpoints (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        System.Threading.Tasks.Task<V1Endpoints> PatchNamespacedEndpointsAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        V1EventList ListNamespacedEvent_3 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        System.Threading.Tasks.Task<V1EventList> ListNamespacedEvent_3Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        V1Event CreateNamespacedEvent (V1Event body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        System.Threading.Tasks.Task<V1Event> CreateNamespacedEventAsync (V1Event body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedEvent (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedEventAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Event</returns>
        V1Event ReadNamespacedEvent (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Event</returns>
        System.Threading.Tasks.Task<V1Event> ReadNamespacedEventAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        V1Event ReplaceNamespacedEvent (V1Event body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        System.Threading.Tasks.Task<V1Event> ReplaceNamespacedEventAsync (V1Event body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedEvent (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedEventAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        V1Event PatchNamespacedEvent (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        System.Threading.Tasks.Task<V1Event> PatchNamespacedEventAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        V1LimitRangeList ListNamespacedLimitRange_4 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        System.Threading.Tasks.Task<V1LimitRangeList> ListNamespacedLimitRange_4Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        V1LimitRange CreateNamespacedLimitRange (V1LimitRange body, string _namespace, string pretty);
  
        /// <summary>
        /// create a LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        System.Threading.Tasks.Task<V1LimitRange> CreateNamespacedLimitRangeAsync (V1LimitRange body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedLimitRange (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedLimitRangeAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1LimitRange</returns>
        V1LimitRange ReadNamespacedLimitRange (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1LimitRange</returns>
        System.Threading.Tasks.Task<V1LimitRange> ReadNamespacedLimitRangeAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        V1LimitRange ReplaceNamespacedLimitRange (V1LimitRange body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        System.Threading.Tasks.Task<V1LimitRange> ReplaceNamespacedLimitRangeAsync (V1LimitRange body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedLimitRange (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedLimitRangeAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        V1LimitRange PatchNamespacedLimitRange (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        System.Threading.Tasks.Task<V1LimitRange> PatchNamespacedLimitRangeAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        V1PersistentVolumeClaimList ListNamespacedPersistentVolumeClaim (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaimList> ListNamespacedPersistentVolumeClaimAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim CreateNamespacedPersistentVolumeClaim (V1PersistentVolumeClaim body, string _namespace, string pretty);
  
        /// <summary>
        /// create a PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> CreateNamespacedPersistentVolumeClaimAsync (V1PersistentVolumeClaim body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedPersistentVolumeClaim (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedPersistentVolumeClaimAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim ReadNamespacedPersistentVolumeClaim (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReadNamespacedPersistentVolumeClaimAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaim (V1PersistentVolumeClaim body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimAsync (V1PersistentVolumeClaim body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedPersistentVolumeClaim (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPersistentVolumeClaimAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim PatchNamespacedPersistentVolumeClaim (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> PatchNamespacedPersistentVolumeClaimAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaimStatus (V1PersistentVolumeClaim body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimStatusAsync (V1PersistentVolumeClaim body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        V1PodList ListNamespacedPod (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        System.Threading.Tasks.Task<V1PodList> ListNamespacedPodAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod CreateNamespacedPod (V1Pod body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> CreateNamespacedPodAsync (V1Pod body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedPod (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedPodAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Pod</returns>
        V1Pod ReadNamespacedPod (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> ReadNamespacedPodAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod ReplaceNamespacedPod (V1Pod body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> ReplaceNamespacedPodAsync (V1Pod body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedPod (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPodAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod PatchNamespacedPod (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> PatchNamespacedPodAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// connect GET requests to attach of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodAttach (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container);
  
        /// <summary>
        /// connect GET requests to attach of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodAttachAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container);
        
        /// <summary>
        /// connect POST requests to attach of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodAttach (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container);
  
        /// <summary>
        /// connect POST requests to attach of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodAttachAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container);
        
        /// <summary>
        /// create binding of a Binding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Binding</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        V1Binding CreateNamespacedBindingBinding (V1Binding body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// create binding of a Binding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Binding</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        System.Threading.Tasks.Task<V1Binding> CreateNamespacedBindingBindingAsync (V1Binding body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// connect GET requests to exec of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodExec (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command);
  
        /// <summary>
        /// connect GET requests to exec of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodExecAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command);
        
        /// <summary>
        /// connect POST requests to exec of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodExec (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command);
  
        /// <summary>
        /// connect POST requests to exec of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodExecAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command);
        
        /// <summary>
        /// read log of the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="container">The container for which to stream logs. Defaults to only container if there is one container in the pod.</param>
        /// <param name="follow">Follow the log stream of the pod. Defaults to false.</param>
        /// <param name="previous">Return previous terminated container logs. Defaults to false.</param>
        /// <param name="sinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="sinceTime">An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="timestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.</param>
        /// <param name="tailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime</param>
        /// <param name="limitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.</param>
        /// <returns>V1Pod</returns>
        V1Pod ReadNamespacedPodLog (string _namespace, string name, string pretty, string container, bool? follow, bool? previous, int? sinceSeconds, string sinceTime, bool? timestamps, int? tailLines, int? limitBytes);
  
        /// <summary>
        /// read log of the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="container">The container for which to stream logs. Defaults to only container if there is one container in the pod.</param>
        /// <param name="follow">Follow the log stream of the pod. Defaults to false.</param>
        /// <param name="previous">Return previous terminated container logs. Defaults to false.</param>
        /// <param name="sinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="sinceTime">An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="timestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.</param>
        /// <param name="tailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime</param>
        /// <param name="limitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> ReadNamespacedPodLogAsync (string _namespace, string name, string pretty, string container, bool? follow, bool? previous, int? sinceSeconds, string sinceTime, bool? timestamps, int? tailLines, int? limitBytes);
        
        /// <summary>
        /// connect GET requests to portforward of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodPortforward (string _namespace, string name);
  
        /// <summary>
        /// connect GET requests to portforward of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodPortforwardAsync (string _namespace, string name);
        
        /// <summary>
        /// connect POST requests to portforward of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodPortforward (string _namespace, string name);
  
        /// <summary>
        /// connect POST requests to portforward of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodPortforwardAsync (string _namespace, string name);
        
        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectHeadNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectHeadNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectPutNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPutNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectDeleteNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectDeleteNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectOptionsNamespacedPodProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectOptionsNamespacedPodProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedPodProxy_5 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedPodProxy_5Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectHeadNamespacedPodProxy_6 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectHeadNamespacedPodProxy_6Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectPutNamespacedPodProxy_7 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPutNamespacedPodProxy_7Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedPodProxy_8 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedPodProxy_8Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectDeleteNamespacedPodProxy_9 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectDeleteNamespacedPodProxy_9Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        string ConnectOptionsNamespacedPodProxy_10 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectOptionsNamespacedPodProxy_10Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// replace status of the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        V1Pod ReplaceNamespacedPodStatus (V1Pod body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        System.Threading.Tasks.Task<V1Pod> ReplaceNamespacedPodStatusAsync (V1Pod body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        V1PodTemplateList ListNamespacedPodTemplate (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        System.Threading.Tasks.Task<V1PodTemplateList> ListNamespacedPodTemplateAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        V1PodTemplate CreateNamespacedPodTemplate (V1PodTemplate body, string _namespace, string pretty);
  
        /// <summary>
        /// create a PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        System.Threading.Tasks.Task<V1PodTemplate> CreateNamespacedPodTemplateAsync (V1PodTemplate body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedPodTemplate (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedPodTemplateAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PodTemplate</returns>
        V1PodTemplate ReadNamespacedPodTemplate (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PodTemplate</returns>
        System.Threading.Tasks.Task<V1PodTemplate> ReadNamespacedPodTemplateAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        V1PodTemplate ReplaceNamespacedPodTemplate (V1PodTemplate body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        System.Threading.Tasks.Task<V1PodTemplate> ReplaceNamespacedPodTemplateAsync (V1PodTemplate body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedPodTemplate (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPodTemplateAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        V1PodTemplate PatchNamespacedPodTemplate (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        System.Threading.Tasks.Task<V1PodTemplate> PatchNamespacedPodTemplateAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        V1ReplicationControllerList ListNamespacedReplicationController (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        System.Threading.Tasks.Task<V1ReplicationControllerList> ListNamespacedReplicationControllerAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController CreateNamespacedReplicationController (V1ReplicationController body, string _namespace, string pretty);
  
        /// <summary>
        /// create a ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> CreateNamespacedReplicationControllerAsync (V1ReplicationController body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedReplicationController (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedReplicationControllerAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController ReadNamespacedReplicationController (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> ReadNamespacedReplicationControllerAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController ReplaceNamespacedReplicationController (V1ReplicationController body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> ReplaceNamespacedReplicationControllerAsync (V1ReplicationController body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedReplicationController (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedReplicationControllerAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController PatchNamespacedReplicationController (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> PatchNamespacedReplicationControllerAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// read scale of the specified Scale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        V1Scale ReadNamespacedScaleScale (string _namespace, string name, string pretty);
  
        /// <summary>
        /// read scale of the specified Scale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        System.Threading.Tasks.Task<V1Scale> ReadNamespacedScaleScaleAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace scale of the specified Scale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        V1Scale ReplaceNamespacedScaleScale (V1Scale body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace scale of the specified Scale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        System.Threading.Tasks.Task<V1Scale> ReplaceNamespacedScaleScaleAsync (V1Scale body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update scale of the specified Scale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        V1Scale PatchNamespacedScaleScale (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update scale of the specified Scale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        System.Threading.Tasks.Task<V1Scale> PatchNamespacedScaleScaleAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        V1ReplicationController ReplaceNamespacedReplicationControllerStatus (V1ReplicationController body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        System.Threading.Tasks.Task<V1ReplicationController> ReplaceNamespacedReplicationControllerStatusAsync (V1ReplicationController body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        V1ResourceQuotaList ListNamespacedResourceQuota (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        System.Threading.Tasks.Task<V1ResourceQuotaList> ListNamespacedResourceQuotaAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota CreateNamespacedResourceQuota (V1ResourceQuota body, string _namespace, string pretty);
  
        /// <summary>
        /// create a ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> CreateNamespacedResourceQuotaAsync (V1ResourceQuota body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedResourceQuota (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedResourceQuotaAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota ReadNamespacedResourceQuota (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> ReadNamespacedResourceQuotaAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota ReplaceNamespacedResourceQuota (V1ResourceQuota body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaAsync (V1ResourceQuota body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedResourceQuota (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedResourceQuotaAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota PatchNamespacedResourceQuota (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> PatchNamespacedResourceQuotaAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        V1ResourceQuota ReplaceNamespacedResourceQuotaStatus (V1ResourceQuota body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        System.Threading.Tasks.Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaStatusAsync (V1ResourceQuota body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        V1SecretList ListNamespacedSecret (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        System.Threading.Tasks.Task<V1SecretList> ListNamespacedSecretAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        V1Secret CreateNamespacedSecret (V1Secret body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        System.Threading.Tasks.Task<V1Secret> CreateNamespacedSecretAsync (V1Secret body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedSecret (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedSecretAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Secret</returns>
        V1Secret ReadNamespacedSecret (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Secret</returns>
        System.Threading.Tasks.Task<V1Secret> ReadNamespacedSecretAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        V1Secret ReplaceNamespacedSecret (V1Secret body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        System.Threading.Tasks.Task<V1Secret> ReplaceNamespacedSecretAsync (V1Secret body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedSecret (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedSecretAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        V1Secret PatchNamespacedSecret (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        System.Threading.Tasks.Task<V1Secret> PatchNamespacedSecretAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        V1ServiceAccountList ListNamespacedServiceAccount (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        System.Threading.Tasks.Task<V1ServiceAccountList> ListNamespacedServiceAccountAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        V1ServiceAccount CreateNamespacedServiceAccount (V1ServiceAccount body, string _namespace, string pretty);
  
        /// <summary>
        /// create a ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        System.Threading.Tasks.Task<V1ServiceAccount> CreateNamespacedServiceAccountAsync (V1ServiceAccount body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedServiceAccount (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedServiceAccountAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ServiceAccount</returns>
        V1ServiceAccount ReadNamespacedServiceAccount (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ServiceAccount</returns>
        System.Threading.Tasks.Task<V1ServiceAccount> ReadNamespacedServiceAccountAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        V1ServiceAccount ReplaceNamespacedServiceAccount (V1ServiceAccount body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        System.Threading.Tasks.Task<V1ServiceAccount> ReplaceNamespacedServiceAccountAsync (V1ServiceAccount body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedServiceAccount (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedServiceAccountAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        V1ServiceAccount PatchNamespacedServiceAccount (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        System.Threading.Tasks.Task<V1ServiceAccount> PatchNamespacedServiceAccountAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        V1ServiceList ListNamespacedService (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        System.Threading.Tasks.Task<V1ServiceList> ListNamespacedServiceAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        V1Service CreateNamespacedService (V1Service body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> CreateNamespacedServiceAsync (V1Service body, string _namespace, string pretty);
        
        /// <summary>
        /// read the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Service</returns>
        V1Service ReadNamespacedService (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> ReadNamespacedServiceAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        V1Service ReplaceNamespacedService (V1Service body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> ReplaceNamespacedServiceAsync (V1Service body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedService (string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedServiceAsync (string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        V1Service PatchNamespacedService (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> PatchNamespacedServiceAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// connect GET requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedServiceProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect GET requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedServiceProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect HEAD requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectHeadNamespacedServiceProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect HEAD requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectHeadNamespacedServiceProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect PUT requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectPutNamespacedServiceProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect PUT requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPutNamespacedServiceProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect POST requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedServiceProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect POST requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedServiceProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect DELETE requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectDeleteNamespacedServiceProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect DELETE requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectDeleteNamespacedServiceProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectOptionsNamespacedServiceProxy (string _namespace, string name, string path);
  
        /// <summary>
        /// connect OPTIONS requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectOptionsNamespacedServiceProxyAsync (string _namespace, string name, string path);
        
        /// <summary>
        /// connect GET requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectGetNamespacedServiceProxy_11 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect GET requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNamespacedServiceProxy_11Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect HEAD requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectHeadNamespacedServiceProxy_12 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect HEAD requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectHeadNamespacedServiceProxy_12Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect PUT requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectPutNamespacedServiceProxy_13 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect PUT requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPutNamespacedServiceProxy_13Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect POST requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectPostNamespacedServiceProxy_14 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect POST requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNamespacedServiceProxy_14Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect DELETE requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectDeleteNamespacedServiceProxy_15 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect DELETE requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectDeleteNamespacedServiceProxy_15Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        string ConnectOptionsNamespacedServiceProxy_16 (string _namespace, string name, string path2, string path);
  
        /// <summary>
        /// connect OPTIONS requests to proxy of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectOptionsNamespacedServiceProxy_16Async (string _namespace, string name, string path2, string path);
        
        /// <summary>
        /// replace status of the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        V1Service ReplaceNamespacedServiceStatus (V1Service body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        System.Threading.Tasks.Task<V1Service> ReplaceNamespacedServiceStatusAsync (V1Service body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// read the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Namespace</returns>
        V1Namespace ReadNamespace (string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> ReadNamespaceAsync (string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace ReplaceNamespace (V1Namespace body, string name, string pretty);
  
        /// <summary>
        /// replace the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> ReplaceNamespaceAsync (V1Namespace body, string name, string pretty);
        
        /// <summary>
        /// delete a Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespace (V1DeleteOptions body, string name, string pretty);
  
        /// <summary>
        /// delete a Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespaceAsync (V1DeleteOptions body, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace PatchNamespace (UnversionedPatch body, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> PatchNamespaceAsync (UnversionedPatch body, string name, string pretty);
        
        /// <summary>
        /// replace finalize of the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace ReplaceNamespaceFinalize (V1Namespace body, string name, string pretty);
  
        /// <summary>
        /// replace finalize of the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> ReplaceNamespaceFinalizeAsync (V1Namespace body, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        V1Namespace ReplaceNamespaceStatus (V1Namespace body, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        System.Threading.Tasks.Task<V1Namespace> ReplaceNamespaceStatusAsync (V1Namespace body, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NodeList</returns>
        V1NodeList ListNode (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NodeList</returns>
        System.Threading.Tasks.Task<V1NodeList> ListNodeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node CreateNode (V1Node body, string pretty);
  
        /// <summary>
        /// create a Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> CreateNodeAsync (V1Node body, string pretty);
        
        /// <summary>
        /// delete collection of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNode (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNodeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Node</returns>
        V1Node ReadNode (string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> ReadNodeAsync (string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node ReplaceNode (V1Node body, string name, string pretty);
  
        /// <summary>
        /// replace the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> ReplaceNodeAsync (V1Node body, string name, string pretty);
        
        /// <summary>
        /// delete a Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNode (V1DeleteOptions body, string name, string pretty);
  
        /// <summary>
        /// delete a Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNodeAsync (V1DeleteOptions body, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node PatchNode (UnversionedPatch body, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> PatchNodeAsync (UnversionedPatch body, string name, string pretty);
        
        /// <summary>
        /// connect GET requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectGetNodeProxy (string name, string path);
  
        /// <summary>
        /// connect GET requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNodeProxyAsync (string name, string path);
        
        /// <summary>
        /// connect HEAD requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectHeadNodeProxy (string name, string path);
  
        /// <summary>
        /// connect HEAD requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectHeadNodeProxyAsync (string name, string path);
        
        /// <summary>
        /// connect PUT requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectPutNodeProxy (string name, string path);
  
        /// <summary>
        /// connect PUT requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPutNodeProxyAsync (string name, string path);
        
        /// <summary>
        /// connect POST requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectPostNodeProxy (string name, string path);
  
        /// <summary>
        /// connect POST requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNodeProxyAsync (string name, string path);
        
        /// <summary>
        /// connect DELETE requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectDeleteNodeProxy (string name, string path);
  
        /// <summary>
        /// connect DELETE requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectDeleteNodeProxyAsync (string name, string path);
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectOptionsNodeProxy (string name, string path);
  
        /// <summary>
        /// connect OPTIONS requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectOptionsNodeProxyAsync (string name, string path);
        
        /// <summary>
        /// connect GET requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectGetNodeProxy_17 (string name, string path2, string path);
  
        /// <summary>
        /// connect GET requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectGetNodeProxy_17Async (string name, string path2, string path);
        
        /// <summary>
        /// connect HEAD requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectHeadNodeProxy_18 (string name, string path2, string path);
  
        /// <summary>
        /// connect HEAD requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectHeadNodeProxy_18Async (string name, string path2, string path);
        
        /// <summary>
        /// connect PUT requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectPutNodeProxy_19 (string name, string path2, string path);
  
        /// <summary>
        /// connect PUT requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPutNodeProxy_19Async (string name, string path2, string path);
        
        /// <summary>
        /// connect POST requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectPostNodeProxy_20 (string name, string path2, string path);
  
        /// <summary>
        /// connect POST requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectPostNodeProxy_20Async (string name, string path2, string path);
        
        /// <summary>
        /// connect DELETE requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectDeleteNodeProxy_21 (string name, string path2, string path);
  
        /// <summary>
        /// connect DELETE requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectDeleteNodeProxy_21Async (string name, string path2, string path);
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        string ConnectOptionsNodeProxy_22 (string name, string path2, string path);
  
        /// <summary>
        /// connect OPTIONS requests to proxy of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ConnectOptionsNodeProxy_22Async (string name, string path2, string path);
        
        /// <summary>
        /// replace status of the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        V1Node ReplaceNodeStatus (V1Node body, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        System.Threading.Tasks.Task<V1Node> ReplaceNodeStatusAsync (V1Node body, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        V1PersistentVolumeClaimList ListNamespacedPersistentVolumeClaim_23 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeClaimList> ListNamespacedPersistentVolumeClaim_23Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeList</returns>
        V1PersistentVolumeList ListPersistentVolume (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeList</returns>
        System.Threading.Tasks.Task<V1PersistentVolumeList> ListPersistentVolumeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume CreatePersistentVolume (V1PersistentVolume body, string pretty);
  
        /// <summary>
        /// create a PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> CreatePersistentVolumeAsync (V1PersistentVolume body, string pretty);
        
        /// <summary>
        /// delete collection of PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionPersistentVolume (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionPersistentVolumeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume ReadPersistentVolume (string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> ReadPersistentVolumeAsync (string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume ReplacePersistentVolume (V1PersistentVolume body, string name, string pretty);
  
        /// <summary>
        /// replace the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> ReplacePersistentVolumeAsync (V1PersistentVolume body, string name, string pretty);
        
        /// <summary>
        /// delete a PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletePersistentVolume (V1DeleteOptions body, string name, string pretty);
  
        /// <summary>
        /// delete a PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletePersistentVolumeAsync (V1DeleteOptions body, string name, string pretty);
        
        /// <summary>
        /// partially update the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume PatchPersistentVolume (UnversionedPatch body, string name, string pretty);
  
        /// <summary>
        /// partially update the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> PatchPersistentVolumeAsync (UnversionedPatch body, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        V1PersistentVolume ReplacePersistentVolumeStatus (V1PersistentVolume body, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        System.Threading.Tasks.Task<V1PersistentVolume> ReplacePersistentVolumeStatusAsync (V1PersistentVolume body, string name, string pretty);
        
        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        V1PodList ListNamespacedPod_24 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        System.Threading.Tasks.Task<V1PodList> ListNamespacedPod_24Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        V1PodTemplateList ListNamespacedPodTemplate_25 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        System.Threading.Tasks.Task<V1PodTemplateList> ListNamespacedPodTemplate_25Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy OPTIONS requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedPod (string _namespace, string name);
  
        /// <summary>
        /// proxy OPTIONS requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedPodAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedPod_26 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedPod_26Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedPod_27 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedPod_27Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedPod_28 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedPod_28Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedPod_29 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedPod_29Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedPod_30 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedPod_30Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy OPTIONS requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedPod_31 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy OPTIONS requests to Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedPod_31Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy OPTIONS requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedService (string _namespace, string name);
  
        /// <summary>
        /// proxy OPTIONS requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedServiceAsync (string _namespace, string name);
        
        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyGETNamespacedService_32 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNamespacedService_32Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyHEADNamespacedService_33 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNamespacedService_33Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPUTNamespacedService_34 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNamespacedService_34Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPOSTNamespacedService_35 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNamespacedService_35Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyDELETENamespacedService_36 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENamespacedService_36Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy OPTIONS requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNamespacedService_37 (string _namespace, string name, string path);
  
        /// <summary>
        /// proxy OPTIONS requests to Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedService_37Async (string _namespace, string name, string path);
        
        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyGETNode (string name);
  
        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNodeAsync (string name);
        
        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyHEADNode (string name);
  
        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNodeAsync (string name);
        
        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyPUTNode (string name);
  
        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNodeAsync (string name);
        
        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyPOSTNode (string name);
  
        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNodeAsync (string name);
        
        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyDELETENode (string name);
  
        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENodeAsync (string name);
        
        /// <summary>
        /// proxy OPTIONS requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNode (string name);
  
        /// <summary>
        /// proxy OPTIONS requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNodeAsync (string name);
        
        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyGETNode_38 (string name, string path);
  
        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyGETNode_38Async (string name, string path);
        
        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyHEADNode_39 (string name, string path);
  
        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyHEADNode_39Async (string name, string path);
        
        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPUTNode_40 (string name, string path);
  
        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPUTNode_40Async (string name, string path);
        
        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyPOSTNode_41 (string name, string path);
  
        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyPOSTNode_41Async (string name, string path);
        
        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyDELETENode_42 (string name, string path);
  
        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyDELETENode_42Async (string name, string path);
        
        /// <summary>
        /// proxy OPTIONS requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        string ProxyOPTIONSNode_43 (string name, string path);
  
        /// <summary>
        /// proxy OPTIONS requests to Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        System.Threading.Tasks.Task<string> ProxyOPTIONSNode_43Async (string name, string path);
        
        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        V1ReplicationControllerList ListNamespacedReplicationController_44 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        System.Threading.Tasks.Task<V1ReplicationControllerList> ListNamespacedReplicationController_44Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        V1ResourceQuotaList ListNamespacedResourceQuota_45 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        System.Threading.Tasks.Task<V1ResourceQuotaList> ListNamespacedResourceQuota_45Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        V1SecretList ListNamespacedSecret_46 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        System.Threading.Tasks.Task<V1SecretList> ListNamespacedSecret_46Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        V1ServiceAccountList ListNamespacedServiceAccount_47 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        System.Threading.Tasks.Task<V1ServiceAccountList> ListNamespacedServiceAccount_47Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        V1ServiceList ListNamespacedService_48 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        System.Threading.Tasks.Task<V1ServiceList> ListNamespacedService_48Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedConfigMapList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedConfigMapListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEndpointsList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEventList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedLimitRangeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespaceList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespaceListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedConfigMapList_49 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedConfigMapList_49Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedConfigMap (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind ConfigMap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedConfigMapAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEndpointsList_50 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsList_50Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEndpoints (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Endpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEventList_51 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventList_51Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedEvent (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedLimitRangeList_52 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeList_52Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedLimitRange (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind LimitRange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPersistentVolumeClaimList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPersistentVolumeClaim (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPodList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPod (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPodTemplateList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPodTemplate (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedReplicationControllerList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedReplicationController (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedResourceQuotaList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedResourceQuota (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedSecretList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedSecret (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedServiceAccountList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedServiceAccount (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedServiceList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedService (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespace (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Namespace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespaceAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNodeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNodeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNode (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNodeAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPersistentVolumeClaimList_53 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimList_53Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchPersistentVolumeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchPersistentVolumeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchPersistentVolume (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind PersistentVolume
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchPersistentVolumeAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPodList_54 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodList_54Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedPodTemplateList_55 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateList_55Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedReplicationControllerList_56 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerList_56Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedResourceQuotaList_57 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaList_57Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedSecretList_58 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretList_58Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedServiceAccountList_59 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountList_59Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedServiceList_60 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceList_60Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// get available resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>UnversionedAPIResourceList</returns>
        UnversionedAPIResourceList GetAPIResources_61 ();
  
        /// <summary>
        /// get available resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>UnversionedAPIResourceList</returns>
        System.Threading.Tasks.Task<UnversionedAPIResourceList> GetAPIResources_61Async ();
        
        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1HorizontalPodAutoscalerList</returns>
        V1HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1HorizontalPodAutoscalerList</returns>
        System.Threading.Tasks.Task<V1HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscalerAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1HorizontalPodAutoscalerList</returns>
        V1HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler_62 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1HorizontalPodAutoscalerList</returns>
        System.Threading.Tasks.Task<V1HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscaler_62Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        V1HorizontalPodAutoscaler CreateNamespacedHorizontalPodAutoscaler (V1HorizontalPodAutoscaler body, string _namespace, string pretty);
  
        /// <summary>
        /// create a HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> CreateNamespacedHorizontalPodAutoscalerAsync (V1HorizontalPodAutoscaler body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedHorizontalPodAutoscaler (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedHorizontalPodAutoscalerAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        V1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscaler (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        V1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscaler (V1HorizontalPodAutoscaler body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerAsync (V1HorizontalPodAutoscaler body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedHorizontalPodAutoscaler (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedHorizontalPodAutoscalerAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        V1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscaler (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        V1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscalerStatus (V1HorizontalPodAutoscaler body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerStatusAsync (V1HorizontalPodAutoscaler body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedHorizontalPodAutoscalerList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedHorizontalPodAutoscalerListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedHorizontalPodAutoscalerList_63 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedHorizontalPodAutoscalerList_63Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedHorizontalPodAutoscaler (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind HorizontalPodAutoscaler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedHorizontalPodAutoscalerAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// get available resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>UnversionedAPIResourceList</returns>
        UnversionedAPIResourceList GetAPIResources_64 ();
  
        /// <summary>
        /// get available resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <returns>UnversionedAPIResourceList</returns>
        System.Threading.Tasks.Task<UnversionedAPIResourceList> GetAPIResources_64Async ();
        
        /// <summary>
        /// list or watch objects of kind Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1JobList</returns>
        V1JobList ListNamespacedJob (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1JobList</returns>
        System.Threading.Tasks.Task<V1JobList> ListNamespacedJobAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// list or watch objects of kind Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1JobList</returns>
        V1JobList ListNamespacedJob_65 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// list or watch objects of kind Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1JobList</returns>
        System.Threading.Tasks.Task<V1JobList> ListNamespacedJob_65Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// create a Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        V1Job CreateNamespacedJob (V1Job body, string _namespace, string pretty);
  
        /// <summary>
        /// create a Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        System.Threading.Tasks.Task<V1Job> CreateNamespacedJobAsync (V1Job body, string _namespace, string pretty);
        
        /// <summary>
        /// delete collection of Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeletecollectionNamespacedJob (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// delete collection of Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedJobAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// read the specified Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Job</returns>
        V1Job ReadNamespacedJob (string _namespace, string name, string pretty, bool? export, bool? exact);
  
        /// <summary>
        /// read the specified Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Job</returns>
        System.Threading.Tasks.Task<V1Job> ReadNamespacedJobAsync (string _namespace, string name, string pretty, bool? export, bool? exact);
        
        /// <summary>
        /// replace the specified Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        V1Job ReplaceNamespacedJob (V1Job body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace the specified Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        System.Threading.Tasks.Task<V1Job> ReplaceNamespacedJobAsync (V1Job body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// delete a Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedJob (V1DeleteOptions body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// delete a Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedJobAsync (V1DeleteOptions body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// partially update the specified Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        V1Job PatchNamespacedJob (UnversionedPatch body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// partially update the specified Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        System.Threading.Tasks.Task<V1Job> PatchNamespacedJobAsync (UnversionedPatch body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// replace status of the specified Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        V1Job ReplaceNamespacedJobStatus (V1Job body, string _namespace, string name, string pretty);
  
        /// <summary>
        /// replace status of the specified Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        System.Threading.Tasks.Task<V1Job> ReplaceNamespacedJobStatusAsync (V1Job body, string _namespace, string name, string pretty);
        
        /// <summary>
        /// watch individual changes to a list of Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedJobList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedJobListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch individual changes to a list of Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedJobList_66 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch individual changes to a list of Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedJobList_66Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
        /// <summary>
        /// watch changes to an object of kind Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        JsonWatchEvent WatchNamespacedJob (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
  
        /// <summary>
        /// watch changes to an object of kind Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedJobAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds);
        
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VApi : IVApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public VApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="VApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        
        /// <summary>
        /// get available resources 
        /// </summary>
        /// <returns>UnversionedAPIResourceList</returns>            
        public UnversionedAPIResourceList GetAPIResources ()
        {
            
    
            var path_ = "/api/v1";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedAPIResourceList) ApiClient.Deserialize(response, typeof(UnversionedAPIResourceList));
        }
    
        /// <summary>
        /// get available resources 
        /// </summary>
        /// <returns>UnversionedAPIResourceList</returns>
        public async System.Threading.Tasks.Task<UnversionedAPIResourceList> GetAPIResourcesAsync ()
        {
            
    
            var path_ = "/api/v1";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources: " + response.Content, response.Content);

            return (UnversionedAPIResourceList) ApiClient.Deserialize(response, typeof(UnversionedAPIResourceList));
        }
        
        /// <summary>
        /// list objects of kind ComponentStatus 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ComponentStatusList</returns>            
        public V1ComponentStatusList ListComponentStatus (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/componentstatuses";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListComponentStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListComponentStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ComponentStatusList) ApiClient.Deserialize(response, typeof(V1ComponentStatusList));
        }
    
        /// <summary>
        /// list objects of kind ComponentStatus 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ComponentStatusList</returns>
        public async System.Threading.Tasks.Task<V1ComponentStatusList> ListComponentStatusAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/componentstatuses";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListComponentStatus: " + response.Content, response.Content);

            return (V1ComponentStatusList) ApiClient.Deserialize(response, typeof(V1ComponentStatusList));
        }
        
        /// <summary>
        /// read the specified ComponentStatus 
        /// </summary>
        /// <param name="name">name of the ComponentStatus</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ComponentStatus</returns>            
        public V1ComponentStatus ReadComponentStatus (string name, string pretty)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadComponentStatus");
            
    
            var path_ = "/api/v1/componentstatuses/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadComponentStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadComponentStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ComponentStatus) ApiClient.Deserialize(response, typeof(V1ComponentStatus));
        }
    
        /// <summary>
        /// read the specified ComponentStatus 
        /// </summary>
        /// <param name="name">name of the ComponentStatus</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ComponentStatus</returns>
        public async System.Threading.Tasks.Task<V1ComponentStatus> ReadComponentStatusAsync (string name, string pretty)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadComponentStatus");
            
    
            var path_ = "/api/v1/componentstatuses/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadComponentStatus: " + response.Content, response.Content);

            return (V1ComponentStatus) ApiClient.Deserialize(response, typeof(V1ComponentStatus));
        }
        
        /// <summary>
        /// list or watch objects of kind ConfigMap 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ConfigMapList</returns>            
        public V1ConfigMapList ListNamespacedConfigMap (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedConfigMap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedConfigMap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ConfigMapList) ApiClient.Deserialize(response, typeof(V1ConfigMapList));
        }
    
        /// <summary>
        /// list or watch objects of kind ConfigMap 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ConfigMapList</returns>
        public async System.Threading.Tasks.Task<V1ConfigMapList> ListNamespacedConfigMapAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedConfigMap: " + response.Content, response.Content);

            return (V1ConfigMapList) ApiClient.Deserialize(response, typeof(V1ConfigMapList));
        }
        
        /// <summary>
        /// list or watch objects of kind Endpoints 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1EndpointsList</returns>            
        public V1EndpointsList ListNamespacedEndpoints (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1EndpointsList) ApiClient.Deserialize(response, typeof(V1EndpointsList));
        }
    
        /// <summary>
        /// list or watch objects of kind Endpoints 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        public async System.Threading.Tasks.Task<V1EndpointsList> ListNamespacedEndpointsAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints: " + response.Content, response.Content);

            return (V1EndpointsList) ApiClient.Deserialize(response, typeof(V1EndpointsList));
        }
        
        /// <summary>
        /// list or watch objects of kind Event 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1EventList</returns>            
        public V1EventList ListNamespacedEvent (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1EventList) ApiClient.Deserialize(response, typeof(V1EventList));
        }
    
        /// <summary>
        /// list or watch objects of kind Event 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        public async System.Threading.Tasks.Task<V1EventList> ListNamespacedEventAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent: " + response.Content, response.Content);

            return (V1EventList) ApiClient.Deserialize(response, typeof(V1EventList));
        }
        
        /// <summary>
        /// list or watch objects of kind LimitRange 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1LimitRangeList</returns>            
        public V1LimitRangeList ListNamespacedLimitRange (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRangeList) ApiClient.Deserialize(response, typeof(V1LimitRangeList));
        }
    
        /// <summary>
        /// list or watch objects of kind LimitRange 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        public async System.Threading.Tasks.Task<V1LimitRangeList> ListNamespacedLimitRangeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRangeList) ApiClient.Deserialize(response, typeof(V1LimitRangeList));
        }
        
        /// <summary>
        /// list or watch objects of kind Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1NamespaceList</returns>            
        public V1NamespaceList ListNamespace (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1NamespaceList) ApiClient.Deserialize(response, typeof(V1NamespaceList));
        }
    
        /// <summary>
        /// list or watch objects of kind Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NamespaceList</returns>
        public async System.Threading.Tasks.Task<V1NamespaceList> ListNamespaceAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespace: " + response.Content, response.Content);

            return (V1NamespaceList) ApiClient.Deserialize(response, typeof(V1NamespaceList));
        }
        
        /// <summary>
        /// create a Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace CreateNamespace (V1Namespace body, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespace");
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// create a Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> CreateNamespaceAsync (V1Namespace body, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespace");
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespace: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// delete collection of Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespace (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespaceAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespace: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// create a Binding 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Binding</returns>            
        public V1Binding CreateNamespacedBinding (V1Binding body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedBinding");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedBinding");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/bindings";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBinding: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBinding: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Binding) ApiClient.Deserialize(response, typeof(V1Binding));
        }
    
        /// <summary>
        /// create a Binding 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        public async System.Threading.Tasks.Task<V1Binding> CreateNamespacedBindingAsync (V1Binding body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedBinding");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedBinding");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/bindings";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBinding: " + response.Content, response.Content);

            return (V1Binding) ApiClient.Deserialize(response, typeof(V1Binding));
        }
        
        /// <summary>
        /// list or watch objects of kind ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ConfigMapList</returns>            
        public V1ConfigMapList ListNamespacedConfigMap_1 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedConfigMap_1");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedConfigMap_1: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedConfigMap_1: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ConfigMapList) ApiClient.Deserialize(response, typeof(V1ConfigMapList));
        }
    
        /// <summary>
        /// list or watch objects of kind ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ConfigMapList</returns>
        public async System.Threading.Tasks.Task<V1ConfigMapList> ListNamespacedConfigMap_1Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedConfigMap_1");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedConfigMap_1: " + response.Content, response.Content);

            return (V1ConfigMapList) ApiClient.Deserialize(response, typeof(V1ConfigMapList));
        }
        
        /// <summary>
        /// create a ConfigMap 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ConfigMap</returns>            
        public V1ConfigMap CreateNamespacedConfigMap (V1ConfigMap body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedConfigMap");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedConfigMap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedConfigMap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ConfigMap) ApiClient.Deserialize(response, typeof(V1ConfigMap));
        }
    
        /// <summary>
        /// create a ConfigMap 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        public async System.Threading.Tasks.Task<V1ConfigMap> CreateNamespacedConfigMapAsync (V1ConfigMap body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedConfigMap");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedConfigMap: " + response.Content, response.Content);

            return (V1ConfigMap) ApiClient.Deserialize(response, typeof(V1ConfigMap));
        }
        
        /// <summary>
        /// delete collection of ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedConfigMap (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedConfigMap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedConfigMap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedConfigMapAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedConfigMap: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ConfigMap</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1ConfigMap</returns>            
        public V1ConfigMap ReadNamespacedConfigMap (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedConfigMap");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedConfigMap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedConfigMap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ConfigMap) ApiClient.Deserialize(response, typeof(V1ConfigMap));
        }
    
        /// <summary>
        /// read the specified ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ConfigMap</returns>
        public async System.Threading.Tasks.Task<V1ConfigMap> ReadNamespacedConfigMapAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedConfigMap");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedConfigMap: " + response.Content, response.Content);

            return (V1ConfigMap) ApiClient.Deserialize(response, typeof(V1ConfigMap));
        }
        
        /// <summary>
        /// replace the specified ConfigMap 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ConfigMap</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ConfigMap</returns>            
        public V1ConfigMap ReplaceNamespacedConfigMap (V1ConfigMap body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedConfigMap");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedConfigMap");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedConfigMap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedConfigMap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ConfigMap) ApiClient.Deserialize(response, typeof(V1ConfigMap));
        }
    
        /// <summary>
        /// replace the specified ConfigMap 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        public async System.Threading.Tasks.Task<V1ConfigMap> ReplaceNamespacedConfigMapAsync (V1ConfigMap body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedConfigMap");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedConfigMap");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedConfigMap: " + response.Content, response.Content);

            return (V1ConfigMap) ApiClient.Deserialize(response, typeof(V1ConfigMap));
        }
        
        /// <summary>
        /// delete a ConfigMap 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ConfigMap</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedConfigMap (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedConfigMap");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedConfigMap");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedConfigMap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedConfigMap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a ConfigMap 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedConfigMapAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedConfigMap");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedConfigMap");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedConfigMap: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified ConfigMap 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ConfigMap</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ConfigMap</returns>            
        public V1ConfigMap PatchNamespacedConfigMap (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedConfigMap");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedConfigMap");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedConfigMap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedConfigMap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ConfigMap) ApiClient.Deserialize(response, typeof(V1ConfigMap));
        }
    
        /// <summary>
        /// partially update the specified ConfigMap 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ConfigMap</returns>
        public async System.Threading.Tasks.Task<V1ConfigMap> PatchNamespacedConfigMapAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedConfigMap");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedConfigMap");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedConfigMap");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedConfigMap: " + response.Content, response.Content);

            return (V1ConfigMap) ApiClient.Deserialize(response, typeof(V1ConfigMap));
        }
        
        /// <summary>
        /// list or watch objects of kind Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1EndpointsList</returns>            
        public V1EndpointsList ListNamespacedEndpoints_2 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedEndpoints_2");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints_2: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints_2: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1EndpointsList) ApiClient.Deserialize(response, typeof(V1EndpointsList));
        }
    
        /// <summary>
        /// list or watch objects of kind Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EndpointsList</returns>
        public async System.Threading.Tasks.Task<V1EndpointsList> ListNamespacedEndpoints_2Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedEndpoints_2");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEndpoints_2: " + response.Content, response.Content);

            return (V1EndpointsList) ApiClient.Deserialize(response, typeof(V1EndpointsList));
        }
        
        /// <summary>
        /// create a Endpoints 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Endpoints</returns>            
        public V1Endpoints CreateNamespacedEndpoints (V1Endpoints body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedEndpoints");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
    
        /// <summary>
        /// create a Endpoints 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        public async System.Threading.Tasks.Task<V1Endpoints> CreateNamespacedEndpointsAsync (V1Endpoints body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedEndpoints");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEndpoints: " + response.Content, response.Content);

            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
        
        /// <summary>
        /// delete collection of Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedEndpoints (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedEndpointsAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedEndpoints: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1Endpoints</returns>            
        public V1Endpoints ReadNamespacedEndpoints (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
    
        /// <summary>
        /// read the specified Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Endpoints</returns>
        public async System.Threading.Tasks.Task<V1Endpoints> ReadNamespacedEndpointsAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEndpoints: " + response.Content, response.Content);

            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
        
        /// <summary>
        /// replace the specified Endpoints 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Endpoints</returns>            
        public V1Endpoints ReplaceNamespacedEndpoints (V1Endpoints body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedEndpoints");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
    
        /// <summary>
        /// replace the specified Endpoints 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        public async System.Threading.Tasks.Task<V1Endpoints> ReplaceNamespacedEndpointsAsync (V1Endpoints body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedEndpoints");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEndpoints: " + response.Content, response.Content);

            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
        
        /// <summary>
        /// delete a Endpoints 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedEndpoints (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedEndpoints");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Endpoints 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedEndpointsAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedEndpoints");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEndpoints: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Endpoints 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Endpoints</returns>            
        public V1Endpoints PatchNamespacedEndpoints (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedEndpoints");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
    
        /// <summary>
        /// partially update the specified Endpoints 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Endpoints</returns>
        public async System.Threading.Tasks.Task<V1Endpoints> PatchNamespacedEndpointsAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedEndpoints");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedEndpoints");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEndpoints: " + response.Content, response.Content);

            return (V1Endpoints) ApiClient.Deserialize(response, typeof(V1Endpoints));
        }
        
        /// <summary>
        /// list or watch objects of kind Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1EventList</returns>            
        public V1EventList ListNamespacedEvent_3 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedEvent_3");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent_3: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent_3: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1EventList) ApiClient.Deserialize(response, typeof(V1EventList));
        }
    
        /// <summary>
        /// list or watch objects of kind Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1EventList</returns>
        public async System.Threading.Tasks.Task<V1EventList> ListNamespacedEvent_3Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedEvent_3");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedEvent_3: " + response.Content, response.Content);

            return (V1EventList) ApiClient.Deserialize(response, typeof(V1EventList));
        }
        
        /// <summary>
        /// create a Event 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Event</returns>            
        public V1Event CreateNamespacedEvent (V1Event body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedEvent");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
    
        /// <summary>
        /// create a Event 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        public async System.Threading.Tasks.Task<V1Event> CreateNamespacedEventAsync (V1Event body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedEvent");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedEvent: " + response.Content, response.Content);

            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
        
        /// <summary>
        /// delete collection of Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedEvent (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedEventAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedEvent: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1Event</returns>            
        public V1Event ReadNamespacedEvent (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
    
        /// <summary>
        /// read the specified Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Event</returns>
        public async System.Threading.Tasks.Task<V1Event> ReadNamespacedEventAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedEvent: " + response.Content, response.Content);

            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
        
        /// <summary>
        /// replace the specified Event 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Event</returns>            
        public V1Event ReplaceNamespacedEvent (V1Event body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedEvent");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
    
        /// <summary>
        /// replace the specified Event 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        public async System.Threading.Tasks.Task<V1Event> ReplaceNamespacedEventAsync (V1Event body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedEvent");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedEvent: " + response.Content, response.Content);

            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
        
        /// <summary>
        /// delete a Event 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedEvent (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedEvent");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Event 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedEventAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedEvent");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedEvent: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Event 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Event</returns>            
        public V1Event PatchNamespacedEvent (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedEvent");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
    
        /// <summary>
        /// partially update the specified Event 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Event</returns>
        public async System.Threading.Tasks.Task<V1Event> PatchNamespacedEventAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedEvent");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedEvent");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedEvent: " + response.Content, response.Content);

            return (V1Event) ApiClient.Deserialize(response, typeof(V1Event));
        }
        
        /// <summary>
        /// list or watch objects of kind LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1LimitRangeList</returns>            
        public V1LimitRangeList ListNamespacedLimitRange_4 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedLimitRange_4");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange_4: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange_4: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRangeList) ApiClient.Deserialize(response, typeof(V1LimitRangeList));
        }
    
        /// <summary>
        /// list or watch objects of kind LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1LimitRangeList</returns>
        public async System.Threading.Tasks.Task<V1LimitRangeList> ListNamespacedLimitRange_4Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedLimitRange_4");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedLimitRange_4: " + response.Content, response.Content);

            return (V1LimitRangeList) ApiClient.Deserialize(response, typeof(V1LimitRangeList));
        }
        
        /// <summary>
        /// create a LimitRange 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1LimitRange</returns>            
        public V1LimitRange CreateNamespacedLimitRange (V1LimitRange body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedLimitRange");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
    
        /// <summary>
        /// create a LimitRange 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        public async System.Threading.Tasks.Task<V1LimitRange> CreateNamespacedLimitRangeAsync (V1LimitRange body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedLimitRange");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
        
        /// <summary>
        /// delete collection of LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedLimitRange (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedLimitRangeAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedLimitRange: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1LimitRange</returns>            
        public V1LimitRange ReadNamespacedLimitRange (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
    
        /// <summary>
        /// read the specified LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1LimitRange</returns>
        public async System.Threading.Tasks.Task<V1LimitRange> ReadNamespacedLimitRangeAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
        
        /// <summary>
        /// replace the specified LimitRange 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1LimitRange</returns>            
        public V1LimitRange ReplaceNamespacedLimitRange (V1LimitRange body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedLimitRange");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
    
        /// <summary>
        /// replace the specified LimitRange 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        public async System.Threading.Tasks.Task<V1LimitRange> ReplaceNamespacedLimitRangeAsync (V1LimitRange body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedLimitRange");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
        
        /// <summary>
        /// delete a LimitRange 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedLimitRange (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedLimitRange");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a LimitRange 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedLimitRangeAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedLimitRange");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedLimitRange: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified LimitRange 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1LimitRange</returns>            
        public V1LimitRange PatchNamespacedLimitRange (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedLimitRange");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
    
        /// <summary>
        /// partially update the specified LimitRange 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1LimitRange</returns>
        public async System.Threading.Tasks.Task<V1LimitRange> PatchNamespacedLimitRangeAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedLimitRange");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedLimitRange");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedLimitRange: " + response.Content, response.Content);

            return (V1LimitRange) ApiClient.Deserialize(response, typeof(V1LimitRange));
        }
        
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PersistentVolumeClaimList</returns>            
        public V1PersistentVolumeClaimList ListNamespacedPersistentVolumeClaim (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaimList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaimList));
        }
    
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaimList> ListNamespacedPersistentVolumeClaimAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaimList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaimList));
        }
        
        /// <summary>
        /// create a PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim CreateNamespacedPersistentVolumeClaim (V1PersistentVolumeClaim body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPersistentVolumeClaim");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// create a PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> CreateNamespacedPersistentVolumeClaimAsync (V1PersistentVolumeClaim body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPersistentVolumeClaim");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// delete collection of PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedPersistentVolumeClaim (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedPersistentVolumeClaimAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim ReadNamespacedPersistentVolumeClaim (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// read the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReadNamespacedPersistentVolumeClaimAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// replace the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaim (V1PersistentVolumeClaim body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeClaim");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// replace the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimAsync (V1PersistentVolumeClaim body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeClaim");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// delete a PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedPersistentVolumeClaim (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPersistentVolumeClaim");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPersistentVolumeClaimAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPersistentVolumeClaim");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim PatchNamespacedPersistentVolumeClaim (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPersistentVolumeClaim");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// partially update the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> PatchNamespacedPersistentVolumeClaimAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPersistentVolumeClaim");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// replace status of the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolumeClaim</returns>            
        public V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaimStatus (V1PersistentVolumeClaim body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaimStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaimStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
    
        /// <summary>
        /// replace status of the specified PersistentVolumeClaim 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolumeClaim</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimStatusAsync (V1PersistentVolumeClaim body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPersistentVolumeClaimStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPersistentVolumeClaimStatus: " + response.Content, response.Content);

            return (V1PersistentVolumeClaim) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaim));
        }
        
        /// <summary>
        /// list or watch objects of kind Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PodList</returns>            
        public V1PodList ListNamespacedPod (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodList) ApiClient.Deserialize(response, typeof(V1PodList));
        }
    
        /// <summary>
        /// list or watch objects of kind Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        public async System.Threading.Tasks.Task<V1PodList> ListNamespacedPodAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod: " + response.Content, response.Content);

            return (V1PodList) ApiClient.Deserialize(response, typeof(V1PodList));
        }
        
        /// <summary>
        /// create a Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod CreateNamespacedPod (V1Pod body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPod");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// create a Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> CreateNamespacedPodAsync (V1Pod body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPod");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPod: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// delete collection of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedPod (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedPodAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPod: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod ReadNamespacedPod (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// read the specified Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> ReadNamespacedPodAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPod: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// replace the specified Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod ReplaceNamespacedPod (V1Pod body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPod");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// replace the specified Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> ReplaceNamespacedPodAsync (V1Pod body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPod");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPod: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// delete a Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedPod (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPod");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPodAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPod");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPod: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod PatchNamespacedPod (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPod");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// partially update the specified Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> PatchNamespacedPodAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPod");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPod");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPod: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// connect GET requests to attach of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param> 
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param> 
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param> 
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param> 
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodAttach (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodAttach");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodAttach");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/attach";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodAttach: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodAttach: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to attach of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodAttachAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodAttach");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodAttach");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/attach";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodAttach: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to attach of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param> 
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param> 
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param> 
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param> 
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodAttach (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodAttach");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodAttach");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/attach";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodAttach: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodAttach: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to attach of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="stderr">Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.</param>
        /// <param name="container">The container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodAttachAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodAttach");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodAttach");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/attach";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodAttach: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// create binding of a Binding 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Binding</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Binding</returns>            
        public V1Binding CreateNamespacedBindingBinding (V1Binding body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedBindingBinding");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedBindingBinding");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling CreateNamespacedBindingBinding");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/binding";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBindingBinding: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBindingBinding: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Binding) ApiClient.Deserialize(response, typeof(V1Binding));
        }
    
        /// <summary>
        /// create binding of a Binding 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Binding</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Binding</returns>
        public async System.Threading.Tasks.Task<V1Binding> CreateNamespacedBindingBindingAsync (V1Binding body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedBindingBinding");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedBindingBinding");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling CreateNamespacedBindingBinding");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/binding";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedBindingBinding: " + response.Content, response.Content);

            return (V1Binding) ApiClient.Deserialize(response, typeof(V1Binding));
        }
        
        /// <summary>
        /// connect GET requests to exec of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param> 
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param> 
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param> 
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param> 
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param> 
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodExec (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodExec");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodExec");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/exec";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (command != null) queryParams.Add("command", ApiClient.ParameterToString(command)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodExec: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodExec: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to exec of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodExecAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodExec");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodExec");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/exec";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (command != null) queryParams.Add("command", ApiClient.ParameterToString(command)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodExec: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to exec of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param> 
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param> 
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param> 
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param> 
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param> 
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodExec (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodExec");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodExec");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/exec";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (command != null) queryParams.Add("command", ApiClient.ParameterToString(command)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodExec: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodExec: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to exec of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="stdin">Redirect the standard input stream of the pod for this call. Defaults to false.</param>
        /// <param name="stdout">Redirect the standard output stream of the pod for this call. Defaults to true.</param>
        /// <param name="stderr">Redirect the standard error stream of the pod for this call. Defaults to true.</param>
        /// <param name="tty">TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.</param>
        /// <param name="container">Container in which to execute the command. Defaults to only container if there is only one container in the pod.</param>
        /// <param name="command">Command is the remote command to execute. argv array. Not executed within a shell.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodExecAsync (string _namespace, string name, bool? stdin, bool? stdout, bool? stderr, bool? tty, string container, string command)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodExec");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodExec");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/exec";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (stdin != null) queryParams.Add("stdin", ApiClient.ParameterToString(stdin)); // query parameter
            if (stdout != null) queryParams.Add("stdout", ApiClient.ParameterToString(stdout)); // query parameter
            if (stderr != null) queryParams.Add("stderr", ApiClient.ParameterToString(stderr)); // query parameter
            if (tty != null) queryParams.Add("tty", ApiClient.ParameterToString(tty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (command != null) queryParams.Add("command", ApiClient.ParameterToString(command)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodExec: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// read log of the specified Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="container">The container for which to stream logs. Defaults to only container if there is one container in the pod.</param> 
        /// <param name="follow">Follow the log stream of the pod. Defaults to false.</param> 
        /// <param name="previous">Return previous terminated container logs. Defaults to false.</param> 
        /// <param name="sinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param> 
        /// <param name="sinceTime">An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param> 
        /// <param name="timestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.</param> 
        /// <param name="tailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime</param> 
        /// <param name="limitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod ReadNamespacedPodLog (string _namespace, string name, string pretty, string container, bool? follow, bool? previous, int? sinceSeconds, string sinceTime, bool? timestamps, int? tailLines, int? limitBytes)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPodLog");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPodLog");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/log";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (follow != null) queryParams.Add("follow", ApiClient.ParameterToString(follow)); // query parameter
            if (previous != null) queryParams.Add("previous", ApiClient.ParameterToString(previous)); // query parameter
            if (sinceSeconds != null) queryParams.Add("sinceSeconds", ApiClient.ParameterToString(sinceSeconds)); // query parameter
            if (sinceTime != null) queryParams.Add("sinceTime", ApiClient.ParameterToString(sinceTime)); // query parameter
            if (timestamps != null) queryParams.Add("timestamps", ApiClient.ParameterToString(timestamps)); // query parameter
            if (tailLines != null) queryParams.Add("tailLines", ApiClient.ParameterToString(tailLines)); // query parameter
            if (limitBytes != null) queryParams.Add("limitBytes", ApiClient.ParameterToString(limitBytes)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodLog: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodLog: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// read log of the specified Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="container">The container for which to stream logs. Defaults to only container if there is one container in the pod.</param>
        /// <param name="follow">Follow the log stream of the pod. Defaults to false.</param>
        /// <param name="previous">Return previous terminated container logs. Defaults to false.</param>
        /// <param name="sinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="sinceTime">An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.</param>
        /// <param name="timestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.</param>
        /// <param name="tailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime</param>
        /// <param name="limitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> ReadNamespacedPodLogAsync (string _namespace, string name, string pretty, string container, bool? follow, bool? previous, int? sinceSeconds, string sinceTime, bool? timestamps, int? tailLines, int? limitBytes)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPodLog");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPodLog");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/log";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (container != null) queryParams.Add("container", ApiClient.ParameterToString(container)); // query parameter
            if (follow != null) queryParams.Add("follow", ApiClient.ParameterToString(follow)); // query parameter
            if (previous != null) queryParams.Add("previous", ApiClient.ParameterToString(previous)); // query parameter
            if (sinceSeconds != null) queryParams.Add("sinceSeconds", ApiClient.ParameterToString(sinceSeconds)); // query parameter
            if (sinceTime != null) queryParams.Add("sinceTime", ApiClient.ParameterToString(sinceTime)); // query parameter
            if (timestamps != null) queryParams.Add("timestamps", ApiClient.ParameterToString(timestamps)); // query parameter
            if (tailLines != null) queryParams.Add("tailLines", ApiClient.ParameterToString(tailLines)); // query parameter
            if (limitBytes != null) queryParams.Add("limitBytes", ApiClient.ParameterToString(limitBytes)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodLog: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// connect GET requests to portforward of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodPortforward (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodPortforward");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodPortforward");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/portforward";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodPortforward: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodPortforward: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to portforward of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodPortforwardAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodPortforward");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodPortforward");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/portforward";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodPortforward: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to portforward of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodPortforward (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodPortforward");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodPortforward");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/portforward";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodPortforward: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodPortforward: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to portforward of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodPortforwardAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodPortforward");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodPortforward");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/portforward";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodPortforward: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect GET requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect HEAD requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectHeadNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect HEAD requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectHeadNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect PUT requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPutNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect PUT requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPutNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect DELETE requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectDeleteNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect DELETE requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectDeleteNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectOptionsNamespacedPodProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedPodProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectOptionsNamespacedPodProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedPodProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedPodProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect GET requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedPodProxy_5 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodProxy_5");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodProxy_5");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectGetNamespacedPodProxy_5");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy_5: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy_5: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedPodProxy_5Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedPodProxy_5");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedPodProxy_5");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectGetNamespacedPodProxy_5");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedPodProxy_5: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect HEAD requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectHeadNamespacedPodProxy_6 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedPodProxy_6");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedPodProxy_6");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectHeadNamespacedPodProxy_6");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy_6: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy_6: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect HEAD requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectHeadNamespacedPodProxy_6Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedPodProxy_6");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedPodProxy_6");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectHeadNamespacedPodProxy_6");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedPodProxy_6: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect PUT requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPutNamespacedPodProxy_7 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedPodProxy_7");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedPodProxy_7");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPutNamespacedPodProxy_7");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy_7: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy_7: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect PUT requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPutNamespacedPodProxy_7Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedPodProxy_7");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedPodProxy_7");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPutNamespacedPodProxy_7");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedPodProxy_7: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedPodProxy_8 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodProxy_8");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodProxy_8");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPostNamespacedPodProxy_8");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy_8: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy_8: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedPodProxy_8Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedPodProxy_8");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedPodProxy_8");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPostNamespacedPodProxy_8");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedPodProxy_8: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect DELETE requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectDeleteNamespacedPodProxy_9 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedPodProxy_9");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedPodProxy_9");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectDeleteNamespacedPodProxy_9");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy_9: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy_9: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect DELETE requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectDeleteNamespacedPodProxy_9Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedPodProxy_9");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedPodProxy_9");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectDeleteNamespacedPodProxy_9");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedPodProxy_9: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param> 
        /// <returns>string</returns>            
        public string ConnectOptionsNamespacedPodProxy_10 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedPodProxy_10");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedPodProxy_10");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectOptionsNamespacedPodProxy_10");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy_10: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy_10: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect OPTIONS requests to proxy of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to pod.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectOptionsNamespacedPodProxy_10Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedPodProxy_10");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedPodProxy_10");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectOptionsNamespacedPodProxy_10");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedPodProxy_10: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// replace status of the specified Pod 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Pod</returns>            
        public V1Pod ReplaceNamespacedPodStatus (V1Pod body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPodStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPodStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPodStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
    
        /// <summary>
        /// replace status of the specified Pod 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Pod</returns>
        public async System.Threading.Tasks.Task<V1Pod> ReplaceNamespacedPodStatusAsync (V1Pod body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPodStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPodStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPodStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/pods/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodStatus: " + response.Content, response.Content);

            return (V1Pod) ApiClient.Deserialize(response, typeof(V1Pod));
        }
        
        /// <summary>
        /// list or watch objects of kind PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PodTemplateList</returns>            
        public V1PodTemplateList ListNamespacedPodTemplate (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplateList) ApiClient.Deserialize(response, typeof(V1PodTemplateList));
        }
    
        /// <summary>
        /// list or watch objects of kind PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        public async System.Threading.Tasks.Task<V1PodTemplateList> ListNamespacedPodTemplateAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplateList) ApiClient.Deserialize(response, typeof(V1PodTemplateList));
        }
        
        /// <summary>
        /// create a PodTemplate 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PodTemplate</returns>            
        public V1PodTemplate CreateNamespacedPodTemplate (V1PodTemplate body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPodTemplate");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
    
        /// <summary>
        /// create a PodTemplate 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        public async System.Threading.Tasks.Task<V1PodTemplate> CreateNamespacedPodTemplateAsync (V1PodTemplate body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedPodTemplate");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
        
        /// <summary>
        /// delete collection of PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedPodTemplate (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedPodTemplateAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedPodTemplate: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1PodTemplate</returns>            
        public V1PodTemplate ReadNamespacedPodTemplate (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
    
        /// <summary>
        /// read the specified PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PodTemplate</returns>
        public async System.Threading.Tasks.Task<V1PodTemplate> ReadNamespacedPodTemplateAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
        
        /// <summary>
        /// replace the specified PodTemplate 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PodTemplate</returns>            
        public V1PodTemplate ReplaceNamespacedPodTemplate (V1PodTemplate body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPodTemplate");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
    
        /// <summary>
        /// replace the specified PodTemplate 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        public async System.Threading.Tasks.Task<V1PodTemplate> ReplaceNamespacedPodTemplateAsync (V1PodTemplate body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedPodTemplate");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
        
        /// <summary>
        /// delete a PodTemplate 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedPodTemplate (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPodTemplate");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a PodTemplate 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedPodTemplateAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedPodTemplate");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedPodTemplate: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified PodTemplate 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PodTemplate</returns>            
        public V1PodTemplate PatchNamespacedPodTemplate (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPodTemplate");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
    
        /// <summary>
        /// partially update the specified PodTemplate 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PodTemplate</returns>
        public async System.Threading.Tasks.Task<V1PodTemplate> PatchNamespacedPodTemplateAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedPodTemplate");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedPodTemplate: " + response.Content, response.Content);

            return (V1PodTemplate) ApiClient.Deserialize(response, typeof(V1PodTemplate));
        }
        
        /// <summary>
        /// list or watch objects of kind ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ReplicationControllerList</returns>            
        public V1ReplicationControllerList ListNamespacedReplicationController (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationControllerList) ApiClient.Deserialize(response, typeof(V1ReplicationControllerList));
        }
    
        /// <summary>
        /// list or watch objects of kind ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        public async System.Threading.Tasks.Task<V1ReplicationControllerList> ListNamespacedReplicationControllerAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationControllerList) ApiClient.Deserialize(response, typeof(V1ReplicationControllerList));
        }
        
        /// <summary>
        /// create a ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController CreateNamespacedReplicationController (V1ReplicationController body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedReplicationController");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// create a ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> CreateNamespacedReplicationControllerAsync (V1ReplicationController body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedReplicationController");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// delete collection of ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedReplicationController (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedReplicationControllerAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedReplicationController: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController ReadNamespacedReplicationController (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// read the specified ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> ReadNamespacedReplicationControllerAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// replace the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController ReplaceNamespacedReplicationController (V1ReplicationController body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedReplicationController");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// replace the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> ReplaceNamespacedReplicationControllerAsync (V1ReplicationController body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedReplicationController");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// delete a ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedReplicationController (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedReplicationController");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedReplicationControllerAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedReplicationController");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedReplicationController: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController PatchNamespacedReplicationController (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedReplicationController");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// partially update the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> PatchNamespacedReplicationControllerAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedReplicationController");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedReplicationController");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedReplicationController: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// read scale of the specified Scale 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Scale</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Scale</returns>            
        public V1Scale ReadNamespacedScaleScale (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedScaleScale");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedScaleScale");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedScaleScale: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedScaleScale: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Scale) ApiClient.Deserialize(response, typeof(V1Scale));
        }
    
        /// <summary>
        /// read scale of the specified Scale 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        public async System.Threading.Tasks.Task<V1Scale> ReadNamespacedScaleScaleAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedScaleScale");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedScaleScale");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedScaleScale: " + response.Content, response.Content);

            return (V1Scale) ApiClient.Deserialize(response, typeof(V1Scale));
        }
        
        /// <summary>
        /// replace scale of the specified Scale 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Scale</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Scale</returns>            
        public V1Scale ReplaceNamespacedScaleScale (V1Scale body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedScaleScale");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedScaleScale");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedScaleScale");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedScaleScale: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedScaleScale: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Scale) ApiClient.Deserialize(response, typeof(V1Scale));
        }
    
        /// <summary>
        /// replace scale of the specified Scale 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        public async System.Threading.Tasks.Task<V1Scale> ReplaceNamespacedScaleScaleAsync (V1Scale body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedScaleScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedScaleScale");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedScaleScale");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedScaleScale: " + response.Content, response.Content);

            return (V1Scale) ApiClient.Deserialize(response, typeof(V1Scale));
        }
        
        /// <summary>
        /// partially update scale of the specified Scale 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Scale</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Scale</returns>            
        public V1Scale PatchNamespacedScaleScale (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedScaleScale");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedScaleScale");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedScaleScale");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedScaleScale: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedScaleScale: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Scale) ApiClient.Deserialize(response, typeof(V1Scale));
        }
    
        /// <summary>
        /// partially update scale of the specified Scale 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Scale</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Scale</returns>
        public async System.Threading.Tasks.Task<V1Scale> PatchNamespacedScaleScaleAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedScaleScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedScaleScale");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedScaleScale");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedScaleScale: " + response.Content, response.Content);

            return (V1Scale) ApiClient.Deserialize(response, typeof(V1Scale));
        }
        
        /// <summary>
        /// replace status of the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ReplicationController</returns>            
        public V1ReplicationController ReplaceNamespacedReplicationControllerStatus (V1ReplicationController body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedReplicationControllerStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedReplicationControllerStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedReplicationControllerStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationControllerStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationControllerStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
    
        /// <summary>
        /// replace status of the specified ReplicationController 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ReplicationController</returns>
        public async System.Threading.Tasks.Task<V1ReplicationController> ReplaceNamespacedReplicationControllerStatusAsync (V1ReplicationController body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedReplicationControllerStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedReplicationControllerStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedReplicationControllerStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedReplicationControllerStatus: " + response.Content, response.Content);

            return (V1ReplicationController) ApiClient.Deserialize(response, typeof(V1ReplicationController));
        }
        
        /// <summary>
        /// list or watch objects of kind ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ResourceQuotaList</returns>            
        public V1ResourceQuotaList ListNamespacedResourceQuota (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuotaList) ApiClient.Deserialize(response, typeof(V1ResourceQuotaList));
        }
    
        /// <summary>
        /// list or watch objects of kind ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuotaList> ListNamespacedResourceQuotaAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuotaList) ApiClient.Deserialize(response, typeof(V1ResourceQuotaList));
        }
        
        /// <summary>
        /// create a ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota CreateNamespacedResourceQuota (V1ResourceQuota body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedResourceQuota");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// create a ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> CreateNamespacedResourceQuotaAsync (V1ResourceQuota body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedResourceQuota");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// delete collection of ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedResourceQuota (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedResourceQuotaAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedResourceQuota: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota ReadNamespacedResourceQuota (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// read the specified ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> ReadNamespacedResourceQuotaAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// replace the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota ReplaceNamespacedResourceQuota (V1ResourceQuota body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedResourceQuota");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// replace the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaAsync (V1ResourceQuota body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedResourceQuota");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// delete a ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedResourceQuota (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedResourceQuota");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedResourceQuotaAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedResourceQuota");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedResourceQuota: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota PatchNamespacedResourceQuota (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedResourceQuota");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// partially update the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> PatchNamespacedResourceQuotaAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedResourceQuota");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedResourceQuota: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// replace status of the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ResourceQuota</returns>            
        public V1ResourceQuota ReplaceNamespacedResourceQuotaStatus (V1ResourceQuota body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedResourceQuotaStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedResourceQuotaStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedResourceQuotaStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuotaStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuotaStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
    
        /// <summary>
        /// replace status of the specified ResourceQuota 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ResourceQuota</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuota> ReplaceNamespacedResourceQuotaStatusAsync (V1ResourceQuota body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedResourceQuotaStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedResourceQuotaStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedResourceQuotaStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedResourceQuotaStatus: " + response.Content, response.Content);

            return (V1ResourceQuota) ApiClient.Deserialize(response, typeof(V1ResourceQuota));
        }
        
        /// <summary>
        /// list or watch objects of kind Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1SecretList</returns>            
        public V1SecretList ListNamespacedSecret (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1SecretList) ApiClient.Deserialize(response, typeof(V1SecretList));
        }
    
        /// <summary>
        /// list or watch objects of kind Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        public async System.Threading.Tasks.Task<V1SecretList> ListNamespacedSecretAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret: " + response.Content, response.Content);

            return (V1SecretList) ApiClient.Deserialize(response, typeof(V1SecretList));
        }
        
        /// <summary>
        /// create a Secret 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Secret</returns>            
        public V1Secret CreateNamespacedSecret (V1Secret body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedSecret");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
    
        /// <summary>
        /// create a Secret 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        public async System.Threading.Tasks.Task<V1Secret> CreateNamespacedSecretAsync (V1Secret body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedSecret");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedSecret: " + response.Content, response.Content);

            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
        
        /// <summary>
        /// delete collection of Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedSecret (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedSecretAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedSecret: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1Secret</returns>            
        public V1Secret ReadNamespacedSecret (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
    
        /// <summary>
        /// read the specified Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Secret</returns>
        public async System.Threading.Tasks.Task<V1Secret> ReadNamespacedSecretAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedSecret: " + response.Content, response.Content);

            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
        
        /// <summary>
        /// replace the specified Secret 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Secret</returns>            
        public V1Secret ReplaceNamespacedSecret (V1Secret body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedSecret");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
    
        /// <summary>
        /// replace the specified Secret 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        public async System.Threading.Tasks.Task<V1Secret> ReplaceNamespacedSecretAsync (V1Secret body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedSecret");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedSecret: " + response.Content, response.Content);

            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
        
        /// <summary>
        /// delete a Secret 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedSecret (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedSecret");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Secret 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedSecretAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedSecret");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedSecret: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Secret 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Secret</returns>            
        public V1Secret PatchNamespacedSecret (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedSecret");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
    
        /// <summary>
        /// partially update the specified Secret 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Secret</returns>
        public async System.Threading.Tasks.Task<V1Secret> PatchNamespacedSecretAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedSecret");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedSecret");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedSecret: " + response.Content, response.Content);

            return (V1Secret) ApiClient.Deserialize(response, typeof(V1Secret));
        }
        
        /// <summary>
        /// list or watch objects of kind ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ServiceAccountList</returns>            
        public V1ServiceAccountList ListNamespacedServiceAccount (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccountList) ApiClient.Deserialize(response, typeof(V1ServiceAccountList));
        }
    
        /// <summary>
        /// list or watch objects of kind ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccountList> ListNamespacedServiceAccountAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccountList) ApiClient.Deserialize(response, typeof(V1ServiceAccountList));
        }
        
        /// <summary>
        /// create a ServiceAccount 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ServiceAccount</returns>            
        public V1ServiceAccount CreateNamespacedServiceAccount (V1ServiceAccount body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedServiceAccount");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
    
        /// <summary>
        /// create a ServiceAccount 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccount> CreateNamespacedServiceAccountAsync (V1ServiceAccount body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedServiceAccount");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
        
        /// <summary>
        /// delete collection of ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedServiceAccount (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedServiceAccountAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedServiceAccount: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1ServiceAccount</returns>            
        public V1ServiceAccount ReadNamespacedServiceAccount (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
    
        /// <summary>
        /// read the specified ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1ServiceAccount</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccount> ReadNamespacedServiceAccountAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
        
        /// <summary>
        /// replace the specified ServiceAccount 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ServiceAccount</returns>            
        public V1ServiceAccount ReplaceNamespacedServiceAccount (V1ServiceAccount body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedServiceAccount");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
    
        /// <summary>
        /// replace the specified ServiceAccount 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccount> ReplaceNamespacedServiceAccountAsync (V1ServiceAccount body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedServiceAccount");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
        
        /// <summary>
        /// delete a ServiceAccount 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedServiceAccount (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedServiceAccount");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a ServiceAccount 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedServiceAccountAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedServiceAccount");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedServiceAccount: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified ServiceAccount 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1ServiceAccount</returns>            
        public V1ServiceAccount PatchNamespacedServiceAccount (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedServiceAccount");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
    
        /// <summary>
        /// partially update the specified ServiceAccount 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1ServiceAccount</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccount> PatchNamespacedServiceAccountAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedServiceAccount");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedServiceAccount: " + response.Content, response.Content);

            return (V1ServiceAccount) ApiClient.Deserialize(response, typeof(V1ServiceAccount));
        }
        
        /// <summary>
        /// list or watch objects of kind Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ServiceList</returns>            
        public V1ServiceList ListNamespacedService (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceList) ApiClient.Deserialize(response, typeof(V1ServiceList));
        }
    
        /// <summary>
        /// list or watch objects of kind Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        public async System.Threading.Tasks.Task<V1ServiceList> ListNamespacedServiceAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService: " + response.Content, response.Content);

            return (V1ServiceList) ApiClient.Deserialize(response, typeof(V1ServiceList));
        }
        
        /// <summary>
        /// create a Service 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Service</returns>            
        public V1Service CreateNamespacedService (V1Service body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedService");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// create a Service 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> CreateNamespacedServiceAsync (V1Service body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedService");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedService: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// read the specified Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1Service</returns>            
        public V1Service ReadNamespacedService (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// read the specified Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> ReadNamespacedServiceAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedService: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// replace the specified Service 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Service</returns>            
        public V1Service ReplaceNamespacedService (V1Service body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedService");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// replace the specified Service 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> ReplaceNamespacedServiceAsync (V1Service body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedService");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedService: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// delete a Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedService (string _namespace, string name, string pretty)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedServiceAsync (string _namespace, string name, string pretty)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedService: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Service 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Service</returns>            
        public V1Service PatchNamespacedService (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedService");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// partially update the specified Service 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> PatchNamespacedServiceAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedService");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedService");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedService: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// connect GET requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedServiceProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedServiceProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedServiceProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedServiceProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedServiceProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedServiceProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedServiceProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect HEAD requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectHeadNamespacedServiceProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedServiceProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedServiceProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedServiceProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect HEAD requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectHeadNamespacedServiceProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedServiceProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedServiceProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect PUT requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectPutNamespacedServiceProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedServiceProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedServiceProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedServiceProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect PUT requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPutNamespacedServiceProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedServiceProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedServiceProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedServiceProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedServiceProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedServiceProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedServiceProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedServiceProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedServiceProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedServiceProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect DELETE requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectDeleteNamespacedServiceProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedServiceProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedServiceProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedServiceProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect DELETE requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectDeleteNamespacedServiceProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedServiceProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedServiceProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectOptionsNamespacedServiceProxy (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedServiceProxy");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedServiceProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedServiceProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect OPTIONS requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectOptionsNamespacedServiceProxyAsync (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedServiceProxy");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedServiceProxy");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedServiceProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect GET requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNamespacedServiceProxy_11 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedServiceProxy_11");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedServiceProxy_11");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectGetNamespacedServiceProxy_11");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedServiceProxy_11: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedServiceProxy_11: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNamespacedServiceProxy_11Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectGetNamespacedServiceProxy_11");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNamespacedServiceProxy_11");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectGetNamespacedServiceProxy_11");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNamespacedServiceProxy_11: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect HEAD requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectHeadNamespacedServiceProxy_12 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedServiceProxy_12");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedServiceProxy_12");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectHeadNamespacedServiceProxy_12");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedServiceProxy_12: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedServiceProxy_12: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect HEAD requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectHeadNamespacedServiceProxy_12Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectHeadNamespacedServiceProxy_12");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNamespacedServiceProxy_12");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectHeadNamespacedServiceProxy_12");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNamespacedServiceProxy_12: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect PUT requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectPutNamespacedServiceProxy_13 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedServiceProxy_13");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedServiceProxy_13");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPutNamespacedServiceProxy_13");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedServiceProxy_13: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedServiceProxy_13: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect PUT requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPutNamespacedServiceProxy_13Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPutNamespacedServiceProxy_13");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNamespacedServiceProxy_13");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPutNamespacedServiceProxy_13");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNamespacedServiceProxy_13: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNamespacedServiceProxy_14 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedServiceProxy_14");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedServiceProxy_14");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPostNamespacedServiceProxy_14");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedServiceProxy_14: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedServiceProxy_14: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNamespacedServiceProxy_14Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectPostNamespacedServiceProxy_14");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNamespacedServiceProxy_14");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPostNamespacedServiceProxy_14");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNamespacedServiceProxy_14: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect DELETE requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectDeleteNamespacedServiceProxy_15 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedServiceProxy_15");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedServiceProxy_15");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectDeleteNamespacedServiceProxy_15");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedServiceProxy_15: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedServiceProxy_15: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect DELETE requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectDeleteNamespacedServiceProxy_15Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectDeleteNamespacedServiceProxy_15");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNamespacedServiceProxy_15");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectDeleteNamespacedServiceProxy_15");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNamespacedServiceProxy_15: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param> 
        /// <returns>string</returns>            
        public string ConnectOptionsNamespacedServiceProxy_16 (string _namespace, string name, string path2, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedServiceProxy_16");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedServiceProxy_16");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectOptionsNamespacedServiceProxy_16");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedServiceProxy_16: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedServiceProxy_16: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect OPTIONS requests to proxy of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectOptionsNamespacedServiceProxy_16Async (string _namespace, string name, string path2, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ConnectOptionsNamespacedServiceProxy_16");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNamespacedServiceProxy_16");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectOptionsNamespacedServiceProxy_16");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNamespacedServiceProxy_16: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// replace status of the specified Service 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Service</returns>            
        public V1Service ReplaceNamespacedServiceStatus (V1Service body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedServiceStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedServiceStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedServiceStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
    
        /// <summary>
        /// replace status of the specified Service 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Service</returns>
        public async System.Threading.Tasks.Task<V1Service> ReplaceNamespacedServiceStatusAsync (V1Service body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedServiceStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedServiceStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedServiceStatus");
            
    
            var path_ = "/api/v1/namespaces/{namespace}/services/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedServiceStatus: " + response.Content, response.Content);

            return (V1Service) ApiClient.Deserialize(response, typeof(V1Service));
        }
        
        /// <summary>
        /// read the specified Namespace 
        /// </summary>
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace ReadNamespace (string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// read the specified Namespace 
        /// </summary>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> ReadNamespaceAsync (string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespace: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// replace the specified Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace ReplaceNamespace (V1Namespace body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespace");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// replace the specified Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> ReplaceNamespaceAsync (V1Namespace body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespace");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespace: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// delete a Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespace (V1DeleteOptions body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespace");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespaceAsync (V1DeleteOptions body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespace");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespace: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace PatchNamespace (UnversionedPatch body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespace");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// partially update the specified Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> PatchNamespaceAsync (UnversionedPatch body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespace");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespace");
            
    
            var path_ = "/api/v1/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespace: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// replace finalize of the specified Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace ReplaceNamespaceFinalize (V1Namespace body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespaceFinalize");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespaceFinalize");
            
    
            var path_ = "/api/v1/namespaces/{name}/finalize";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespaceFinalize: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespaceFinalize: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// replace finalize of the specified Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> ReplaceNamespaceFinalizeAsync (V1Namespace body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespaceFinalize");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespaceFinalize");
            
    
            var path_ = "/api/v1/namespaces/{name}/finalize";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespaceFinalize: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// replace status of the specified Namespace 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Namespace</returns>            
        public V1Namespace ReplaceNamespaceStatus (V1Namespace body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespaceStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespaceStatus");
            
    
            var path_ = "/api/v1/namespaces/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespaceStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespaceStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
    
        /// <summary>
        /// replace status of the specified Namespace 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Namespace</returns>
        public async System.Threading.Tasks.Task<V1Namespace> ReplaceNamespaceStatusAsync (V1Namespace body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespaceStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespaceStatus");
            
    
            var path_ = "/api/v1/namespaces/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespaceStatus: " + response.Content, response.Content);

            return (V1Namespace) ApiClient.Deserialize(response, typeof(V1Namespace));
        }
        
        /// <summary>
        /// list or watch objects of kind Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1NodeList</returns>            
        public V1NodeList ListNode (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1NodeList) ApiClient.Deserialize(response, typeof(V1NodeList));
        }
    
        /// <summary>
        /// list or watch objects of kind Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1NodeList</returns>
        public async System.Threading.Tasks.Task<V1NodeList> ListNodeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNode: " + response.Content, response.Content);

            return (V1NodeList) ApiClient.Deserialize(response, typeof(V1NodeList));
        }
        
        /// <summary>
        /// create a Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node CreateNode (V1Node body, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNode");
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// create a Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> CreateNodeAsync (V1Node body, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNode");
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNode: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// delete collection of Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNode (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNodeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNode: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1Node</returns>            
        public V1Node ReadNode (string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// read the specified Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> ReadNodeAsync (string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNode: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// replace the specified Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node ReplaceNode (V1Node body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNode");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// replace the specified Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> ReplaceNodeAsync (V1Node body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNode");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNode: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// delete a Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNode (V1DeleteOptions body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNode");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNodeAsync (V1DeleteOptions body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNode");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNode: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node PatchNode (UnversionedPatch body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNode");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// partially update the specified Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> PatchNodeAsync (UnversionedPatch body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNode");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNode");
            
    
            var path_ = "/api/v1/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNode: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// connect GET requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNodeProxy (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNodeProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNodeProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNodeProxyAsync (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNodeProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect HEAD requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectHeadNodeProxy (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNodeProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNodeProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect HEAD requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectHeadNodeProxyAsync (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNodeProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect PUT requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectPutNodeProxy (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNodeProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNodeProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect PUT requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPutNodeProxyAsync (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNodeProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNodeProxy (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNodeProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNodeProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNodeProxyAsync (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNodeProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect DELETE requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectDeleteNodeProxy (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNodeProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNodeProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect DELETE requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectDeleteNodeProxyAsync (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNodeProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectOptionsNodeProxy (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNodeProxy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNodeProxy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect OPTIONS requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectOptionsNodeProxyAsync (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNodeProxy");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNodeProxy: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect GET requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectGetNodeProxy_17 (string name, string path2, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNodeProxy_17");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectGetNodeProxy_17");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNodeProxy_17: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNodeProxy_17: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect GET requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectGetNodeProxy_17Async (string name, string path2, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectGetNodeProxy_17");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectGetNodeProxy_17");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectGetNodeProxy_17: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect HEAD requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectHeadNodeProxy_18 (string name, string path2, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNodeProxy_18");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectHeadNodeProxy_18");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNodeProxy_18: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNodeProxy_18: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect HEAD requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectHeadNodeProxy_18Async (string name, string path2, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectHeadNodeProxy_18");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectHeadNodeProxy_18");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectHeadNodeProxy_18: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect PUT requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectPutNodeProxy_19 (string name, string path2, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNodeProxy_19");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPutNodeProxy_19");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNodeProxy_19: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNodeProxy_19: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect PUT requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPutNodeProxy_19Async (string name, string path2, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPutNodeProxy_19");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPutNodeProxy_19");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPutNodeProxy_19: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect POST requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectPostNodeProxy_20 (string name, string path2, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNodeProxy_20");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPostNodeProxy_20");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNodeProxy_20: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNodeProxy_20: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect POST requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectPostNodeProxy_20Async (string name, string path2, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectPostNodeProxy_20");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectPostNodeProxy_20");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectPostNodeProxy_20: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect DELETE requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectDeleteNodeProxy_21 (string name, string path2, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNodeProxy_21");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectDeleteNodeProxy_21");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNodeProxy_21: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNodeProxy_21: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect DELETE requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectDeleteNodeProxy_21Async (string name, string path2, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectDeleteNodeProxy_21");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectDeleteNodeProxy_21");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectDeleteNodeProxy_21: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// connect OPTIONS requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path2">path to the resource</param> 
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param> 
        /// <returns>string</returns>            
        public string ConnectOptionsNodeProxy_22 (string name, string path2, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNodeProxy_22");
            
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectOptionsNodeProxy_22");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNodeProxy_22: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNodeProxy_22: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// connect OPTIONS requests to proxy of Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path2">path to the resource</param>
        /// <param name="path">Path is the URL path to use for the current proxy request to node.</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ConnectOptionsNodeProxy_22Async (string name, string path2, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ConnectOptionsNodeProxy_22");
            // verify the required parameter 'path2' is set
            if (path2 == null) throw new ApiException(400, "Missing required parameter 'path2' when calling ConnectOptionsNodeProxy_22");
            
    
            var path_ = "/api/v1/nodes/{name}/proxy/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path2 != null) pathParams.Add("path", ApiClient.ParameterToString(path2)); // path parameter
            
            if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ConnectOptionsNodeProxy_22: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// replace status of the specified Node 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Node</returns>            
        public V1Node ReplaceNodeStatus (V1Node body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNodeStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNodeStatus");
            
    
            var path_ = "/api/v1/nodes/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNodeStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNodeStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
    
        /// <summary>
        /// replace status of the specified Node 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Node</returns>
        public async System.Threading.Tasks.Task<V1Node> ReplaceNodeStatusAsync (V1Node body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNodeStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNodeStatus");
            
    
            var path_ = "/api/v1/nodes/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNodeStatus: " + response.Content, response.Content);

            return (V1Node) ApiClient.Deserialize(response, typeof(V1Node));
        }
        
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PersistentVolumeClaimList</returns>            
        public V1PersistentVolumeClaimList ListNamespacedPersistentVolumeClaim_23 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim_23: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim_23: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeClaimList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaimList));
        }
    
        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeClaimList</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeClaimList> ListNamespacedPersistentVolumeClaim_23Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPersistentVolumeClaim_23: " + response.Content, response.Content);

            return (V1PersistentVolumeClaimList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeClaimList));
        }
        
        /// <summary>
        /// list or watch objects of kind PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PersistentVolumeList</returns>            
        public V1PersistentVolumeList ListPersistentVolume (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolumeList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeList));
        }
    
        /// <summary>
        /// list or watch objects of kind PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PersistentVolumeList</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolumeList> ListPersistentVolumeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListPersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolumeList) ApiClient.Deserialize(response, typeof(V1PersistentVolumeList));
        }
        
        /// <summary>
        /// create a PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume CreatePersistentVolume (V1PersistentVolume body, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreatePersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreatePersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreatePersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// create a PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> CreatePersistentVolumeAsync (V1PersistentVolume body, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreatePersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreatePersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// delete collection of PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionPersistentVolume (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionPersistentVolumeAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionPersistentVolume: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified PersistentVolume 
        /// </summary>
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume ReadPersistentVolume (string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// read the specified PersistentVolume 
        /// </summary>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> ReadPersistentVolumeAsync (string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadPersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// replace the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume ReplacePersistentVolume (V1PersistentVolume body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplacePersistentVolume");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplacePersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplacePersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplacePersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// replace the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> ReplacePersistentVolumeAsync (V1PersistentVolume body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplacePersistentVolume");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplacePersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplacePersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// delete a PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletePersistentVolume (V1DeleteOptions body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeletePersistentVolume");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeletePersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletePersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletePersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletePersistentVolumeAsync (V1DeleteOptions body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeletePersistentVolume");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeletePersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletePersistentVolume: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume PatchPersistentVolume (UnversionedPatch body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchPersistentVolume");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// partially update the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> PatchPersistentVolumeAsync (UnversionedPatch body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchPersistentVolume");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchPersistentVolume");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchPersistentVolume: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// replace status of the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1PersistentVolume</returns>            
        public V1PersistentVolume ReplacePersistentVolumeStatus (V1PersistentVolume body, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplacePersistentVolumeStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplacePersistentVolumeStatus");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplacePersistentVolumeStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplacePersistentVolumeStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
    
        /// <summary>
        /// replace status of the specified PersistentVolume 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1PersistentVolume</returns>
        public async System.Threading.Tasks.Task<V1PersistentVolume> ReplacePersistentVolumeStatusAsync (V1PersistentVolume body, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplacePersistentVolumeStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplacePersistentVolumeStatus");
            
    
            var path_ = "/api/v1/persistentvolumes/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplacePersistentVolumeStatus: " + response.Content, response.Content);

            return (V1PersistentVolume) ApiClient.Deserialize(response, typeof(V1PersistentVolume));
        }
        
        /// <summary>
        /// list or watch objects of kind Pod 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PodList</returns>            
        public V1PodList ListNamespacedPod_24 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod_24: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod_24: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodList) ApiClient.Deserialize(response, typeof(V1PodList));
        }
    
        /// <summary>
        /// list or watch objects of kind Pod 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodList</returns>
        public async System.Threading.Tasks.Task<V1PodList> ListNamespacedPod_24Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPod_24: " + response.Content, response.Content);

            return (V1PodList) ApiClient.Deserialize(response, typeof(V1PodList));
        }
        
        /// <summary>
        /// list or watch objects of kind PodTemplate 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1PodTemplateList</returns>            
        public V1PodTemplateList ListNamespacedPodTemplate_25 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate_25: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate_25: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1PodTemplateList) ApiClient.Deserialize(response, typeof(V1PodTemplateList));
        }
    
        /// <summary>
        /// list or watch objects of kind PodTemplate 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1PodTemplateList</returns>
        public async System.Threading.Tasks.Task<V1PodTemplateList> ListNamespacedPodTemplate_25Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedPodTemplate_25: " + response.Content, response.Content);

            return (V1PodTemplateList) ApiClient.Deserialize(response, typeof(V1PodTemplateList));
        }
        
        /// <summary>
        /// proxy GET requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedPod (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedPodAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedPod");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedPod_26 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedPod_26");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedPod_26");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedPod_26");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod_26: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod_26: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedPod_26Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedPod_26");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedPod_26");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedPod_26");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedPod_26: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedPod_27 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedPod_27");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedPod_27");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedPod_27");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod_27: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod_27: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedPod_27Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedPod_27");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedPod_27");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedPod_27");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedPod_27: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedPod_28 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedPod_28");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedPod_28");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedPod_28");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod_28: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod_28: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedPod_28Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedPod_28");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedPod_28");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedPod_28");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedPod_28: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedPod_29 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedPod_29");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedPod_29");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedPod_29");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod_29: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod_29: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedPod_29Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedPod_29");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedPod_29");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedPod_29");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedPod_29: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedPod_30 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedPod_30");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedPod_30");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedPod_30");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod_30: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod_30: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedPod_30Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedPod_30");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedPod_30");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedPod_30");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedPod_30: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedPod_31 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedPod_31");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedPod_31");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedPod_31");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod_31: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod_31: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedPod_31Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedPod_31");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedPod_31");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedPod_31");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedPod_31: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedService (string _namespace, string name)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedServiceAsync (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedService");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyGETNamespacedService_32 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedService_32");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedService_32");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedService_32");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService_32: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService_32: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNamespacedService_32Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyGETNamespacedService_32");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNamespacedService_32");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNamespacedService_32");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNamespacedService_32: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNamespacedService_33 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedService_33");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedService_33");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedService_33");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService_33: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService_33: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNamespacedService_33Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyHEADNamespacedService_33");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNamespacedService_33");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNamespacedService_33");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNamespacedService_33: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNamespacedService_34 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedService_34");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedService_34");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedService_34");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService_34: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService_34: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNamespacedService_34Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPUTNamespacedService_34");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNamespacedService_34");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNamespacedService_34");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNamespacedService_34: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNamespacedService_35 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedService_35");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedService_35");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedService_35");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService_35: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService_35: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNamespacedService_35Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyPOSTNamespacedService_35");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNamespacedService_35");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNamespacedService_35");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNamespacedService_35: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENamespacedService_36 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedService_36");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedService_36");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedService_36");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService_36: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService_36: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENamespacedService_36Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyDELETENamespacedService_36");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENamespacedService_36");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENamespacedService_36");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENamespacedService_36: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNamespacedService_37 (string _namespace, string name, string path)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedService_37");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedService_37");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedService_37");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService_37: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService_37: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNamespacedService_37Async (string _namespace, string name, string path)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ProxyOPTIONSNamespacedService_37");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNamespacedService_37");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNamespacedService_37");
            
    
            var path_ = "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNamespacedService_37: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyGETNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNode (string name)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNodeAsync (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNode");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNode: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy GET requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyGETNode_38 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNode_38");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNode_38");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNode_38: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNode_38: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy GET requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyGETNode_38Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyGETNode_38");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyGETNode_38");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyGETNode_38: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy HEAD requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyHEADNode_39 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNode_39");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNode_39");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNode_39: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNode_39: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy HEAD requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyHEADNode_39Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyHEADNode_39");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyHEADNode_39");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.HEAD, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyHEADNode_39: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy PUT requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPUTNode_40 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNode_40");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNode_40");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNode_40: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNode_40: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy PUT requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPUTNode_40Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPUTNode_40");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPUTNode_40");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPUTNode_40: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy POST requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyPOSTNode_41 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNode_41");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNode_41");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNode_41: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNode_41: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy POST requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyPOSTNode_41Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyPOSTNode_41");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyPOSTNode_41");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyPOSTNode_41: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy DELETE requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyDELETENode_42 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENode_42");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENode_42");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENode_42: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENode_42: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy DELETE requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyDELETENode_42Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyDELETENode_42");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyDELETENode_42");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyDELETENode_42: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// proxy OPTIONS requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="path">path to the resource</param> 
        /// <returns>string</returns>            
        public string ProxyOPTIONSNode_43 (string name, string path)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNode_43");
            
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNode_43");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNode_43: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNode_43: " + response.ErrorMessage, response.ErrorMessage);
    
            return (string) ApiClient.Deserialize(response, typeof(string));
        }
    
        /// <summary>
        /// proxy OPTIONS requests to Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="path">path to the resource</param>
        /// <returns>string</returns>
        public async System.Threading.Tasks.Task<string> ProxyOPTIONSNode_43Async (string name, string path)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ProxyOPTIONSNode_43");
            // verify the required parameter 'path' is set
            if (path == null) throw new ApiException(400, "Missing required parameter 'path' when calling ProxyOPTIONSNode_43");
            
    
            var path_ = "/api/v1/proxy/nodes/{name}/{path}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "*/*"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            if (path != null) pathParams.Add("path", ApiClient.ParameterToString(path)); // path parameter
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.OPTIONS, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ProxyOPTIONSNode_43: " + response.Content, response.Content);

            return (string) ApiClient.Deserialize(response, typeof(string));
        }
        
        /// <summary>
        /// list or watch objects of kind ReplicationController 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ReplicationControllerList</returns>            
        public V1ReplicationControllerList ListNamespacedReplicationController_44 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController_44: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController_44: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ReplicationControllerList) ApiClient.Deserialize(response, typeof(V1ReplicationControllerList));
        }
    
        /// <summary>
        /// list or watch objects of kind ReplicationController 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ReplicationControllerList</returns>
        public async System.Threading.Tasks.Task<V1ReplicationControllerList> ListNamespacedReplicationController_44Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedReplicationController_44: " + response.Content, response.Content);

            return (V1ReplicationControllerList) ApiClient.Deserialize(response, typeof(V1ReplicationControllerList));
        }
        
        /// <summary>
        /// list or watch objects of kind ResourceQuota 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ResourceQuotaList</returns>            
        public V1ResourceQuotaList ListNamespacedResourceQuota_45 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota_45: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota_45: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ResourceQuotaList) ApiClient.Deserialize(response, typeof(V1ResourceQuotaList));
        }
    
        /// <summary>
        /// list or watch objects of kind ResourceQuota 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ResourceQuotaList</returns>
        public async System.Threading.Tasks.Task<V1ResourceQuotaList> ListNamespacedResourceQuota_45Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedResourceQuota_45: " + response.Content, response.Content);

            return (V1ResourceQuotaList) ApiClient.Deserialize(response, typeof(V1ResourceQuotaList));
        }
        
        /// <summary>
        /// list or watch objects of kind Secret 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1SecretList</returns>            
        public V1SecretList ListNamespacedSecret_46 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret_46: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret_46: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1SecretList) ApiClient.Deserialize(response, typeof(V1SecretList));
        }
    
        /// <summary>
        /// list or watch objects of kind Secret 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1SecretList</returns>
        public async System.Threading.Tasks.Task<V1SecretList> ListNamespacedSecret_46Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedSecret_46: " + response.Content, response.Content);

            return (V1SecretList) ApiClient.Deserialize(response, typeof(V1SecretList));
        }
        
        /// <summary>
        /// list or watch objects of kind ServiceAccount 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ServiceAccountList</returns>            
        public V1ServiceAccountList ListNamespacedServiceAccount_47 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount_47: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount_47: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceAccountList) ApiClient.Deserialize(response, typeof(V1ServiceAccountList));
        }
    
        /// <summary>
        /// list or watch objects of kind ServiceAccount 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceAccountList</returns>
        public async System.Threading.Tasks.Task<V1ServiceAccountList> ListNamespacedServiceAccount_47Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedServiceAccount_47: " + response.Content, response.Content);

            return (V1ServiceAccountList) ApiClient.Deserialize(response, typeof(V1ServiceAccountList));
        }
        
        /// <summary>
        /// list or watch objects of kind Service 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1ServiceList</returns>            
        public V1ServiceList ListNamespacedService_48 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService_48: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService_48: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1ServiceList) ApiClient.Deserialize(response, typeof(V1ServiceList));
        }
    
        /// <summary>
        /// list or watch objects of kind Service 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1ServiceList</returns>
        public async System.Threading.Tasks.Task<V1ServiceList> ListNamespacedService_48Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedService_48: " + response.Content, response.Content);

            return (V1ServiceList) ApiClient.Deserialize(response, typeof(V1ServiceList));
        }
        
        /// <summary>
        /// watch individual changes to a list of ConfigMap 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedConfigMapList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMapList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMapList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ConfigMap 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedConfigMapListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMapList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Endpoints 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEndpointsList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Endpoints 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Event 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEventList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Event 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of LimitRange 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedLimitRangeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of LimitRange 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespaceList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespaceList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespaceList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Namespace 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespaceListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/namespaces";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespaceList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedConfigMapList_49 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedConfigMapList_49");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMapList_49: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMapList_49: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedConfigMapList_49Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedConfigMapList_49");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/configmaps";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMapList_49: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ConfigMap</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedConfigMap (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedConfigMap");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedConfigMap");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind ConfigMap 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ConfigMap</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedConfigMapAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedConfigMap");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedConfigMap");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/configmaps/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedConfigMap: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEndpointsList_50 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEndpointsList_50");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList_50: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList_50: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsList_50Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEndpointsList_50");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/endpoints";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpointsList_50: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Endpoints</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEndpoints (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEndpoints");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedEndpoints");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpoints: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpoints: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Endpoints 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Endpoints</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEndpointsAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEndpoints");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedEndpoints");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/endpoints/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEndpoints: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEventList_51 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEventList_51");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList_51: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList_51: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventList_51Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEventList_51");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/events";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEventList_51: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Event</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedEvent (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEvent");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedEvent");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Event 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Event</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedEventAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedEvent");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedEvent");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/events/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedEvent: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedLimitRangeList_52 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedLimitRangeList_52");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList_52: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList_52: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeList_52Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedLimitRangeList_52");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/limitranges";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRangeList_52: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the LimitRange</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedLimitRange (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedLimitRange");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedLimitRange");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRange: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRange: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind LimitRange 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the LimitRange</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedLimitRangeAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedLimitRange");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedLimitRange");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/limitranges/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedLimitRange: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPersistentVolumeClaimList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPersistentVolumeClaimList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPersistentVolumeClaimList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PersistentVolumeClaim</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPersistentVolumeClaim (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPersistentVolumeClaim");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaim: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaim: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PersistentVolumeClaim</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPersistentVolumeClaim");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPersistentVolumeClaim");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaim: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPodList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Pod</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPod (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPod");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPod");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPod: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPod: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Pod 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Pod</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPod");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPod");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/pods/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPod: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPodTemplateList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodTemplateList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodTemplateList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the PodTemplate</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPodTemplate (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodTemplate");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplate: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplate: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind PodTemplate 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the PodTemplate</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedPodTemplate");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedPodTemplate");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplate: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedReplicationControllerList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedReplicationControllerList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedReplicationControllerList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ReplicationController</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedReplicationController (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedReplicationController");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedReplicationController");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind ReplicationController 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ReplicationController</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedReplicationController");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedReplicationController");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationController: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedResourceQuotaList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedResourceQuotaList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedResourceQuotaList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ResourceQuota</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedResourceQuota (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedResourceQuota");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuota: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuota: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind ResourceQuota 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ResourceQuota</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedResourceQuota");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedResourceQuota");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuota: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedSecretList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedSecretList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedSecretList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Secret</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedSecret (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedSecret");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedSecret");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecret: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecret: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Secret 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Secret</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedSecret");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedSecret");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/secrets/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecret: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedServiceAccountList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceAccountList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceAccountList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the ServiceAccount</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedServiceAccount (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceAccount");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccount: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccount: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind ServiceAccount 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the ServiceAccount</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceAccount");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedServiceAccount");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccount: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedServiceList (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceListAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedServiceList");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Service</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedService (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedService");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedService");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Service 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Service</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedService");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedService");
            
    
            var path_ = "/api/v1/watch/namespaces/{namespace}/services/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedService: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Namespace 
        /// </summary>
        /// <param name="name">name of the Namespace</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespace (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespace");
            
    
            var path_ = "/api/v1/watch/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespace: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespace: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Namespace 
        /// </summary>
        /// <param name="name">name of the Namespace</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespaceAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespace");
            
    
            var path_ = "/api/v1/watch/namespaces/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespace: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNodeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNodeList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNodeList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Node 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNodeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/nodes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNodeList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Node 
        /// </summary>
        /// <param name="name">name of the Node</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNode (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNode");
            
    
            var path_ = "/api/v1/watch/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNode: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNode: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Node 
        /// </summary>
        /// <param name="name">name of the Node</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNodeAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNode");
            
    
            var path_ = "/api/v1/watch/nodes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNode: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPersistentVolumeClaimList_53 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList_53: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList_53: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPersistentVolumeClaimList_53Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/persistentvolumeclaims";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPersistentVolumeClaimList_53: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchPersistentVolumeList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolumeList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolumeList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PersistentVolume 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchPersistentVolumeListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/persistentvolumes";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolumeList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind PersistentVolume 
        /// </summary>
        /// <param name="name">name of the PersistentVolume</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchPersistentVolume (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchPersistentVolume");
            
    
            var path_ = "/api/v1/watch/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolume: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolume: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind PersistentVolume 
        /// </summary>
        /// <param name="name">name of the PersistentVolume</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchPersistentVolumeAsync (string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchPersistentVolume");
            
    
            var path_ = "/api/v1/watch/persistentvolumes/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchPersistentVolume: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Pod 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPodList_54 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList_54: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList_54: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Pod 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodList_54Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/pods";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodList_54: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of PodTemplate 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedPodTemplateList_55 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList_55: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList_55: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of PodTemplate 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedPodTemplateList_55Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/podtemplates";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedPodTemplateList_55: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ReplicationController 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedReplicationControllerList_56 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList_56: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList_56: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ReplicationController 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedReplicationControllerList_56Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/replicationcontrollers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedReplicationControllerList_56: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ResourceQuota 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedResourceQuotaList_57 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList_57: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList_57: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ResourceQuota 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedResourceQuotaList_57Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/resourcequotas";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedResourceQuotaList_57: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Secret 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedSecretList_58 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList_58: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList_58: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Secret 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedSecretList_58Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/secrets";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedSecretList_58: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of ServiceAccount 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedServiceAccountList_59 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList_59: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList_59: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of ServiceAccount 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceAccountList_59Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/serviceaccounts";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceAccountList_59: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Service 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedServiceList_60 (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList_60: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList_60: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Service 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedServiceList_60Async (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/api/v1/watch/services";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedServiceList_60: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// get available resources 
        /// </summary>
        /// <returns>UnversionedAPIResourceList</returns>            
        public UnversionedAPIResourceList GetAPIResources_61 ()
        {
            
    
            var path_ = "/apis/autoscaling/v1";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources_61: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources_61: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedAPIResourceList) ApiClient.Deserialize(response, typeof(UnversionedAPIResourceList));
        }
    
        /// <summary>
        /// get available resources 
        /// </summary>
        /// <returns>UnversionedAPIResourceList</returns>
        public async System.Threading.Tasks.Task<UnversionedAPIResourceList> GetAPIResources_61Async ()
        {
            
    
            var path_ = "/apis/autoscaling/v1";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources_61: " + response.Content, response.Content);

            return (UnversionedAPIResourceList) ApiClient.Deserialize(response, typeof(UnversionedAPIResourceList));
        }
        
        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1HorizontalPodAutoscalerList</returns>            
        public V1HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/apis/autoscaling/v1/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedHorizontalPodAutoscaler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1HorizontalPodAutoscalerList) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscalerList));
        }
    
        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1HorizontalPodAutoscalerList</returns>
        public async System.Threading.Tasks.Task<V1HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscalerAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/apis/autoscaling/v1/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);

            return (V1HorizontalPodAutoscalerList) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscalerList));
        }
        
        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1HorizontalPodAutoscalerList</returns>            
        public V1HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler_62 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedHorizontalPodAutoscaler_62");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedHorizontalPodAutoscaler_62: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedHorizontalPodAutoscaler_62: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1HorizontalPodAutoscalerList) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscalerList));
        }
    
        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1HorizontalPodAutoscalerList</returns>
        public async System.Threading.Tasks.Task<V1HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscaler_62Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedHorizontalPodAutoscaler_62");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedHorizontalPodAutoscaler_62: " + response.Content, response.Content);

            return (V1HorizontalPodAutoscalerList) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscalerList));
        }
        
        /// <summary>
        /// create a HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1HorizontalPodAutoscaler</returns>            
        public V1HorizontalPodAutoscaler CreateNamespacedHorizontalPodAutoscaler (V1HorizontalPodAutoscaler body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedHorizontalPodAutoscaler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
    
        /// <summary>
        /// create a HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        public async System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> CreateNamespacedHorizontalPodAutoscalerAsync (V1HorizontalPodAutoscaler body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedHorizontalPodAutoscaler");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);

            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
        
        /// <summary>
        /// delete collection of HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedHorizontalPodAutoscaler (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedHorizontalPodAutoscaler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedHorizontalPodAutoscalerAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the HorizontalPodAutoscaler</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1HorizontalPodAutoscaler</returns>            
        public V1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscaler (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedHorizontalPodAutoscaler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
    
        /// <summary>
        /// read the specified HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        public async System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedHorizontalPodAutoscaler");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);

            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
        
        /// <summary>
        /// replace the specified HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the HorizontalPodAutoscaler</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1HorizontalPodAutoscaler</returns>            
        public V1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscaler (V1HorizontalPodAutoscaler body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedHorizontalPodAutoscaler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
    
        /// <summary>
        /// replace the specified HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        public async System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerAsync (V1HorizontalPodAutoscaler body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedHorizontalPodAutoscaler");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedHorizontalPodAutoscaler");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);

            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
        
        /// <summary>
        /// delete a HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the HorizontalPodAutoscaler</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedHorizontalPodAutoscaler (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedHorizontalPodAutoscaler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedHorizontalPodAutoscalerAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedHorizontalPodAutoscaler");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedHorizontalPodAutoscaler");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the HorizontalPodAutoscaler</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1HorizontalPodAutoscaler</returns>            
        public V1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscaler (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedHorizontalPodAutoscaler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
    
        /// <summary>
        /// partially update the specified HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        public async System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedHorizontalPodAutoscaler");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedHorizontalPodAutoscaler");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);

            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
        
        /// <summary>
        /// replace status of the specified HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the HorizontalPodAutoscaler</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1HorizontalPodAutoscaler</returns>            
        public V1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscalerStatus (V1HorizontalPodAutoscaler body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedHorizontalPodAutoscalerStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedHorizontalPodAutoscalerStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedHorizontalPodAutoscalerStatus");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedHorizontalPodAutoscalerStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedHorizontalPodAutoscalerStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
    
        /// <summary>
        /// replace status of the specified HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1HorizontalPodAutoscaler</returns>
        public async System.Threading.Tasks.Task<V1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerStatusAsync (V1HorizontalPodAutoscaler body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedHorizontalPodAutoscalerStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedHorizontalPodAutoscalerStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedHorizontalPodAutoscalerStatus");
            
    
            var path_ = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedHorizontalPodAutoscalerStatus: " + response.Content, response.Content);

            return (V1HorizontalPodAutoscaler) ApiClient.Deserialize(response, typeof(V1HorizontalPodAutoscaler));
        }
        
        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedHorizontalPodAutoscalerList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/apis/autoscaling/v1/watch/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscalerList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscalerList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedHorizontalPodAutoscalerListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/apis/autoscaling/v1/watch/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscalerList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedHorizontalPodAutoscalerList_63 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedHorizontalPodAutoscalerList_63");
            
    
            var path_ = "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscalerList_63: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscalerList_63: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedHorizontalPodAutoscalerList_63Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedHorizontalPodAutoscalerList_63");
            
    
            var path_ = "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscalerList_63: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the HorizontalPodAutoscaler</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedHorizontalPodAutoscaler (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedHorizontalPodAutoscaler");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscaler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind HorizontalPodAutoscaler 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the HorizontalPodAutoscaler</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedHorizontalPodAutoscalerAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedHorizontalPodAutoscaler");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedHorizontalPodAutoscaler");
            
    
            var path_ = "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedHorizontalPodAutoscaler: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// get available resources 
        /// </summary>
        /// <returns>UnversionedAPIResourceList</returns>            
        public UnversionedAPIResourceList GetAPIResources_64 ()
        {
            
    
            var path_ = "/apis/batch/v1";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources_64: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources_64: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedAPIResourceList) ApiClient.Deserialize(response, typeof(UnversionedAPIResourceList));
        }
    
        /// <summary>
        /// get available resources 
        /// </summary>
        /// <returns>UnversionedAPIResourceList</returns>
        public async System.Threading.Tasks.Task<UnversionedAPIResourceList> GetAPIResources_64Async ()
        {
            
    
            var path_ = "/apis/batch/v1";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetAPIResources_64: " + response.Content, response.Content);

            return (UnversionedAPIResourceList) ApiClient.Deserialize(response, typeof(UnversionedAPIResourceList));
        }
        
        /// <summary>
        /// list or watch objects of kind Job 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1JobList</returns>            
        public V1JobList ListNamespacedJob (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/apis/batch/v1/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1JobList) ApiClient.Deserialize(response, typeof(V1JobList));
        }
    
        /// <summary>
        /// list or watch objects of kind Job 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1JobList</returns>
        public async System.Threading.Tasks.Task<V1JobList> ListNamespacedJobAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/apis/batch/v1/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedJob: " + response.Content, response.Content);

            return (V1JobList) ApiClient.Deserialize(response, typeof(V1JobList));
        }
        
        /// <summary>
        /// list or watch objects of kind Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>V1JobList</returns>            
        public V1JobList ListNamespacedJob_65 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedJob_65");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedJob_65: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedJob_65: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1JobList) ApiClient.Deserialize(response, typeof(V1JobList));
        }
    
        /// <summary>
        /// list or watch objects of kind Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>V1JobList</returns>
        public async System.Threading.Tasks.Task<V1JobList> ListNamespacedJob_65Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ListNamespacedJob_65");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ListNamespacedJob_65: " + response.Content, response.Content);

            return (V1JobList) ApiClient.Deserialize(response, typeof(V1JobList));
        }
        
        /// <summary>
        /// create a Job 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Job</returns>            
        public V1Job CreateNamespacedJob (V1Job body, string _namespace, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedJob");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
    
        /// <summary>
        /// create a Job 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        public async System.Threading.Tasks.Task<V1Job> CreateNamespacedJobAsync (V1Job body, string _namespace, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling CreateNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling CreateNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateNamespacedJob: " + response.Content, response.Content);

            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
        
        /// <summary>
        /// delete collection of Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeletecollectionNamespacedJob (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete collection of Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeletecollectionNamespacedJobAsync (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeletecollectionNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletecollectionNamespacedJob: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// read the specified Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Job</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param> 
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param> 
        /// <returns>V1Job</returns>            
        public V1Job ReadNamespacedJob (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedJob");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
    
        /// <summary>
        /// read the specified Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify.</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;</param>
        /// <returns>V1Job</returns>
        public async System.Threading.Tasks.Task<V1Job> ReadNamespacedJobAsync (string _namespace, string name, string pretty, bool? export, bool? exact)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReadNamespacedJob");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReadNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (export != null) queryParams.Add("export", ApiClient.ParameterToString(export)); // query parameter
            if (exact != null) queryParams.Add("exact", ApiClient.ParameterToString(exact)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReadNamespacedJob: " + response.Content, response.Content);

            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
        
        /// <summary>
        /// replace the specified Job 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Job</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Job</returns>            
        public V1Job ReplaceNamespacedJob (V1Job body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedJob");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedJob");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
    
        /// <summary>
        /// replace the specified Job 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        public async System.Threading.Tasks.Task<V1Job> ReplaceNamespacedJobAsync (V1Job body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedJob");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedJob: " + response.Content, response.Content);

            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
        
        /// <summary>
        /// delete a Job 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Job</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>UnversionedStatus</returns>            
        public UnversionedStatus DeleteNamespacedJob (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedJob");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedJob");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
    
        /// <summary>
        /// delete a Job 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedJobAsync (V1DeleteOptions body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling DeleteNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling DeleteNamespacedJob");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling DeleteNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteNamespacedJob: " + response.Content, response.Content);

            return (UnversionedStatus) ApiClient.Deserialize(response, typeof(UnversionedStatus));
        }
        
        /// <summary>
        /// partially update the specified Job 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Job</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Job</returns>            
        public V1Job PatchNamespacedJob (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedJob");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedJob");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
    
        /// <summary>
        /// partially update the specified Job 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        public async System.Threading.Tasks.Task<V1Job> PatchNamespacedJobAsync (UnversionedPatch body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling PatchNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling PatchNamespacedJob");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PatchNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PatchNamespacedJob: " + response.Content, response.Content);

            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
        
        /// <summary>
        /// replace status of the specified Job 
        /// </summary>
        /// <param name="body"></param> 
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Job</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <returns>V1Job</returns>            
        public V1Job ReplaceNamespacedJobStatus (V1Job body, string _namespace, string name, string pretty)
        {
            
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedJobStatus");
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedJobStatus");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedJobStatus");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedJobStatus: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedJobStatus: " + response.ErrorMessage, response.ErrorMessage);
    
            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
    
        /// <summary>
        /// replace status of the specified Job 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <returns>V1Job</returns>
        public async System.Threading.Tasks.Task<V1Job> ReplaceNamespacedJobStatusAsync (V1Job body, string _namespace, string name, string pretty)
        {
            // verify the required parameter 'body' is set
            if (body == null) throw new ApiException(400, "Missing required parameter 'body' when calling ReplaceNamespacedJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling ReplaceNamespacedJobStatus");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling ReplaceNamespacedJobStatus");
            
    
            var path_ = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json", "application/yaml"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            
            
            
            postBody = ApiClient.Serialize(body); // http body (model) parameter
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.PUT, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ReplaceNamespacedJobStatus: " + response.Content, response.Content);

            return (V1Job) ApiClient.Deserialize(response, typeof(V1Job));
        }
        
        /// <summary>
        /// watch individual changes to a list of Job 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedJobList (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/apis/batch/v1/watch/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJobList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJobList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Job 
        /// </summary>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedJobListAsync (string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
    
            var path_ = "/apis/batch/v1/watch/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJobList: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch individual changes to a list of Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedJobList_66 (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedJobList_66");
            
    
            var path_ = "/apis/batch/v1/watch/namespaces/{namespace}/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJobList_66: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJobList_66: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch individual changes to a list of Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedJobList_66Async (string _namespace, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedJobList_66");
            
    
            var path_ = "/apis/batch/v1/watch/namespaces/{namespace}/jobs";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJobList_66: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
        /// <summary>
        /// watch changes to an object of kind Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param> 
        /// <param name="name">name of the Job</param> 
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param> 
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param> 
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param> 
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param> 
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param> 
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param> 
        /// <returns>JsonWatchEvent</returns>            
        public JsonWatchEvent WatchNamespacedJob (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedJob");
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
    
        /// <summary>
        /// watch changes to an object of kind Job 
        /// </summary>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="name">name of the Job</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed.</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything.</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything.</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call.</param>
        /// <returns>JsonWatchEvent</returns>
        public async System.Threading.Tasks.Task<JsonWatchEvent> WatchNamespacedJobAsync (string _namespace, string name, string pretty, string labelSelector, string fieldSelector, bool? watch, string resourceVersion, int? timeoutSeconds)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null) throw new ApiException(400, "Missing required parameter '_namespace' when calling WatchNamespacedJob");
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling WatchNamespacedJob");
            
    
            var path_ = "/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                "application/json"
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            if (_namespace != null) pathParams.Add("namespace", ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) pathParams.Add("name", ApiClient.ParameterToString(name)); // path parameter
            
            if (pretty != null) queryParams.Add("pretty", ApiClient.ParameterToString(pretty)); // query parameter
            if (labelSelector != null) queryParams.Add("labelSelector", ApiClient.ParameterToString(labelSelector)); // query parameter
            if (fieldSelector != null) queryParams.Add("fieldSelector", ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (watch != null) queryParams.Add("watch", ApiClient.ParameterToString(watch)); // query parameter
            if (resourceVersion != null) queryParams.Add("resourceVersion", ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) queryParams.Add("timeoutSeconds", ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            
            
            
            
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) await ApiClient.CallApiAsync(path_, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, pathParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling WatchNamespacedJob: " + response.Content, response.Content);

            return (JsonWatchEvent) ApiClient.Deserialize(response, typeof(JsonWatchEvent));
        }
        
    }
    
}
