{
  "host": "10.10.10.10:6443",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Title was not specified",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "api",
      "description": "get available API versions"
    },
    {
      "name": "apis",
      "description": "get available API versions"
    },
    {
      "name": "extensions",
      "description": "get information of a group"
    },
    {
      "name": "v1",
      "description": "API at /api/v1"
    },
    {
      "name": "v1beta1",
      "description": "API at /apis/extensions/v1beta1"
    },
    {
      "name": "version",
      "description": "git code version from which this is built"
    }
  ],
  "paths": {
    "/api": {
      "get": {
        "tags": [
          "api"
        ],
        "operationId": "getAPIVersions",
        "summary": "get available API versions",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        }
      }
    },
    "/apis": {
      "get": {
        "tags": [
          "apis"
        ],
        "operationId": "getAPIVersions",
        "summary": "get available API versions",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        }
      }
    },
    "/apis/extensions": {
      "get": {
        "tags": [
          "extensions"
        ],
        "operationId": "getAPIGroup",
        "summary": "get information of a group",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/bindings": {
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedBinding",
        "summary": "create a Binding",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Binding"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Binding"
            }
          }
        }
      }
    },
    "/api/v1/componentstatuses": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedComponentStatus",
        "summary": "list objects of kind ComponentStatus",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ComponentStatusList"
            }
          }
        }
      }
    },
    "/api/v1/componentstatuses/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedComponentStatus",
        "summary": "read the specified ComponentStatus",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ComponentStatus",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ComponentStatus"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/endpoints": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedEndpoints",
        "summary": "list or watch objects of kind Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.EndpointsList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedEndpoints",
        "summary": "create a Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Endpoints"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Endpoints"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/endpoints": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedEndpointsList",
        "summary": "watch individual changes to a list of Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/endpoints/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedEndpoints",
        "summary": "read the specified Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Endpoints",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Endpoints"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedEndpoints",
        "summary": "replace the specified Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Endpoints"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Endpoints",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Endpoints"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedEndpoints",
        "summary": "partially update the specified Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Endpoints",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Endpoints"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedEndpoints",
        "summary": "delete a Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Endpoints",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/endpoints/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedEndpoints",
        "summary": "watch changes to an object of kind Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Endpoints",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/endpoints": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listEndpoints",
        "summary": "list or watch objects of kind Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.EndpointsList"
            }
          }
        }
      }
    },
    "/api/v1/watch/endpoints": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchEndpointsList",
        "summary": "watch individual changes to a list of Endpoints",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/events": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedEvent",
        "summary": "list or watch objects of kind Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.EventList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedEvent",
        "summary": "create a Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Event"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Event"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/events": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedEventList",
        "summary": "watch individual changes to a list of Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/events/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedEvent",
        "summary": "read the specified Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Event",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Event"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedEvent",
        "summary": "replace the specified Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Event"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Event",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Event"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedEvent",
        "summary": "partially update the specified Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Event",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Event"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedEvent",
        "summary": "delete a Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Event",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/events/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedEvent",
        "summary": "watch changes to an object of kind Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Event",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/events": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listEvent",
        "summary": "list or watch objects of kind Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.EventList"
            }
          }
        }
      }
    },
    "/api/v1/watch/events": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchEventList",
        "summary": "watch individual changes to a list of Event",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/limitranges": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedLimitRange",
        "summary": "list or watch objects of kind LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.LimitRangeList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedLimitRange",
        "summary": "create a LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.LimitRange"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.LimitRange"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/limitranges": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedLimitRangeList",
        "summary": "watch individual changes to a list of LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/limitranges/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedLimitRange",
        "summary": "read the specified LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the LimitRange",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.LimitRange"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedLimitRange",
        "summary": "replace the specified LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.LimitRange"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the LimitRange",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.LimitRange"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedLimitRange",
        "summary": "partially update the specified LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the LimitRange",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.LimitRange"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedLimitRange",
        "summary": "delete a LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the LimitRange",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/limitranges/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedLimitRange",
        "summary": "watch changes to an object of kind LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the LimitRange",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/limitranges": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listLimitRange",
        "summary": "list or watch objects of kind LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.LimitRangeList"
            }
          }
        }
      }
    },
    "/api/v1/watch/limitranges": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchLimitRangeList",
        "summary": "watch individual changes to a list of LimitRange",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedNamespace",
        "summary": "list or watch objects of kind Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NamespaceList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedNamespace",
        "summary": "create a Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedNamespaceList",
        "summary": "watch individual changes to a list of Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedNamespace",
        "summary": "read the specified Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Namespace",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedNamespace",
        "summary": "replace the specified Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          {
            "in": "path",
            "description": "name of the Namespace",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedNamespace",
        "summary": "partially update the specified Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "name of the Namespace",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedNamespace",
        "summary": "delete a Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "name of the Namespace",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedNamespace",
        "summary": "watch changes to an object of kind Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "name of the Namespace",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{name}/finalize": {
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedNamespaceFinalize",
        "summary": "replace finalize of the specified Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          {
            "in": "path",
            "description": "name of the Namespace",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{name}/status": {
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedNamespaceStatus",
        "summary": "replace status of the specified Namespace",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          {
            "in": "path",
            "description": "name of the Namespace",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      }
    },
    "/api/v1/nodes": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedNode",
        "summary": "list or watch objects of kind Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NodeList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedNode",
        "summary": "create a Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          }
        }
      }
    },
    "/api/v1/watch/nodes": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedNodeList",
        "summary": "watch individual changes to a list of Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/nodes/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedNode",
        "summary": "read the specified Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedNode",
        "summary": "replace the specified Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          },
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedNode",
        "summary": "partially update the specified Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedNode",
        "summary": "delete a Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/nodes/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedNode",
        "summary": "watch changes to an object of kind Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/proxy/nodes/{name}/{path:*}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyGETNamespacedNode",
        "summary": "proxy GET requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPUTNamespacedNode",
        "summary": "proxy PUT requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPOSTNamespacedNode",
        "summary": "proxy POST requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyDELETENamespacedNode",
        "summary": "proxy DELETE requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "head": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyHEADNamespacedNode",
        "summary": "proxy HEAD requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "options": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyOPTIONSNamespacedNode",
        "summary": "proxy OPTIONS requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/proxy/nodes/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyGETNamespacedNode",
        "summary": "proxy GET requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPUTNamespacedNode",
        "summary": "proxy PUT requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPOSTNamespacedNode",
        "summary": "proxy POST requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyDELETENamespacedNode",
        "summary": "proxy DELETE requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "head": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyHEADNamespacedNode",
        "summary": "proxy HEAD requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "options": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyOPTIONSNamespacedNode",
        "summary": "proxy OPTIONS requests to Node",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/nodes/{name}/status": {
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedNodeStatus",
        "summary": "replace status of the specified Node",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          },
          {
            "in": "path",
            "description": "name of the Node",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Node"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedPersistentVolumeClaim",
        "summary": "list or watch objects of kind PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaimList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedPersistentVolumeClaim",
        "summary": "create a PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaim"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaim"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedPersistentVolumeClaimList",
        "summary": "watch individual changes to a list of PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedPersistentVolumeClaim",
        "summary": "read the specified PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaim"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedPersistentVolumeClaim",
        "summary": "replace the specified PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaim"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaim"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedPersistentVolumeClaim",
        "summary": "partially update the specified PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaim"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedPersistentVolumeClaim",
        "summary": "delete a PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedPersistentVolumeClaim",
        "summary": "watch changes to an object of kind PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/persistentvolumeclaims": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listPersistentVolumeClaim",
        "summary": "list or watch objects of kind PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaimList"
            }
          }
        }
      }
    },
    "/api/v1/watch/persistentvolumeclaims": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchPersistentVolumeClaimList",
        "summary": "watch individual changes to a list of PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status": {
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedPersistentVolumeClaimStatus",
        "summary": "replace status of the specified PersistentVolumeClaim",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaim"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeClaim"
            }
          }
        }
      }
    },
    "/api/v1/persistentvolumes": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedPersistentVolume",
        "summary": "list or watch objects of kind PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolumeList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedPersistentVolume",
        "summary": "create a PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolume"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolume"
            }
          }
        }
      }
    },
    "/api/v1/watch/persistentvolumes": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedPersistentVolumeList",
        "summary": "watch individual changes to a list of PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/persistentvolumes/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedPersistentVolume",
        "summary": "read the specified PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PersistentVolume",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolume"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedPersistentVolume",
        "summary": "replace the specified PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolume"
            }
          },
          {
            "in": "path",
            "description": "name of the PersistentVolume",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolume"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedPersistentVolume",
        "summary": "partially update the specified PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "name of the PersistentVolume",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolume"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedPersistentVolume",
        "summary": "delete a PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "name of the PersistentVolume",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/persistentvolumes/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedPersistentVolume",
        "summary": "watch changes to an object of kind PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "name of the PersistentVolume",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/persistentvolumes/{name}/status": {
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedPersistentVolumeStatus",
        "summary": "replace status of the specified PersistentVolume",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolume"
            }
          },
          {
            "in": "path",
            "description": "name of the PersistentVolume",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PersistentVolume"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedPod",
        "summary": "list or watch objects of kind Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedPod",
        "summary": "create a Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/pods": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedPodList",
        "summary": "watch individual changes to a list of Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedPod",
        "summary": "read the specified Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedPod",
        "summary": "replace the specified Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedPod",
        "summary": "partially update the specified Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedPod",
        "summary": "delete a Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/pods/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedPod",
        "summary": "watch changes to an object of kind Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path:*}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyGETNamespacedPod",
        "summary": "proxy GET requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPUTNamespacedPod",
        "summary": "proxy PUT requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPOSTNamespacedPod",
        "summary": "proxy POST requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyDELETENamespacedPod",
        "summary": "proxy DELETE requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "head": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyHEADNamespacedPod",
        "summary": "proxy HEAD requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "options": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyOPTIONSNamespacedPod",
        "summary": "proxy OPTIONS requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/proxy/namespaces/{namespace}/pods/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyGETNamespacedPod",
        "summary": "proxy GET requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPUTNamespacedPod",
        "summary": "proxy PUT requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPOSTNamespacedPod",
        "summary": "proxy POST requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyDELETENamespacedPod",
        "summary": "proxy DELETE requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "head": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyHEADNamespacedPod",
        "summary": "proxy HEAD requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "options": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyOPTIONSNamespacedPod",
        "summary": "proxy OPTIONS requests to Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/pods": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listPod",
        "summary": "list or watch objects of kind Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodList"
            }
          }
        }
      }
    },
    "/api/v1/watch/pods": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchPodList",
        "summary": "watch individual changes to a list of Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/attach": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "connectGetNamespacedPodAttach",
        "summary": "connect GET requests to attach of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
            "name": "stdin",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
            "name": "stdout",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
            "name": "stderr",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
            "name": "tty",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
            "name": "container",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "connectPostNamespacedPodAttach",
        "summary": "connect POST requests to attach of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
            "name": "stdin",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
            "name": "stdout",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
            "name": "stderr",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
            "name": "tty",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
            "name": "container",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/binding": {
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedBindingBinding",
        "summary": "create binding of a Binding",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Binding"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Binding",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Binding"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/exec": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "connectGetNamespacedPodExec",
        "summary": "connect GET requests to exec of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Redirect the standard input stream of the pod for this call. Defaults to false.",
            "name": "stdin",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Redirect the standard output stream of the pod for this call. Defaults to true.",
            "name": "stdout",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Redirect the standard error stream of the pod for this call. Defaults to true.",
            "name": "stderr",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.",
            "name": "tty",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
            "name": "container",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Command is the remote command to execute. argv array. Not executed within a shell.",
            "name": "command",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "connectPostNamespacedPodExec",
        "summary": "connect POST requests to exec of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Redirect the standard input stream of the pod for this call. Defaults to false.",
            "name": "stdin",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Redirect the standard output stream of the pod for this call. Defaults to true.",
            "name": "stdout",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Redirect the standard error stream of the pod for this call. Defaults to true.",
            "name": "stderr",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.",
            "name": "tty",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
            "name": "container",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Command is the remote command to execute. argv array. Not executed within a shell.",
            "name": "command",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/log": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedPodLog",
        "summary": "read log of the specified Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
            "name": "container",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Follow the log stream of the pod. Defaults to false.",
            "name": "follow",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Return previous terminated container logs. Defaults to false.",
            "name": "previous",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
            "name": "sinceSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "description": "An RFC3339 timestamp from which to show logs. If this value preceeds the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
            "name": "sinceTime",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
            "name": "timestamps",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
            "name": "tailLines",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "description": "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
            "name": "limitBytes",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/portforward": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "connectGetNamespacedPodPortforward",
        "summary": "connect GET requests to portforward of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "connectPostNamespacedPodPortforward",
        "summary": "connect POST requests to portforward of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "connectGetNamespacedPodProxy",
        "summary": "connect GET requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "connectPostNamespacedPodProxy",
        "summary": "connect POST requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "connectPutNamespacedPodProxy",
        "summary": "connect PUT requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "connectDeleteNamespacedPodProxy",
        "summary": "connect DELETE requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "head": {
        "tags": [
          "v1"
        ],
        "operationId": "connectHeadNamespacedPodProxy",
        "summary": "connect HEAD requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "options": {
        "tags": [
          "v1"
        ],
        "operationId": "connectOptionsNamespacedPodProxy",
        "summary": "connect OPTIONS requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path:*}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "connectGetNamespacedPodProxy",
        "summary": "connect GET requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "connectPostNamespacedPodProxy",
        "summary": "connect POST requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "connectPutNamespacedPodProxy",
        "summary": "connect PUT requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "connectDeleteNamespacedPodProxy",
        "summary": "connect DELETE requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "head": {
        "tags": [
          "v1"
        ],
        "operationId": "connectHeadNamespacedPodProxy",
        "summary": "connect HEAD requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "options": {
        "tags": [
          "v1"
        ],
        "operationId": "connectOptionsNamespacedPodProxy",
        "summary": "connect OPTIONS requests to proxy of Pod",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/status": {
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedPodStatus",
        "summary": "replace status of the specified Pod",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Pod",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Pod"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/podtemplates": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedPodTemplate",
        "summary": "list or watch objects of kind PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodTemplateList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedPodTemplate",
        "summary": "create a PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PodTemplate"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodTemplate"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/podtemplates": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedPodTemplateList",
        "summary": "watch individual changes to a list of PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/podtemplates/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedPodTemplate",
        "summary": "read the specified PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PodTemplate",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodTemplate"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedPodTemplate",
        "summary": "replace the specified PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PodTemplate"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PodTemplate",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodTemplate"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedPodTemplate",
        "summary": "partially update the specified PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PodTemplate",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodTemplate"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedPodTemplate",
        "summary": "delete a PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PodTemplate",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedPodTemplate",
        "summary": "watch changes to an object of kind PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the PodTemplate",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/podtemplates": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listPodTemplate",
        "summary": "list or watch objects of kind PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PodTemplateList"
            }
          }
        }
      }
    },
    "/api/v1/watch/podtemplates": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchPodTemplateList",
        "summary": "watch individual changes to a list of PodTemplate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedReplicationController",
        "summary": "list or watch objects of kind ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ReplicationControllerList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedReplicationController",
        "summary": "create a ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ReplicationController"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ReplicationController"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/replicationcontrollers": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedReplicationControllerList",
        "summary": "watch individual changes to a list of ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedReplicationController",
        "summary": "read the specified ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ReplicationController",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ReplicationController"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedReplicationController",
        "summary": "replace the specified ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ReplicationController"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ReplicationController",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ReplicationController"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedReplicationController",
        "summary": "partially update the specified ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ReplicationController",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ReplicationController"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedReplicationController",
        "summary": "delete a ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ReplicationController",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedReplicationController",
        "summary": "watch changes to an object of kind ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ReplicationController",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/replicationcontrollers": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listReplicationController",
        "summary": "list or watch objects of kind ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ReplicationControllerList"
            }
          }
        }
      }
    },
    "/api/v1/watch/replicationcontrollers": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchReplicationControllerList",
        "summary": "watch individual changes to a list of ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status": {
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedReplicationControllerStatus",
        "summary": "replace status of the specified ReplicationController",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ReplicationController"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ReplicationController",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ReplicationController"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedResourceQuota",
        "summary": "list or watch objects of kind ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuotaList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedResourceQuota",
        "summary": "create a ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuota"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuota"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/resourcequotas": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedResourceQuotaList",
        "summary": "watch individual changes to a list of ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedResourceQuota",
        "summary": "read the specified ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ResourceQuota",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuota"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedResourceQuota",
        "summary": "replace the specified ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuota"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ResourceQuota",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuota"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedResourceQuota",
        "summary": "partially update the specified ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ResourceQuota",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuota"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedResourceQuota",
        "summary": "delete a ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ResourceQuota",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedResourceQuota",
        "summary": "watch changes to an object of kind ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ResourceQuota",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/resourcequotas": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listResourceQuota",
        "summary": "list or watch objects of kind ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuotaList"
            }
          }
        }
      }
    },
    "/api/v1/watch/resourcequotas": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchResourceQuotaList",
        "summary": "watch individual changes to a list of ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status": {
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedResourceQuotaStatus",
        "summary": "replace status of the specified ResourceQuota",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuota"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ResourceQuota",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ResourceQuota"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/secrets": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedSecret",
        "summary": "list or watch objects of kind Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SecretList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedSecret",
        "summary": "create a Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Secret"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Secret"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/secrets": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedSecretList",
        "summary": "watch individual changes to a list of Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/secrets/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedSecret",
        "summary": "read the specified Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Secret",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Secret"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedSecret",
        "summary": "replace the specified Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Secret"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Secret",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Secret"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedSecret",
        "summary": "partially update the specified Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Secret",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Secret"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedSecret",
        "summary": "delete a Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Secret",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/secrets/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedSecret",
        "summary": "watch changes to an object of kind Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Secret",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/secrets": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listSecret",
        "summary": "list or watch objects of kind Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SecretList"
            }
          }
        }
      }
    },
    "/api/v1/watch/secrets": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchSecretList",
        "summary": "watch individual changes to a list of Secret",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/serviceaccounts": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedServiceAccount",
        "summary": "list or watch objects of kind ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServiceAccountList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedServiceAccount",
        "summary": "create a ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ServiceAccount"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServiceAccount"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/serviceaccounts": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedServiceAccountList",
        "summary": "watch individual changes to a list of ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/serviceaccounts/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedServiceAccount",
        "summary": "read the specified ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ServiceAccount",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServiceAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedServiceAccount",
        "summary": "replace the specified ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ServiceAccount"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ServiceAccount",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServiceAccount"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedServiceAccount",
        "summary": "partially update the specified ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ServiceAccount",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServiceAccount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedServiceAccount",
        "summary": "delete a ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ServiceAccount",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedServiceAccount",
        "summary": "watch changes to an object of kind ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the ServiceAccount",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/serviceaccounts": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listServiceAccount",
        "summary": "list or watch objects of kind ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServiceAccountList"
            }
          }
        }
      }
    },
    "/api/v1/watch/serviceaccounts": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchServiceAccountList",
        "summary": "watch individual changes to a list of ServiceAccount",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listNamespacedService",
        "summary": "list or watch objects of kind Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServiceList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "createNamespacedService",
        "summary": "create a Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/services": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedServiceList",
        "summary": "watch individual changes to a list of Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "readNamespacedService",
        "summary": "read the specified Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "replaceNamespacedService",
        "summary": "replace the specified Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "operationId": "patchNamespacedService",
        "summary": "partially update the specified Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "deleteNamespacedService",
        "summary": "delete a Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/api/v1/watch/namespaces/{namespace}/services/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchNamespacedService",
        "summary": "watch changes to an object of kind Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path:*}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyGETNamespacedService",
        "summary": "proxy GET requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPUTNamespacedService",
        "summary": "proxy PUT requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPOSTNamespacedService",
        "summary": "proxy POST requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyDELETENamespacedService",
        "summary": "proxy DELETE requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "head": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyHEADNamespacedService",
        "summary": "proxy HEAD requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "options": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyOPTIONSNamespacedService",
        "summary": "proxy OPTIONS requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "path to the resource",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/proxy/namespaces/{namespace}/services/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyGETNamespacedService",
        "summary": "proxy GET requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPUTNamespacedService",
        "summary": "proxy PUT requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyPOSTNamespacedService",
        "summary": "proxy POST requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyDELETENamespacedService",
        "summary": "proxy DELETE requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "head": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyHEADNamespacedService",
        "summary": "proxy HEAD requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "options": {
        "tags": [
          "v1"
        ],
        "operationId": "proxyOPTIONSNamespacedService",
        "summary": "proxy OPTIONS requests to Service",
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Service",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/services": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "listService",
        "summary": "list or watch objects of kind Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ServiceList"
            }
          }
        }
      }
    },
    "/api/v1/watch/services": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "watchServiceList",
        "summary": "watch individual changes to a list of Service",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/api/v1": {
      "get": {
        "tags": [
          "v1"
        ],
        "operationId": "getAPIResources",
        "summary": "get available resources",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "listNamespacedHorizontalPodAutoscaler",
        "summary": "list or watch objects of kind HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscalerList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "createNamespacedHorizontalPodAutoscaler",
        "summary": "create a HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/namespaces/{namespace}/horizontalpodautoscalers": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchNamespacedHorizontalPodAutoscalerList",
        "summary": "watch individual changes to a list of HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "readNamespacedHorizontalPodAutoscaler",
        "summary": "read the specified HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "replaceNamespacedHorizontalPodAutoscaler",
        "summary": "replace the specified HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "patchNamespacedHorizontalPodAutoscaler",
        "summary": "partially update the specified HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "deleteNamespacedHorizontalPodAutoscaler",
        "summary": "delete a HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchNamespacedHorizontalPodAutoscaler",
        "summary": "watch changes to an object of kind HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/horizontalpodautoscalers": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "listHorizontalPodAutoscaler",
        "summary": "list or watch objects of kind HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscalerList"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/horizontalpodautoscalers": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchHorizontalPodAutoscalerList",
        "summary": "watch individual changes to a list of HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
      "put": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "replaceNamespacedHorizontalPodAutoscalerStatus",
        "summary": "replace status of the specified HorizontalPodAutoscaler",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "listNamespacedIngress",
        "summary": "list or watch objects of kind Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.IngressList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "createNamespacedIngress",
        "summary": "create a Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.Ingress"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Ingress"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchNamespacedIngressList",
        "summary": "watch individual changes to a list of Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "readNamespacedIngress",
        "summary": "read the specified Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Ingress",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Ingress"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "replaceNamespacedIngress",
        "summary": "replace the specified Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.Ingress"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Ingress",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Ingress"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "patchNamespacedIngress",
        "summary": "partially update the specified Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Ingress",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Ingress"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "deleteNamespacedIngress",
        "summary": "delete a Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Ingress",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchNamespacedIngress",
        "summary": "watch changes to an object of kind Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Ingress",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/ingresses": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "listIngress",
        "summary": "list or watch objects of kind Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.IngressList"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/ingresses": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchIngressList",
        "summary": "watch individual changes to a list of Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status": {
      "put": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "replaceNamespacedIngressStatus",
        "summary": "replace status of the specified Ingress",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.Ingress"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Ingress",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Ingress"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/jobs": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "listNamespacedJob",
        "summary": "list or watch objects of kind Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.JobList"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "createNamespacedJob",
        "summary": "create a Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.Job"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Job"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/namespaces/{namespace}/jobs": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchNamespacedJobList",
        "summary": "watch individual changes to a list of Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "readNamespacedJob",
        "summary": "read the specified Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Job",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Job"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "replaceNamespacedJob",
        "summary": "replace the specified Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.Job"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Job",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Job"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "patchNamespacedJob",
        "summary": "partially update the specified Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Job",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Job"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "deleteNamespacedJob",
        "summary": "delete a Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Job",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unversioned.Status"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/namespaces/{namespace}/jobs/{name}": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchNamespacedJob",
        "summary": "watch changes to an object of kind Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Job",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/jobs": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "listJob",
        "summary": "list or watch objects of kind Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.JobList"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/watch/jobs": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "watchJobList",
        "summary": "watch individual changes to a list of Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
            "name": "resourceVersion",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/json.WatchEvent"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status": {
      "put": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "replaceNamespacedJobStatus",
        "summary": "replace status of the specified Job",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.Job"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Job",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Job"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "readNamespacedScaleScale",
        "summary": "read scale of the specified Scale",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Scale",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Scale"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "replaceNamespacedScaleScale",
        "summary": "replace scale of the specified Scale",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1beta1.Scale"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Scale",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Scale"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "patchNamespacedScaleScale",
        "summary": "partially update scale of the specified Scale",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "If 'true', then the output is pretty printed.",
            "name": "pretty",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/unversioned.Patch"
            }
          },
          {
            "in": "path",
            "description": "object name and auth scope, such as for teams and projects",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "name of the Scale",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1beta1.Scale"
            }
          }
        }
      }
    },
    "/apis/extensions/v1beta1": {
      "get": {
        "tags": [
          "v1beta1"
        ],
        "operationId": "getAPIResources",
        "summary": "get available resources",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "version"
        ],
        "operationId": "getCodeVersion",
        "summary": "get the code version",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        }
      }
    }
  },
  "definitions": {
    "v1.Binding": {
      "description": "Binding ties one object to another. For example, a pod is bound to a node by a scheduler.",
      "required": [
        "target"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "target": {
          "$ref": "#/definitions/v1.ObjectReference",
          "description": "The target object that you want to bind to the standard object."
        }
      }
    },
    "v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
        },
        "generateName": {
          "type": "string",
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md"
        },
        "selfLink": {
          "type": "string",
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
        },
        "uid": {
          "type": "string",
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids"
        },
        "resourceVersion": {
          "type": "string",
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
        },
        "generation": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "A sequence number representing a specific generation of the desired state. Currently only implemented by replication controllers. Populated by the system. Read-only."
        },
        "creationTimestamp": {
          "type": "string",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "deletionTimestamp": {
          "type": "string",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/HEAD/docs/user-guide/annotations.md"
        }
      }
    },
    "v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md"
        },
        "name": {
          "type": "string",
          "description": "Name of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
        },
        "uid": {
          "type": "string",
          "description": "UID of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids"
        },
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent."
        },
        "resourceVersion": {
          "type": "string",
          "description": "Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
        },
        "fieldPath": {
          "type": "string",
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
        }
      }
    },
    "v1.ComponentStatusList": {
      "description": "Status of all the conditions for the component as a list of ComponentStatus objects.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ComponentStatus"
          },
          "description": "List of ComponentStatus objects."
        }
      }
    },
    "unversioned.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "selfLink": {
          "type": "string",
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
        },
        "resourceVersion": {
          "type": "string",
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
        }
      }
    },
    "v1.ComponentStatus": {
      "description": "ComponentStatus (and ComponentStatusList) holds the cluster validation info.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ComponentCondition"
          },
          "description": "List of component conditions observed"
        }
      }
    },
    "v1.ComponentCondition": {
      "description": "Information about the condition of a component.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of condition for a component. Valid value: \"Healthy\""
        },
        "status": {
          "type": "string",
          "description": "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\"."
        },
        "message": {
          "type": "string",
          "description": "Message about the condition for a component. For example, information about a health check."
        },
        "error": {
          "type": "string",
          "description": "Condition error code for a component. For example, a health check error code."
        }
      }
    },
    "v1.EndpointsList": {
      "description": "EndpointsList is a list of endpoints.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Endpoints"
          },
          "description": "List of endpoints."
        }
      }
    },
    "v1.Endpoints": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]",
      "required": [
        "subsets"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "subsets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EndpointSubset"
          },
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service."
        }
      }
    },
    "v1.EndpointSubset": {
      "description": "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EndpointAddress"
          },
          "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize."
        },
        "notReadyAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EndpointAddress"
          },
          "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check."
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EndpointPort"
          },
          "description": "Port numbers available on the related IP addresses."
        }
      }
    },
    "v1.EndpointAddress": {
      "description": "EndpointAddress is a tuple that describes single IP address.",
      "required": [
        "ip"
      ],
      "properties": {
        "ip": {
          "type": "string",
          "description": "The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24)."
        },
        "targetRef": {
          "$ref": "#/definitions/v1.ObjectReference",
          "description": "Reference to object providing the endpoint."
        }
      }
    },
    "v1.EndpointPort": {
      "description": "EndpointPort is a tuple that describes a single port.",
      "required": [
        "port"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined."
        },
        "port": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "The port number of the endpoint."
        },
        "protocol": {
          "type": "string",
          "description": "The IP protocol for this port. Must be UDP or TCP. Default is TCP."
        }
      }
    },
    "json.WatchEvent": {
      "properties": {
        "type": {
          "type": "string",
          "description": "the type of watch event; may be ADDED, MODIFIED, DELETED, or ERROR"
        },
        "object": {
          "type": "string",
          "description": "the object being watched; will match the type of the resource endpoint or be a Status object if the type is ERROR"
        }
      }
    },
    "unversioned.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body."
    },
    "unversioned.Status": {
      "description": "Status is a return value for calls that don't return other objects.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "status": {
          "type": "string",
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the status of this operation."
        },
        "reason": {
          "type": "string",
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
        },
        "details": {
          "$ref": "#/definitions/unversioned.StatusDetails",
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type."
        },
        "code": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Suggested HTTP return code for this status, 0 if not set."
        }
      }
    },
    "unversioned.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
        },
        "kind": {
          "type": "string",
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/unversioned.StatusCause"
          },
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
        },
        "retryAfterSeconds": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "If specified, the time in seconds before the operation should be retried."
        }
      }
    },
    "unversioned.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "properties": {
        "reason": {
          "type": "string",
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
        },
        "field": {
          "type": "string",
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
        }
      }
    },
    "v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object",
      "required": [
        "gracePeriodSeconds"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "gracePeriodSeconds": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
        }
      }
    },
    "v1.EventList": {
      "description": "EventList is a list of events.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Event"
          },
          "description": "List of events"
        }
      }
    },
    "v1.Event": {
      "description": "Event is a report of an event somewhere in the cluster.",
      "required": [
        "metadata",
        "involvedObject"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "involvedObject": {
          "$ref": "#/definitions/v1.ObjectReference",
          "description": "The object that this event is about."
        },
        "reason": {
          "type": "string",
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status."
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the status of this operation."
        },
        "source": {
          "$ref": "#/definitions/v1.EventSource",
          "description": "The component reporting this event. Should be a short machine understandable string."
        },
        "firstTimestamp": {
          "type": "string",
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)"
        },
        "lastTimestamp": {
          "type": "string",
          "description": "The time at which the most recent occurrence of this event was recorded."
        },
        "count": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "The number of times this event has occurred."
        }
      }
    },
    "v1.EventSource": {
      "description": "EventSource contains information for an event.",
      "properties": {
        "component": {
          "type": "string",
          "description": "Component from which the event is generated."
        },
        "host": {
          "type": "string",
          "description": "Host name on which the event is generated."
        }
      }
    },
    "v1.LimitRangeList": {
      "description": "LimitRangeList is a list of LimitRange items.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LimitRange"
          },
          "description": "Items is a list of LimitRange objects. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_limit_range.md"
        }
      }
    },
    "v1.LimitRange": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.LimitRangeSpec",
          "description": "Spec defines the limits enforced. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.LimitRangeSpec": {
      "description": "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LimitRangeItem"
          },
          "description": "Limits is the list of LimitRangeItem objects that are enforced."
        }
      }
    },
    "v1.LimitRangeItem": {
      "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of resource that this limit applies to."
        },
        "max": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Max usage constraints on this kind by resource name."
        },
        "min": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Min usage constraints on this kind by resource name."
        },
        "default": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Default resource requirement limit value by resource name if resource limit is omitted."
        },
        "defaultRequest": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted."
        },
        "maxLimitRequestRatio": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource."
        }
      }
    },
    "v1.NamespaceList": {
      "description": "NamespaceList is a list of Namespaces.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Namespace"
          },
          "description": "Items is the list of Namespace objects in the list. More info: http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md"
        }
      }
    },
    "v1.Namespace": {
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.NamespaceSpec",
          "description": "Spec defines the behavior of the Namespace. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/v1.NamespaceStatus",
          "description": "Status describes the current status of a Namespace. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.NamespaceSpec": {
      "description": "NamespaceSpec describes the attributes on a Namespace.",
      "properties": {
        "finalizers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.FinalizerName"
          },
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: http://releases.k8s.io/HEAD/docs/design/namespaces.md#finalizers"
        }
      }
    },
    "v1.FinalizerName": {},
    "v1.NamespaceStatus": {
      "description": "NamespaceStatus is information about the current status of a Namespace.",
      "properties": {
        "phase": {
          "type": "string",
          "description": "Phase is the current lifecycle phase of the namespace. More info: http://releases.k8s.io/HEAD/docs/design/namespaces.md#phases"
        }
      }
    },
    "v1.NodeList": {
      "description": "NodeList is the whole list of all Nodes which have been registered with master.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Node"
          },
          "description": "List of nodes"
        }
      }
    },
    "v1.Node": {
      "description": "Node is a worker node in Kubernetes, formerly known as minion. Each node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.NodeSpec",
          "description": "Spec defines the behavior of a node. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/v1.NodeStatus",
          "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.NodeSpec": {
      "description": "NodeSpec describes the attributes that a node is created with.",
      "properties": {
        "podCIDR": {
          "type": "string",
          "description": "PodCIDR represents the pod IP range assigned to the node."
        },
        "externalID": {
          "type": "string",
          "description": "External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated."
        },
        "providerID": {
          "type": "string",
          "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>"
        },
        "unschedulable": {
          "type": "boolean",
          "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#manual-node-administration\"`"
        }
      }
    },
    "v1.NodeStatus": {
      "description": "NodeStatus is information about the current status of a node.",
      "properties": {
        "capacity": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Capacity represents the available resources of a node. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#capacity for more details."
        },
        "phase": {
          "type": "string",
          "description": "NodePhase is the recently observed lifecycle phase of the node. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-phase"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NodeCondition"
          },
          "description": "Conditions is an array of current observed node conditions. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-condition"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NodeAddress"
          },
          "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-addresses"
        },
        "daemonEndpoints": {
          "$ref": "#/definitions/v1.NodeDaemonEndpoints",
          "description": "Endpoints of daemons running on the Node."
        },
        "nodeInfo": {
          "$ref": "#/definitions/v1.NodeSystemInfo",
          "description": "Set of ids/uuids to uniquely identify the node. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-info"
        }
      }
    },
    "v1.NodeCondition": {
      "description": "NodeCondition contains condition infromation for a node.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of node condition, currently only Ready."
        },
        "status": {
          "type": "string",
          "description": "Status of the condition, one of True, False, Unknown."
        },
        "lastHeartbeatTime": {
          "type": "string",
          "description": "Last time we got an update on a given condition."
        },
        "lastTransitionTime": {
          "type": "string",
          "description": "Last time the condition transit from one status to another."
        },
        "reason": {
          "type": "string",
          "description": "(brief) reason for the condition's last transition."
        },
        "message": {
          "type": "string",
          "description": "Human readable message indicating details about last transition."
        }
      }
    },
    "v1.NodeAddress": {
      "description": "NodeAddress contains information for the node's address.",
      "required": [
        "type",
        "address"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Node address type, one of Hostname, ExternalIP or InternalIP."
        },
        "address": {
          "type": "string",
          "description": "The node address."
        }
      }
    },
    "v1.NodeDaemonEndpoints": {
      "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
      "properties": {
        "kubeletEndpoint": {
          "$ref": "#/definitions/v1.DaemonEndpoint",
          "description": "Endpoint on which Kubelet is listening."
        }
      }
    },
    "v1.DaemonEndpoint": {
      "description": "DaemonEndpoint contains information about a single Daemon endpoint.",
      "required": [
        "Port"
      ],
      "properties": {
        "Port": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Port number of the given endpoint."
        }
      }
    },
    "v1.NodeSystemInfo": {
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
      "required": [
        "machineID",
        "systemUUID",
        "bootID",
        "kernelVersion",
        "osImage",
        "containerRuntimeVersion",
        "kubeletVersion",
        "kubeProxyVersion"
      ],
      "properties": {
        "machineID": {
          "type": "string",
          "description": "Machine ID reported by the node."
        },
        "systemUUID": {
          "type": "string",
          "description": "System UUID reported by the node."
        },
        "bootID": {
          "type": "string",
          "description": "Boot ID reported by the node."
        },
        "kernelVersion": {
          "type": "string",
          "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
        },
        "osImage": {
          "type": "string",
          "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
        },
        "containerRuntimeVersion": {
          "type": "string",
          "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)."
        },
        "kubeletVersion": {
          "type": "string",
          "description": "Kubelet Version reported by the node."
        },
        "kubeProxyVersion": {
          "type": "string",
          "description": "KubeProxy Version reported by the node."
        }
      }
    },
    "v1.PersistentVolumeClaimList": {
      "description": "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeClaim"
          },
          "description": "A list of persistent volume claims. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims"
        }
      }
    },
    "v1.PersistentVolumeClaim": {
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.PersistentVolumeClaimSpec",
          "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims"
        },
        "status": {
          "$ref": "#/definitions/v1.PersistentVolumeClaimStatus",
          "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims"
        }
      }
    },
    "v1.PersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
          },
          "description": "AccessModes contains the desired access modes the volume should have. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1"
        },
        "resources": {
          "$ref": "#/definitions/v1.ResourceRequirements",
          "description": "Resources represents the minimum resources the volume should have. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#resources"
        },
        "volumeName": {
          "type": "string",
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
        }
      }
    },
    "v1.PersistentVolumeAccessMode": {},
    "v1.ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "limits": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications"
        },
        "requests": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications"
        }
      }
    },
    "v1.PersistentVolumeClaimStatus": {
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
      "properties": {
        "phase": {
          "type": "string",
          "description": "Phase represents the current phase of PersistentVolumeClaim."
        },
        "accessModes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
          },
          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1"
        },
        "capacity": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Represents the actual resources of the underlying volume."
        }
      }
    },
    "v1.PersistentVolumeList": {
      "description": "PersistentVolumeList is a list of PersistentVolume items.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolume"
          },
          "description": "List of persistent volumes. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md"
        }
      }
    },
    "v1.PersistentVolume": {
      "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.PersistentVolumeSpec",
          "description": "Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistent-volumes"
        },
        "status": {
          "$ref": "#/definitions/v1.PersistentVolumeStatus",
          "description": "Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistent-volumes"
        }
      }
    },
    "v1.PersistentVolumeSpec": {
      "description": "PersistentVolumeSpec is the specification of a persistent volume.",
      "properties": {
        "capacity": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A description of the persistent volume's resources and capacity. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#capacity"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource",
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
        },
        "awsElasticBlockStore": {
          "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource",
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
        },
        "hostPath": {
          "$ref": "#/definitions/v1.HostPathVolumeSource",
          "description": "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath"
        },
        "glusterfs": {
          "$ref": "#/definitions/v1.GlusterfsVolumeSource",
          "description": "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: http://releases.k8s.io/HEAD/examples/glusterfs/README.md"
        },
        "nfs": {
          "$ref": "#/definitions/v1.NFSVolumeSource",
          "description": "NFS represents an NFS mount on the host. Provisioned by an admin. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
        },
        "rbd": {
          "$ref": "#/definitions/v1.RBDVolumeSource",
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md"
        },
        "iscsi": {
          "$ref": "#/definitions/v1.ISCSIVolumeSource",
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin."
        },
        "cinder": {
          "$ref": "#/definitions/v1.CinderVolumeSource",
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        },
        "cephfs": {
          "$ref": "#/definitions/v1.CephFSVolumeSource",
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "fc": {
          "$ref": "#/definitions/v1.FCVolumeSource",
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flocker": {
          "$ref": "#/definitions/v1.FlockerVolumeSource",
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running"
        },
        "accessModes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
          },
          "description": "AccessModes contains all ways the volume can be mounted. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes"
        },
        "claimRef": {
          "$ref": "#/definitions/v1.ObjectReference",
          "description": "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#binding"
        },
        "persistentVolumeReclaimPolicy": {
          "type": "string",
          "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recyling must be supported by the volume plugin underlying this persistent volume. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#recycling-policy"
        }
      }
    },
    "v1.GCEPersistentDiskVolumeSource": {
      "description": "GCEPersistentDiskVolumeSource represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist and be formatted before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once.",
      "required": [
        "pdName",
        "fsType"
      ],
      "properties": {
        "pdName": {
          "type": "string",
          "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
        },
        "fsType": {
          "type": "string",
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
        },
        "partition": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
        },
        "readOnly": {
          "type": "boolean",
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
        }
      }
    },
    "v1.AWSElasticBlockStoreVolumeSource": {
      "description": "Represents a persistent disk resource in AWS.\n\nAn Amazon Elastic Block Store (EBS) must already be created, formatted, and reside in the same AWS zone as the kubelet before it can be mounted. Note: Amazon EBS volumes can be mounted to only one instance at a time.",
      "required": [
        "volumeID",
        "fsType"
      ],
      "properties": {
        "volumeID": {
          "type": "string",
          "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
        },
        "fsType": {
          "type": "string",
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
        },
        "partition": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty)."
        },
        "readOnly": {
          "type": "boolean",
          "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
        }
      }
    },
    "v1.HostPathVolumeSource": {
      "description": "HostPathVolumeSource represents bare host directory volume.",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string",
          "description": "Path of the directory on the host. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath"
        }
      }
    },
    "v1.GlusterfsVolumeSource": {
      "description": "GlusterfsVolumeSource represents a Glusterfs Mount that lasts the lifetime of a pod.",
      "required": [
        "endpoints",
        "path"
      ],
      "properties": {
        "endpoints": {
          "type": "string",
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod"
        },
        "path": {
          "type": "string",
          "description": "Path is the Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod"
        },
        "readOnly": {
          "type": "boolean",
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod"
        }
      }
    },
    "v1.NFSVolumeSource": {
      "description": "NFSVolumeSource represents an NFS mount that lasts the lifetime of a pod",
      "required": [
        "server",
        "path"
      ],
      "properties": {
        "server": {
          "type": "string",
          "description": "Server is the hostname or IP address of the NFS server. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
        },
        "path": {
          "type": "string",
          "description": "Path that is exported by the NFS server. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
        },
        "readOnly": {
          "type": "boolean",
          "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
        }
      }
    },
    "v1.RBDVolumeSource": {
      "description": "RBDVolumeSource represents a Rados Block Device Mount that lasts the lifetime of a pod",
      "required": [
        "monitors",
        "image",
        "pool",
        "user",
        "keyring",
        "secretRef"
      ],
      "properties": {
        "monitors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
        },
        "image": {
          "type": "string",
          "description": "The rados image name. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
        },
        "fsType": {
          "type": "string",
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#rbd"
        },
        "pool": {
          "type": "string",
          "description": "The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it."
        },
        "user": {
          "type": "string",
          "description": "The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
        },
        "keyring": {
          "type": "string",
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference",
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is empty. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
        },
        "readOnly": {
          "type": "boolean",
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it"
        }
      }
    },
    "v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
        }
      }
    },
    "v1.ISCSIVolumeSource": {
      "description": "ISCSIVolumeSource describes an ISCSI Disk can only be mounted as read/write once.",
      "required": [
        "targetPortal",
        "iqn",
        "lun",
        "fsType"
      ],
      "properties": {
        "targetPortal": {
          "type": "string",
          "description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
        },
        "iqn": {
          "type": "string",
          "description": "Target iSCSI Qualified Name."
        },
        "lun": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "iSCSI target lun number."
        },
        "fsType": {
          "type": "string",
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#iscsi"
        },
        "readOnly": {
          "type": "boolean",
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
        }
      }
    },
    "v1.CinderVolumeSource": {
      "description": "CinderVolumeSource represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet.",
      "required": [
        "volumeID"
      ],
      "properties": {
        "volumeID": {
          "type": "string",
          "description": "volume id used to identify the volume in cinder More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        },
        "fsType": {
          "type": "string",
          "description": "Required: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Only ext3 and ext4 are allowed More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        },
        "readOnly": {
          "type": "boolean",
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        }
      }
    },
    "v1.CephFSVolumeSource": {
      "description": "CephFSVolumeSource represents a Ceph Filesystem Mount that lasts the lifetime of a pod",
      "required": [
        "monitors"
      ],
      "properties": {
        "monitors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "type": "string",
          "description": "Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/HEAD/examples/cephfs/README.md#how-to-use-it"
        },
        "secretFile": {
          "type": "string",
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/cephfs/README.md#how-to-use-it"
        },
        "secretRef": {
          "$ref": "#/definitions/v1.LocalObjectReference",
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/HEAD/examples/cephfs/README.md#how-to-use-it"
        },
        "readOnly": {
          "type": "boolean",
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/cephfs/README.md#how-to-use-it"
        }
      }
    },
    "v1.FCVolumeSource": {
      "description": "A Fibre Channel Disk can only be mounted as read/write once.",
      "required": [
        "targetWWNs",
        "lun",
        "fsType"
      ],
      "properties": {
        "targetWWNs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required: FC target world wide names (WWNs)"
        },
        "lun": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Required: FC target lun number"
        },
        "fsType": {
          "type": "string",
          "description": "Required: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\""
        },
        "readOnly": {
          "type": "boolean",
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }
      }
    },
    "v1.FlockerVolumeSource": {
      "description": "FlockerVolumeSource represents a Flocker volume mounted by the Flocker agent.",
      "required": [
        "datasetName"
      ],
      "properties": {
        "datasetName": {
          "type": "string",
          "description": "Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker"
        }
      }
    },
    "v1.PersistentVolumeStatus": {
      "description": "PersistentVolumeStatus is the current status of a persistent volume.",
      "properties": {
        "phase": {
          "type": "string",
          "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#phase"
        },
        "message": {
          "type": "string",
          "description": "A human-readable message indicating details about why the volume is in this state."
        },
        "reason": {
          "type": "string",
          "description": "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI."
        }
      }
    },
    "v1.PodList": {
      "description": "PodList is a list of Pods.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Pod"
          },
          "description": "List of pods. More info: http://releases.k8s.io/HEAD/docs/user-guide/pods.md"
        }
      }
    },
    "v1.Pod": {
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.PodSpec",
          "description": "Specification of the desired behavior of the pod. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/v1.PodStatus",
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.PodSpec": {
      "description": "PodSpec is a description of a pod.",
      "required": [
        "containers"
      ],
      "properties": {
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Volume"
          },
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md"
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Container"
          },
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/containers.md"
        },
        "restartPolicy": {
          "type": "string",
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#restartpolicy"
        },
        "terminationGracePeriodSeconds": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds."
        },
        "activeDeadlineSeconds": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer."
        },
        "dnsPolicy": {
          "type": "string",
          "description": "Set DNS policy for containers within the pod. One of 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\"."
        },
        "nodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://releases.k8s.io/HEAD/docs/user-guide/node-selection/README.md"
        },
        "serviceAccountName": {
          "type": "string",
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md"
        },
        "serviceAccount": {
          "type": "string",
          "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
        },
        "nodeName": {
          "type": "string",
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
        },
        "hostNetwork": {
          "type": "boolean",
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
        },
        "hostPID": {
          "type": "boolean",
          "description": "Use the host's pid namespace. Optional: Default to false."
        },
        "hostIPC": {
          "type": "boolean",
          "description": "Use the host's ipc namespace. Optional: Default to false."
        },
        "securityContext": {
          "$ref": "#/definitions/v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LocalObjectReference"
          },
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://releases.k8s.io/HEAD/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod"
        }
      }
    },
    "v1.Volume": {
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
        },
        "hostPath": {
          "$ref": "#/definitions/v1.HostPathVolumeSource",
          "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath"
        },
        "emptyDir": {
          "$ref": "#/definitions/v1.EmptyDirVolumeSource",
          "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource",
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk"
        },
        "awsElasticBlockStore": {
          "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource",
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore"
        },
        "gitRepo": {
          "$ref": "#/definitions/v1.GitRepoVolumeSource",
          "description": "GitRepo represents a git repository at a particular revision."
        },
        "secret": {
          "$ref": "#/definitions/v1.SecretVolumeSource",
          "description": "Secret represents a secret that should populate this volume. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets"
        },
        "nfs": {
          "$ref": "#/definitions/v1.NFSVolumeSource",
          "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs"
        },
        "iscsi": {
          "$ref": "#/definitions/v1.ISCSIVolumeSource",
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/HEAD/examples/iscsi/README.md"
        },
        "glusterfs": {
          "$ref": "#/definitions/v1.GlusterfsVolumeSource",
          "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/glusterfs/README.md"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource",
          "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims"
        },
        "rbd": {
          "$ref": "#/definitions/v1.RBDVolumeSource",
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/rbd/README.md"
        },
        "cinder": {
          "$ref": "#/definitions/v1.CinderVolumeSource",
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        },
        "cephfs": {
          "$ref": "#/definitions/v1.CephFSVolumeSource",
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "flocker": {
          "$ref": "#/definitions/v1.FlockerVolumeSource",
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
        },
        "downwardAPI": {
          "$ref": "#/definitions/v1.DownwardAPIVolumeSource",
          "description": "DownwardAPI represents downward API about the pod that should populate this volume"
        },
        "fc": {
          "$ref": "#/definitions/v1.FCVolumeSource",
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        }
      }
    },
    "v1.EmptyDirVolumeSource": {
      "description": "EmptyDirVolumeSource is temporary directory that shares a pod's lifetime.",
      "properties": {
        "medium": {
          "type": "string",
          "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir"
        }
      }
    },
    "v1.GitRepoVolumeSource": {
      "description": "GitRepoVolumeSource represents a volume that is pulled from git when the pod is created.",
      "required": [
        "repository",
        "revision"
      ],
      "properties": {
        "repository": {
          "type": "string",
          "description": "Repository URL"
        },
        "revision": {
          "type": "string",
          "description": "Commit hash for the specified revision."
        }
      }
    },
    "v1.SecretVolumeSource": {
      "description": "SecretVolumeSource adapts a Secret into a VolumeSource. More info: http://releases.k8s.io/HEAD/docs/design/secrets.md",
      "required": [
        "secretName"
      ],
      "properties": {
        "secretName": {
          "type": "string",
          "description": "SecretName is the name of a secret in the pod's namespace. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets"
        }
      }
    },
    "v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string",
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims"
        },
        "readOnly": {
          "type": "boolean",
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false."
        }
      }
    },
    "v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
          },
          "description": "Items is a list of downward API volume file"
        }
      }
    },
    "v1.DownwardAPIVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "required": [
        "path",
        "fieldRef"
      ],
      "properties": {
        "path": {
          "type": "string",
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
        },
        "fieldRef": {
          "$ref": "#/definitions/v1.ObjectFieldSelector",
          "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported."
        }
      }
    },
    "v1.ObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "required": [
        "fieldPath"
      ],
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
        },
        "fieldPath": {
          "type": "string",
          "description": "Path of the field to select in the specified API version."
        }
      }
    },
    "v1.Container": {
      "description": "A single application container that you want to run within a pod.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
        },
        "image": {
          "type": "string",
          "description": "Docker image name. More info: http://releases.k8s.io/HEAD/docs/user-guide/images.md"
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Entrypoint array. Not executed within a shell. The docker image's entrypoint is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments to the entrypoint. The docker image's cmd is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands"
        },
        "workingDir": {
          "type": "string",
          "description": "Container's working directory. Defaults to Docker's default. D efaults to image's default. Cannot be updated."
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ContainerPort"
          },
          "description": "List of ports to expose from the container. Cannot be updated."
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EnvVar"
          },
          "description": "List of environment variables to set in the container. Cannot be updated."
        },
        "resources": {
          "$ref": "#/definitions/v1.ResourceRequirements",
          "description": "Compute Resources required by this container. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#resources"
        },
        "volumeMounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.VolumeMount"
          },
          "description": "Pod volumes to mount into the container's filesyste. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes"
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes"
        },
        "lifecycle": {
          "$ref": "#/definitions/v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        },
        "terminationMessagePath": {
          "type": "string",
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated."
        },
        "imagePullPolicy": {
          "type": "string",
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/images.md#updating-images"
        },
        "securityContext": {
          "$ref": "#/definitions/v1.SecurityContext",
          "description": "Security options the pod should run with. More info: http://releases.k8s.io/HEAD/docs/design/security_context.md"
        },
        "stdin": {
          "type": "boolean",
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
        },
        "stdinOnce": {
          "type": "boolean",
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
        },
        "tty": {
          "type": "boolean",
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
        }
      }
    },
    "v1.ContainerPort": {
      "description": "ContainerPort represents a network port in a single container.",
      "required": [
        "containerPort"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
        },
        "hostPort": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this."
        },
        "containerPort": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
        },
        "hostIP": {
          "type": "string",
          "description": "What host IP to bind the external port to."
        }
      }
    },
    "v1.EnvVar": {
      "description": "EnvVar represents an environment variable present in a Container.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the environment variable. Must be a C_IDENTIFIER."
        },
        "value": {
          "type": "string",
          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
        },
        "valueFrom": {
          "$ref": "#/definitions/v1.EnvVarSource",
          "description": "Source for the environment variable's value. Cannot be used if value is not empty."
        }
      }
    },
    "v1.EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "required": [
        "fieldRef"
      ],
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/v1.ObjectFieldSelector",
          "description": "Selects a field of the pod. Only name and namespace are supported."
        }
      }
    },
    "v1.VolumeMount": {
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "required": [
        "name",
        "mountPath"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "This must match the Name of a Volume."
        },
        "readOnly": {
          "type": "boolean",
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
        },
        "mountPath": {
          "type": "string",
          "description": "Path within the container at which the volume should be mounted."
        }
      }
    },
    "v1.Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to recieve traffic.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1.ExecAction",
          "description": "One and only one of the following should be specified. Exec specifies the action to take."
        },
        "httpGet": {
          "$ref": "#/definitions/v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform."
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1.TCPSocketAction",
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
        },
        "initialDelaySeconds": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes"
        },
        "timeoutSeconds": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes"
        },
        "periodSeconds": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1."
        },
        "successThreshold": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1."
        },
        "failureThreshold": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1."
        }
      }
    },
    "v1.ExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
        }
      }
    },
    "v1.HTTPGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "required": [
        "port"
      ],
      "properties": {
        "path": {
          "type": "string",
          "description": "Path to access on the HTTP server."
        },
        "port": {
          "type": "string",
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        },
        "host": {
          "type": "string",
          "description": "Host name to connect to, defaults to the pod IP."
        },
        "scheme": {
          "type": "string",
          "description": "Scheme to use for connecting to the host. Defaults to HTTP."
        }
      }
    },
    "v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "type": "string",
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        }
      }
    },
    "v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/v1.Handler",
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details"
        },
        "preStop": {
          "$ref": "#/definitions/v1.Handler",
          "description": "PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details"
        }
      }
    },
    "v1.Handler": {
      "description": "Handler defines a specific action that should be taken",
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1.ExecAction",
          "description": "One and only one of the following should be specified. Exec specifies the action to take."
        },
        "httpGet": {
          "$ref": "#/definitions/v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform."
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1.TCPSocketAction",
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
        }
      }
    },
    "v1.SecurityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "properties": {
        "capabilities": {
          "$ref": "#/definitions/v1.Capabilities",
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime."
        },
        "privileged": {
          "type": "boolean",
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/v1.SELinuxOptions",
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        },
        "runAsUser": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        },
        "runAsNonRoot": {
          "type": "boolean",
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }
      }
    },
    "v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Capability"
          },
          "description": "Added capabilities"
        },
        "drop": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Capability"
          },
          "description": "Removed capabilities"
        }
      }
    },
    "v1.Capability": {},
    "v1.SELinuxOptions": {
      "description": "SELinuxOptions are the labels to be applied to the container",
      "properties": {
        "user": {
          "type": "string",
          "description": "User is a SELinux user label that applies to the container."
        },
        "role": {
          "type": "string",
          "description": "Role is a SELinux role label that applies to the container."
        },
        "type": {
          "type": "string",
          "description": "Type is a SELinux type label that applies to the container."
        },
        "level": {
          "type": "string",
          "description": "Level is SELinux level label that applies to the container."
        }
      }
    },
    "v1.PodSecurityContext": {
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "properties": {
        "seLinuxOptions": {
          "$ref": "#/definitions/v1.SELinuxOptions",
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
        },
        "runAsUser": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
        },
        "runAsNonRoot": {
          "type": "boolean",
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        },
        "supplementalGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/integer"
          },
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
        },
        "fsGroup": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw "
        }
      }
    },
    "integer": {},
    "v1.PodStatus": {
      "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system.",
      "properties": {
        "phase": {
          "type": "string",
          "description": "Current condition of the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-phase"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PodCondition"
          },
          "description": "Current service state of pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions"
        },
        "message": {
          "type": "string",
          "description": "A human readable message indicating details about why the pod is in this condition."
        },
        "reason": {
          "type": "string",
          "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'"
        },
        "hostIP": {
          "type": "string",
          "description": "IP address of the host to which the pod is assigned. Empty if not yet scheduled."
        },
        "podIP": {
          "type": "string",
          "description": "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated."
        },
        "startTime": {
          "type": "string",
          "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod."
        },
        "containerStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ContainerStatus"
          },
          "description": "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-statuses"
        }
      }
    },
    "v1.PodCondition": {
      "description": "PodCondition contains details for the current condition of this pod.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type is the type of the condition. Currently only Ready. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions"
        },
        "status": {
          "type": "string",
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions"
        },
        "lastProbeTime": {
          "type": "string",
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "type": "string",
          "description": "Last time the condition transitioned from one status to another."
        },
        "reason": {
          "type": "string",
          "description": "Unique, one-word, CamelCase reason for the condition's last transition."
        },
        "message": {
          "type": "string",
          "description": "Human-readable message indicating details about last transition."
        }
      }
    },
    "v1.ContainerStatus": {
      "description": "ContainerStatus contains details for the current status of this container.",
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated."
        },
        "state": {
          "$ref": "#/definitions/v1.ContainerState",
          "description": "Details about the container's current condition."
        },
        "lastState": {
          "$ref": "#/definitions/v1.ContainerState",
          "description": "Details about the container's last termination condition."
        },
        "ready": {
          "type": "boolean",
          "description": "Specifies whether the container has passed its readiness probe."
        },
        "restartCount": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC."
        },
        "image": {
          "type": "string",
          "description": "The image the container is running. More info: http://releases.k8s.io/HEAD/docs/user-guide/images.md"
        },
        "imageID": {
          "type": "string",
          "description": "ImageID of the container's image."
        },
        "containerID": {
          "type": "string",
          "description": "Container's ID in the format 'docker://<container_id>'. More info: http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#container-information"
        }
      }
    },
    "v1.ContainerState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "properties": {
        "waiting": {
          "$ref": "#/definitions/v1.ContainerStateWaiting",
          "description": "Details about a waiting container"
        },
        "running": {
          "$ref": "#/definitions/v1.ContainerStateRunning",
          "description": "Details about a running container"
        },
        "terminated": {
          "$ref": "#/definitions/v1.ContainerStateTerminated",
          "description": "Details about a terminated container"
        }
      }
    },
    "v1.ContainerStateWaiting": {
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "properties": {
        "reason": {
          "type": "string",
          "description": "(brief) reason the container is not yet running."
        },
        "message": {
          "type": "string",
          "description": "Message regarding why the container is not yet running."
        }
      }
    },
    "v1.ContainerStateRunning": {
      "description": "ContainerStateRunning is a running state of a container.",
      "properties": {
        "startedAt": {
          "type": "string",
          "description": "Time at which the container was last (re-)started"
        }
      }
    },
    "v1.ContainerStateTerminated": {
      "description": "ContainerStateTerminated is a terminated state of a container.",
      "required": [
        "exitCode"
      ],
      "properties": {
        "exitCode": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Exit status from the last termination of the container"
        },
        "signal": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Signal from the last termination of the container"
        },
        "reason": {
          "type": "string",
          "description": "(brief) reason from the last termination of the container"
        },
        "message": {
          "type": "string",
          "description": "Message regarding the last termination of the container"
        },
        "startedAt": {
          "type": "string",
          "description": "Time at which previous execution of the container started"
        },
        "finishedAt": {
          "type": "string",
          "description": "Time at which the container last terminated"
        },
        "containerID": {
          "type": "string",
          "description": "Container's ID in the format 'docker://<container_id>'"
        }
      }
    },
    "v1.PodTemplateList": {
      "description": "PodTemplateList is a list of PodTemplates.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PodTemplate"
          },
          "description": "List of pod templates"
        }
      }
    },
    "v1.PodTemplate": {
      "description": "PodTemplate describes a template for creating copies of a predefined pod.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "template": {
          "$ref": "#/definitions/v1.PodTemplateSpec",
          "description": "Template defines the pods that will be created from this pod template. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.PodTemplateSpec": {
      "description": "PodTemplateSpec describes the data a pod should have when created from a template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.PodSpec",
          "description": "Specification of the desired behavior of the pod. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.ReplicationControllerList": {
      "description": "ReplicationControllerList is a collection of replication controllers.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ReplicationController"
          },
          "description": "List of replication controllers. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md"
        }
      }
    },
    "v1.ReplicationController": {
      "description": "ReplicationController represents the configuration of a replication controller.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.ReplicationControllerSpec",
          "description": "Spec defines the specification of the desired behavior of the replication controller. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/v1.ReplicationControllerStatus",
          "description": "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.ReplicationControllerSpec": {
      "description": "ReplicationControllerSpec is the specification of a replication controller.",
      "properties": {
        "replicas": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#what-is-a-replication-controller"
        },
        "selector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors"
        },
        "template": {
          "$ref": "#/definitions/v1.PodTemplateSpec",
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#pod-template"
        }
      }
    },
    "v1.ReplicationControllerStatus": {
      "description": "ReplicationControllerStatus represents the current status of a replication controller.",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Replicas is the most recently oberved number of replicas. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#what-is-a-replication-controller"
        },
        "observedGeneration": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "ObservedGeneration reflects the generation of the most recently observed replication controller."
        }
      }
    },
    "v1.ResourceQuotaList": {
      "description": "ResourceQuotaList is a list of ResourceQuota items.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ResourceQuota"
          },
          "description": "Items is a list of ResourceQuota objects. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota"
        }
      }
    },
    "v1.ResourceQuota": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.ResourceQuotaSpec",
          "description": "Spec defines the desired quota. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/v1.ResourceQuotaStatus",
          "description": "Status defines the actual enforced quota and its current usage. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.ResourceQuotaSpec": {
      "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
      "properties": {
        "hard": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Hard is the set of desired hard limits for each named resource. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota"
        }
      }
    },
    "v1.ResourceQuotaStatus": {
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.",
      "properties": {
        "hard": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Hard is the set of enforced hard limits for each named resource. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota"
        },
        "used": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Used is the current observed total usage of the resource in the namespace."
        }
      }
    },
    "v1.SecretList": {
      "description": "SecretList is a list of Secret.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Secret"
          },
          "description": "Items is a list of secret objects. More info: http://releases.k8s.io/HEAD/docs/user-guide/secrets.md"
        }
      }
    },
    "v1.Secret": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Data contains the secret data. Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4"
        },
        "type": {
          "type": "string",
          "description": "Used to facilitate programmatic handling of secret data."
        }
      }
    },
    "v1.ServiceAccountList": {
      "description": "ServiceAccountList is a list of ServiceAccount objects",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ServiceAccount"
          },
          "description": "List of ServiceAccounts. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md#service-accounts"
        }
      }
    },
    "v1.ServiceAccount": {
      "description": "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ObjectReference"
          },
          "description": "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: http://releases.k8s.io/HEAD/docs/user-guide/secrets.md"
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LocalObjectReference"
          },
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: http://releases.k8s.io/HEAD/docs/user-guide/secrets.md#manually-specifying-an-imagepullsecret"
        }
      }
    },
    "v1.ServiceList": {
      "description": "ServiceList holds a list of services.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Service"
          },
          "description": "List of services"
        }
      }
    },
    "v1.Service": {
      "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1.ServiceSpec",
          "description": "Spec defines the behavior of a service. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/v1.ServiceStatus",
          "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1.ServiceSpec": {
      "description": "ServiceSpec describes the attributes that a user creates on a service.",
      "required": [
        "ports"
      ],
      "properties": {
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ServicePort"
          },
          "description": "The list of ports that are exposed by this service. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies"
        },
        "selector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "This service will route traffic to pods having labels matching this selector. Label keys and values that must match in order to receive traffic for this service. If empty, all pods are selected, if not specified, endpoints must be manually specified. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#overview"
        },
        "clusterIP": {
          "type": "string",
          "description": "ClusterIP is usually assigned by the master and is the IP address of the service. If specified, it will be allocated to the service if it is unused or else creation of the service will fail. Valid values are None, empty string (\"\"), or a valid IP address. 'None' can be specified for a headless service when proxying is not required. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies"
        },
        "type": {
          "type": "string",
          "description": "Type of exposed service. Must be ClusterIP, NodePort, or LoadBalancer. Defaults to ClusterIP. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#external-services"
        },
        "externalIPs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.  A previous form of this functionality exists as the deprecatedPublicIPs field.  When using this field, callers should also clear the deprecatedPublicIPs field."
        },
        "deprecatedPublicIPs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "deprecatedPublicIPs is deprecated and replaced by the externalIPs field with almost the exact same semantics.  This field is retained in the v1 API for compatibility until at least 8/20/2016.  It will be removed from any new API revisions.  If both deprecatedPublicIPs *and* externalIPs are set, deprecatedPublicIPs is used."
        },
        "sessionAffinity": {
          "type": "string",
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies"
        },
        "loadBalancerIP": {
          "type": "string",
          "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature."
        }
      }
    },
    "v1.ServicePort": {
      "description": "ServicePort conatins information on service's port.",
      "required": [
        "port"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service."
        },
        "protocol": {
          "type": "string",
          "description": "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP."
        },
        "port": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "The port that will be exposed by this service."
        },
        "targetPort": {
          "type": "string",
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of Port is used (an identity map). Defaults to the service port. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#defining-a-service"
        },
        "nodePort": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#type--nodeport"
        }
      }
    },
    "v1.ServiceStatus": {
      "description": "ServiceStatus represents the current status of a service.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/v1.LoadBalancerStatus",
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present."
        }
      }
    },
    "v1.LoadBalancerStatus": {
      "description": "LoadBalancerStatus represents the status of a load-balancer.",
      "properties": {
        "ingress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LoadBalancerIngress"
          },
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points."
        }
      }
    },
    "v1.LoadBalancerIngress": {
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
      "properties": {
        "ip": {
          "type": "string",
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)"
        },
        "hostname": {
          "type": "string",
          "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)"
        }
      }
    },
    "v1beta1.HorizontalPodAutoscalerList": {
      "description": "list of horizontal pod autoscaler objects.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
          },
          "description": "list of horizontal pod autoscaler objects."
        }
      }
    },
    "v1beta1.HorizontalPodAutoscaler": {
      "description": "configuration of a horizontal pod autoscaler.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1beta1.HorizontalPodAutoscalerSpec",
          "description": "behaviour of autoscaler. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status."
        },
        "status": {
          "$ref": "#/definitions/v1beta1.HorizontalPodAutoscalerStatus",
          "description": "current information about the autoscaler."
        }
      }
    },
    "v1beta1.HorizontalPodAutoscalerSpec": {
      "description": "specification of a horizontal pod autoscaler.",
      "required": [
        "scaleRef",
        "maxReplicas"
      ],
      "properties": {
        "scaleRef": {
          "$ref": "#/definitions/v1beta1.SubresourceReference",
          "description": "reference to Scale subresource; horizontal pod autoscaler will learn the current resource consumption from its status, and will set the desired number of pods by modifying its spec."
        },
        "minReplicas": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "lower limit for the number of pods that can be set by the autoscaler, default 1."
        },
        "maxReplicas": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas."
        },
        "cpuUtilization": {
          "$ref": "#/definitions/v1beta1.CPUTargetUtilization",
          "description": "target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified it defaults to the target CPU utilization at 80% of the requested resources."
        }
      }
    },
    "v1beta1.SubresourceReference": {
      "description": "SubresourceReference contains enough information to let you inspect or modify the referred subresource.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of the referent; More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\""
        },
        "name": {
          "type": "string",
          "description": "Name of the referent; More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names"
        },
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent"
        },
        "subresource": {
          "type": "string",
          "description": "Subresource name of the referent"
        }
      }
    },
    "v1beta1.CPUTargetUtilization": {
      "required": [
        "targetPercentage"
      ],
      "properties": {
        "targetPercentage": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "fraction of the requested CPU that should be utilized/used, e.g. 70 means that 70% of the requested CPU should be in use."
        }
      }
    },
    "v1beta1.HorizontalPodAutoscalerStatus": {
      "description": "current status of a horizontal pod autoscaler",
      "required": [
        "currentReplicas",
        "desiredReplicas"
      ],
      "properties": {
        "observedGeneration": {
          "$ref": "#/definitions/integer",
          "format": "int64",
          "description": "most recent generation observed by this autoscaler."
        },
        "lastScaleTime": {
          "type": "string",
          "description": "last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed."
        },
        "currentReplicas": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "current number of replicas of pods managed by this autoscaler."
        },
        "desiredReplicas": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "desired number of replicas of pods managed by this autoscaler."
        },
        "currentCPUUtilizationPercentage": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU."
        }
      }
    },
    "v1beta1.IngressList": {
      "description": "IngressList is a collection of Ingress.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.Ingress"
          },
          "description": "Items is the list of Ingress."
        }
      }
    },
    "v1beta1.Ingress": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1beta1.IngressSpec",
          "description": "Spec is the desired state of the Ingress. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/v1beta1.IngressStatus",
          "description": "Status is the current state of the Ingress. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1beta1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/v1beta1.IngressBackend",
          "description": "A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default."
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.IngressRule"
          },
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend."
        }
      }
    },
    "v1beta1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "required": [
        "serviceName",
        "servicePort"
      ],
      "properties": {
        "serviceName": {
          "type": "string",
          "description": "Specifies the name of the referenced service."
        },
        "servicePort": {
          "type": "string",
          "description": "Specifies the port of the referenced service."
        }
      }
    },
    "v1beta1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "properties": {
        "host": {
          "type": "string",
          "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n\t  IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue."
        },
        "http": {
          "$ref": "#/definitions/v1beta1.HTTPIngressRuleValue"
        }
      }
    },
    "v1beta1.HTTPIngressRuleValue": {
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "required": [
        "paths"
      ],
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.HTTPIngressPath"
          },
          "description": "A collection of paths that map requests to backends."
        }
      }
    },
    "v1beta1.HTTPIngressPath": {
      "description": "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.",
      "required": [
        "backend"
      ],
      "properties": {
        "path": {
          "type": "string",
          "description": "Path is a extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend."
        },
        "backend": {
          "$ref": "#/definitions/v1beta1.IngressBackend",
          "description": "Backend defines the referenced service endpoint to which the traffic will be forwarded to."
        }
      }
    },
    "v1beta1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/v1.LoadBalancerStatus",
          "description": "LoadBalancer contains the current status of the load-balancer."
        }
      }
    },
    "v1beta1.JobList": {
      "description": "JobList is a collection of jobs.",
      "required": [
        "items"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta",
          "description": "Standard list metadata More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.Job"
          },
          "description": "Items is the list of Job."
        }
      }
    },
    "v1beta1.Job": {
      "description": "Job represents the configuration of a single job.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1beta1.JobSpec",
          "description": "Spec is a structure defining the expected behavior of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/v1beta1.JobStatus",
          "description": "Status is a structure describing current status of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }
      }
    },
    "v1beta1.JobSpec": {
      "description": "JobSpec describes how the job execution will look like.",
      "required": [
        "template"
      ],
      "properties": {
        "parallelism": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md"
        },
        "completions": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Completions specifies the desired number of successfully finished pods the job should be run with. Defaults to 1. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md"
        },
        "selector": {
          "$ref": "#/definitions/v1beta1.PodSelector",
          "description": "Selector is a label query over pods that should match the pod count. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors"
        },
        "template": {
          "$ref": "#/definitions/v1.PodTemplateSpec",
          "description": "Template is the object that describes the pod that will be created when executing a job. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md"
        }
      }
    },
    "v1beta1.PodSelector": {
      "description": "A pod selector is a label query over a set of pods. The result of matchLabels and matchExpressions are ANDed. An empty pod selector matches all objects. A null pod selector matches no objects.",
      "properties": {
        "matchLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
        },
        "matchExpressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.PodSelectorRequirement"
          },
          "description": "matchExpressions is a list of pod selector requirements. The requirements are ANDed."
        }
      }
    },
    "v1beta1.PodSelectorRequirement": {
      "description": "A pod selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
        }
      }
    },
    "v1beta1.JobStatus": {
      "description": "JobStatus represents the current state of a Job.",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.JobCondition"
          },
          "description": "Conditions represent the latest available observations of an object's current state. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md"
        },
        "startTime": {
          "type": "string",
          "description": "StartTime represents time when the job was acknowledged by the Job Manager. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC."
        },
        "completionTime": {
          "type": "string",
          "description": "CompletionTime represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC."
        },
        "active": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Active is the number of actively running pods."
        },
        "succeeded": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Succeeded is the number of pods which reached Phase Succeeded."
        },
        "failed": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "Failed is the number of pods which reached Phase Failed."
        }
      }
    },
    "v1beta1.JobCondition": {
      "description": "JobCondition describes current state of a job.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of job condition, currently only Complete."
        },
        "status": {
          "type": "string",
          "description": "Status of the condition, one of True, False, Unknown."
        },
        "lastProbeTime": {
          "type": "string",
          "description": "Last time the condition was checked."
        },
        "lastTransitionTime": {
          "type": "string",
          "description": "Last time the condition transit from one status to another."
        },
        "reason": {
          "type": "string",
          "description": "(brief) reason for the condition's last transition."
        },
        "message": {
          "type": "string",
          "description": "Human readable message indicating details about last transition."
        }
      }
    },
    "v1beta1.Scale": {
      "description": "represents a scaling request for a resource.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta",
          "description": "Standard object metadata; More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1beta1.ScaleSpec",
          "description": "defines the behavior of the scale. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status."
        },
        "status": {
          "$ref": "#/definitions/v1beta1.ScaleStatus",
          "description": "current status of the scale. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status. Read-only."
        }
      }
    },
    "v1beta1.ScaleSpec": {
      "description": "describes the attributes of a scale subresource",
      "properties": {
        "replicas": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "desired number of instances for the scaled object."
        }
      }
    },
    "v1beta1.ScaleStatus": {
      "description": "represents the current status of a scale subresource.",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "$ref": "#/definitions/integer",
          "format": "int32",
          "description": "actual number of observed instances of the scaled object."
        },
        "selector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "label query over pods that should match the replicas count. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors"
        }
      }
    }
  }
}
